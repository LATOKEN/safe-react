{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ContractInteraction/Review/index.tsx","routes/safe/components/Balances/SendModal/utils.tsx","routes/safe/components/Balances/SendModal/TransferAmount/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/style.ts"],"names":["useStyles","makeStyles","styles","ContractInteractionReview","onClose","onPrev","tx","explorerUrl","getExplorerInfo","contractAddress","classes","dispatch","useDispatch","safeAddress","useSafeAddress","nativeCurrency","getNativeCurrency","addressName","useSelector","state","addressBookEntryName","address","useState","txData","txAmount","txRecipient","txInfo","setTxInfo","useEffect","value","toTokenUnit","decimals","data","trim","txValue","txTo","onSubmit","txParameters","delayExecution","createTransaction","to","valueInWei","txNonce","safeNonce","safeTxGas","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","STANDARD_TX","console","error","onBack","subTitle","getStepTitle","title","className","formContainer","align","margin","token","getEthAsToken","text","symbol","color","noMargin","size","hash","name","strongName","showAvatar","showCopyBtn","style","selectedMethod","inputs","map","index","type","key","generateFormFieldKey","signatureHash","getValueFromTxInputs","outerData","currentStep","totalSteps","AmountWrapper","styled","div","StyledBlock","Block","TransferAmount","alt","onError","setImageToPlaceholder","src","logoUri","marginTop","createStyles","qrCodeBtn","cursor","padding","md","lg","wordBreak","marginLeft","sm","minHeight","overflow","fontSize","fontFamily","maxHeight","letterSpacing","fontStretch","lineHeight","buttonRow","height","justifyContent","gap","dataInput","border","selectAddress","fullWidth"],"mappings":"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","file":"static/js/62.bf4511c0.chunk.js","sourcesContent":["import { useEffect, useState, Fragment } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\nimport { toTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\nimport { AbiItemExtended } from 'src/logic/contractInteraction/sources/ABIService'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\nimport { getEthAsToken } from 'src/logic/tokens/utils/tokenHelpers'\nimport { styles } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/style'\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport {\n  generateFormFieldKey,\n  getValueFromTxInputs,\n} from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils'\nimport { addressBookEntryName } from 'src/logic/addressBook/store/selectors'\nimport { ModalHeader } from 'src/routes/safe/components/Balances/SendModal/screens/ModalHeader'\nimport { TxModalWrapper } from 'src/routes/safe/components/Transactions/helpers/TxModalWrapper'\nimport { TransferAmount } from 'src/routes/safe/components/Balances/SendModal/TransferAmount'\nimport { getStepTitle } from 'src/routes/safe/components/Balances/SendModal/utils'\nimport useSafeAddress from 'src/logic/currentSession/hooks/useSafeAddress'\n\nconst useStyles = makeStyles(styles)\n\nexport type TransactionReviewType = {\n  abi?: string\n  contractAddress?: string\n  data?: string\n  value?: string\n  selectedMethod?: AbiItemExtended\n}\n\ntype Props = {\n  onClose: () => void\n  onPrev: () => void\n  onEditTxParameters: () => void\n  tx: TransactionReviewType\n  txParameters: TxParameters\n}\n\nconst ContractInteractionReview = ({ onClose, onPrev, tx }: Props): React.ReactElement => {\n  const explorerUrl = getExplorerInfo(tx.contractAddress as string)\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const { safeAddress } = useSafeAddress()\n  const nativeCurrency = getNativeCurrency()\n  const addressName = useSelector((state) => addressBookEntryName(state, { address: tx.contractAddress as string }))\n\n  const [txInfo, setTxInfo] = useState<{\n    txRecipient: string\n    txData: string\n    txAmount: string\n  }>({ txData: '', txAmount: '', txRecipient: '' })\n\n  useEffect(() => {\n    setTxInfo({\n      txRecipient: tx.contractAddress as string,\n      txAmount: tx.value ? toTokenUnit(tx.value, nativeCurrency.decimals) : '0',\n      txData: tx.data ? tx.data.trim() : '',\n    })\n  }, [tx.contractAddress, tx.value, tx.data, safeAddress, nativeCurrency.decimals])\n\n  const submitTx = (txParameters: TxParameters, delayExecution: boolean) => {\n    if (safeAddress && txInfo) {\n      dispatch(\n        createTransaction({\n          safeAddress,\n          to: txInfo?.txRecipient,\n          valueInWei: txInfo?.txAmount,\n          txData: txInfo?.txData,\n          txNonce: txParameters.safeNonce,\n          safeTxGas: txParameters.safeTxGas,\n          ethParameters: txParameters,\n          notifiedTransaction: TX_NOTIFICATION_TYPES.STANDARD_TX,\n          delayExecution,\n        }),\n      )\n    } else {\n      console.error('There was an error trying to submit the transaction, the safeAddress was not found')\n    }\n    onClose()\n  }\n\n  return (\n    <TxModalWrapper\n      txData={txInfo?.txData}\n      txValue={txInfo?.txAmount}\n      txTo={txInfo?.txRecipient}\n      onSubmit={submitTx}\n      onBack={onPrev}\n    >\n      <ModalHeader onClose={onClose} subTitle={getStepTitle(2, 2)} title=\"Contract interaction\" />\n      <Hairline />\n      <Block className={classes.formContainer}>\n        <Row align=\"center\" margin=\"md\">\n          <TransferAmount token={getEthAsToken('0')} text={`${tx.value || 0} ${nativeCurrency.symbol}`} />\n        </Row>\n        <Row margin=\"xs\">\n          <Paragraph color=\"disabled\" noMargin size=\"lg\">\n            Contract Address\n          </Paragraph>\n        </Row>\n        <Row align=\"center\" margin=\"md\">\n          <PrefixedEthHashInfo\n            hash={tx.contractAddress as string}\n            name={addressName}\n            strongName\n            showAvatar\n            showCopyBtn\n            explorerUrl={explorerUrl}\n          />\n        </Row>\n        <Row margin=\"xs\">\n          <Paragraph color=\"disabled\" noMargin size=\"lg\">\n            Method\n          </Paragraph>\n        </Row>\n        <Row align=\"center\" margin=\"lg\">\n          <Paragraph className={classes.value} size=\"lg\" style={{ margin: 0 }}>\n            {tx.selectedMethod?.name}\n          </Paragraph>\n        </Row>\n        {tx.selectedMethod?.inputs?.map(({ name, type }, index) => {\n          const key = generateFormFieldKey(type, tx.selectedMethod?.signatureHash || '', index)\n          const value: string = getValueFromTxInputs(key, type, tx)\n\n          return (\n            <Fragment key={key}>\n              <Row margin=\"xs\">\n                <Paragraph color=\"disabled\" noMargin size=\"lg\">\n                  {name} ({type})\n                </Paragraph>\n              </Row>\n              <Row align=\"center\" margin=\"md\">\n                <Paragraph className={classes.value} noMargin size=\"lg\" style={{ margin: 0 }}>\n                  {value}\n                </Paragraph>\n              </Row>\n            </Fragment>\n          )\n        })}\n        <Row margin=\"xs\">\n          <Paragraph color=\"disabled\" noMargin size=\"lg\">\n            Data (hex encoded)\n          </Paragraph>\n        </Row>\n        <Row align=\"center\">\n          <Col className={classes.outerData}>\n            <Row className={classes.data} size=\"lg\">\n              {tx.data}\n            </Row>\n          </Col>\n        </Row>\n      </Block>\n    </TxModalWrapper>\n  )\n}\n\nexport default ContractInteractionReview\n","export const getStepTitle = (currentStep: number, totalSteps: number): string => `Step ${currentStep} of ${totalSteps}`\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\n\nimport { Token } from 'src/logic/tokens/store/model/token'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Block from 'src/components/layout/Block'\n\nconst AmountWrapper = styled.div`\n  width: 100%;\n  text-align: center;\n`\n\nconst StyledBlock = styled(Block)`\n  width: 40px;\n  margin: auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  & img {\n    width: 26px;\n    height: auto;\n  }\n`\n\nexport type TransferAmountProps = {\n  token: Token\n  text: string\n}\n\nexport const TransferAmount = ({ token, text }: TransferAmountProps): ReactElement => {\n  return (\n    <AmountWrapper>\n      <StyledBlock>\n        <img alt={token.name} onError={setImageToPlaceholder} src={token.logoUri || ''} />\n      </StyledBlock>\n      <Paragraph size=\"xl\" color=\"black600\" noMargin style={{ marginTop: '8px' }}>\n        {text}\n      </Paragraph>\n    </AmountWrapper>\n  )\n}\n","import { lg, md, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n  formContainer: {\n    padding: `${md} ${lg}`,\n    wordBreak: 'break-word',\n  },\n  value: {\n    marginLeft: sm,\n  },\n  outerData: {\n    minHeight: '21px',\n  },\n  data: {\n    wordBreak: 'break-all',\n    overflow: 'auto',\n    fontSize: '16px',\n    fontFamily: 'Averta',\n    maxHeight: '100px',\n    letterSpacing: 'normal',\n    fontStretch: 'normal',\n    lineHeight: '1.43',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n  dataInput: {\n    '& TextField-root-294': {\n      lineHeight: 'auto',\n      border: 'green',\n    },\n  },\n  selectAddress: {\n    cursor: 'pointer',\n  },\n  fullWidth: {\n    justifyContent: 'space-between',\n  },\n})\n"],"sourceRoot":""}