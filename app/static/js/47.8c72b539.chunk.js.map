{"version":3,"sources":["assets/icons/qrcode.svg","components/ScanQRModal/style.ts","components/ScanQRModal/index.tsx","components/ScanQRModal/ScanQRWrapper/index.tsx","components/Table/TableHead.tsx","components/ButtonHelper/index.tsx","components/Table/sorting.ts","components/Table/index.tsx","components/forms/AddressInput/index.tsx","routes/safe/components/AddressBook/style.ts","routes/safe/components/AddressBook/CreateEditEntryModal/style.ts","routes/safe/components/AddressBook/CreateEditEntryModal/index.tsx","routes/safe/components/AddressBook/HelpInfo/index.tsx","routes/safe/components/AddressBook/ExportEntriesModal/assets/success.svg","routes/safe/components/AddressBook/ExportEntriesModal/assets/error.svg","routes/safe/components/AddressBook/ExportEntriesModal/assets/wait.svg","utils/events/addressBook.ts","routes/safe/components/AddressBook/ExportEntriesModal/index.tsx","routes/safe/components/AddressBook/DeleteEntryModal/index.tsx","routes/safe/components/AddressBook/columns.ts","routes/safe/components/AddressBook/utils.ts","routes/safe/components/AddressBook/ImportEntriesModal/index.tsx","routes/safe/components/AddressBook/index.tsx"],"names":["styles","createStyles","heading","padding","lg","justifyContent","maxHeight","boxSizing","loaderContainer","width","height","close","color","secondaryText","detailsContainer","backgroundColor","background","buttonRow","button","marginLeft","sm","useStyles","makeStyles","ScanQRModal","isOpen","onClose","onScan","classes","useState","fileUploadModalOpen","setFileUploadModalOpen","error","setError","cameraBlocked","setCameraBlocked","scannerRef","React","openImageDialog","current","useEffect","onFileScannedResolve","successData","console","name","Modal","description","handleClose","open","title","Row","align","className","grow","Paragraph","noMargin","size","IconButton","disableRipple","onClick","Hairline","Col","layout","middle","Block","margin","legacyMode","onError","err","data","ref","style","facingMode","Button","minWidth","variant","qrCodeBtn","cursor","ScanQRWrapper","handleScan","testId","qrModalOpen","setQrModalOpen","closeQrModal","Img","alt","role","src","QRIcon","value","cellWidth","maxWidth","GnoTableHead","changeSort","property","orderAttr","onSort","props","this","columns","order","orderBy","map","column","disablePadding","sortDirection","id","static","label","active","direction","UnStyledButton","styled","theme","colors","separator","ButtonHelper","children","dataTestId","type","desc","a","b","orderProp","format","root","borderTopRightRadius","borderTopLeftRadius","boxShadow","selectRoot","lineHeight","xxl","white","paginationRoot","marginBottom","borderBottomRightRadius","borderBottomLeftRadius","loader","backProps","nextProps","GnoTable","newOrderBy","state","defaultOrder","newOrder","setState","fixed","getEmptyStyle","display","alignItems","handleChangePage","e","page","handleChangeRowsPerPage","rowsPerPage","Number","target","undefined","defaultOrderBy","find","defaultFixed","defaultRowsPerPage","disableLoadingOnEmptyTable","disablePagination","noBorder","orderByParam","orderParam","displayRows","fixedParam","paginationClasses","input","columnSort","sortedData","dataArray","cmp","fixedElems","filter","elem","List","stabilizedThis","el","index","sortedElems","sort","concat","stableSort","getSorting","formatTypeSort","slice","isEmpty","Table","TableHead","TableBody","TablePagination","backIconButtonProps","component","count","nextIconButtonProps","onPageChange","onRowsPerPageChange","rowsPerPageOptions","defaultProps","withStyles","AddressInput","text","placeholder","fieldMutator","inputAdornment","validators","defaultValue","disabled","currentInput","setCurrentInput","resolutions","setResolutions","resolvedAddress","isResolving","sanitizedValidators","useCallback","val","parsed","parsePrefixedAddress","composeValidators","address","allValidators","useMemo","required","mustBeEthereumAddress","onValueChange","rawVal","trimSpaces","isValidEnsName","isValidCryptoDomainName","prev","getAddressFromDomain","then","resolverAddr","formattedAddress","checksumAddress","catch","logError","Errors","_101","message","checkedAddress","adornment","endAdornment","position","TextField","spellCheck","validate","inputProps","formContainer","minHeight","paddingBottom","annotation","paddingLeft","hide","visibility","actions","gap","md","noBorderBottom","borderBottom","controlsRow","borderRadius","editEntryButton","editEntryButtonNonOwner","removeEntryButton","removeEntryButtonDisabled","removeEntryButtonNonOwner","leftIcon","marginRight","iconSmall","fontSize","manage","container","CREATE_ENTRY_INPUT_NAME_ID","CREATE_ENTRY_INPUT_ADDRESS_ID","SAVE_NEW_ENTRY_BTN_ID","formMutators","setOwnerAddress","args","utils","changeValue","CreateEditEntryModal","editEntryModalHandler","entryToEdit","newEntryModalHandler","entry","isNew","initialValues","storedAddressesInThisNetwork","useSelector","currentNetworkAddressBookAddresses","isUniqueAddress","uniqueAddress","Header","Title","Body","withoutPadding","GnoForm","onSubmit","values","formState","mutators","scannedAddress","startsWith","replace","xs","Field","validAddressBookName","center","Footer","Buttons","cancelButtonProps","confirmButtonProps","valid","StyledIcon","Icon","HelpInfo","href","rel","as","ADDRESS_BOOK","EXPORT","event","GTM_EVENT","CLICK","action","DOWNLOAD_BUTTON","IMPORT","IMPORT_BUTTON","CREATE_ENTRY","EDIT_ENTRY","DELETE_ENTRY","SEND","ADDRESS_BOOK_EVENTS","addEventCategory","ImageContainer","InfoContainer","BodyImage","div","StyledLoader","Loader","ExportEntriesModal","dispatch","useDispatch","addressBook","addressBookState","loading","setLoading","csvData","setCsvData","doRetry","setDoRetry","date","Date","jsonToCSV","handleCsvData","withoutMargin","ErrorSvg","LoadingSvg","SuccessSvg","strong","length","withoutBorder","bom","filename","Track","setTimeout","showNotification","NOTIFICATIONS","ADDRESS_BOOK_EXPORT_ENTRIES_ERROR","DeleteEntryModal","deleteEntryModalHandler","entryToDelete","AB_NAME_ID","AB_ADDRESS_ID","IMPORT_SUPPORTED_FORMATS","CSV_EXTENSION_REGEX","ImportContainer","ImportEntriesModal","importEntryModalHandler","csvLoaded","setCsvLoaded","importError","setImportError","entryList","setEntryList","onDrop","parseResults","file","slicedData","fileError","includes","test","toLowerCase","validateFile","trimmedData","forEach","row","push","dataError","chainId","trim","lowerCaseAddress","isValidAddress","isValidChainId","validateCsvData","formattedList","addRemoveButton","onRemoveFile","dropArea","borderColor","dropAreaActive","dropFile","fileSizeInfo","left","top","fileNameInfo","overflow","progressBar","removeButton","trackEvent","StyledButton","AddressBookTable","nameColumn","custom","addressColumn","actionsColumn","generateColumns","autoColumns","safesList","safesAsList","currentNetworkAddressBook","networkId","currentChainId","granted","grantedSelector","initialEntryState","selectedEntry","setSelectedEntry","editCreateEntryModalOpen","setEditCreateEntryModalOpen","importEntryModalOpen","setImportEntryModalOpen","deleteEntryModalOpen","setDeleteEntryModalOpen","exportEntriesModalOpen","setExportEntriesModalOpen","sendFundsModalOpen","setSendFundsModalOpen","history","useHistory","queryParams","Object","fromEntries","URLSearchParams","location","search","entryAddressToEditOrCreateNew","entryAddress","oldEntryIndex","findIndex","sameAddress","start","iconType","counter","toString","end","iconSize","textSize","TableContainer","userOwner","isUserAnOwnerOfAnySafe","hideBorderBottom","TableRow","cn","tabIndex","TableCell","justify","PrefixedEthHashInfo","hash","showCopyBtn","showAvatar","explorerUrl","getExplorerInfo","isOwnerAddress","tooltip","addressBookAddOrUpdate","makeAddressBookEntry","addressBookRemove","addressList","addressBookImport","SendModal","activeScreenType","recipientAddress","recipientName"],"mappings":"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","file":"static/js/47.8c72b539.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/qrcode.fec1b6d8.svg\";","import { background, lg, secondaryText, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: lg,\n    justifyContent: 'space-between',\n    maxHeight: '75px',\n    boxSizing: 'border-box',\n  },\n  loaderContainer: {\n    width: '100%',\n    height: '100%',\n  },\n  close: {\n    height: '25px',\n    width: '25px',\n    color: secondaryText,\n  },\n  detailsContainer: {\n    backgroundColor: background,\n    maxHeight: '450px',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n  },\n  button: {\n    '&:last-child': {\n      marginLeft: sm,\n    },\n  },\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Close from '@material-ui/icons/Close'\nimport * as React from 'react'\nimport QrReader from 'react-qr-reader'\n\nimport { styles } from './style'\n\nimport Modal from 'src/components/Modal'\nimport Block from 'src/components/layout/Block'\nimport Button from 'src/components/layout/Button'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { useEffect, useState } from 'react'\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  isOpen: boolean\n  onClose: () => void\n  onScan: (value: string) => void\n}\n\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\n  const classes = useStyles()\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n  const [cameraBlocked, setCameraBlocked] = useState<boolean>(false)\n  const scannerRef: any = React.createRef()\n  const openImageDialog = React.useCallback(() => {\n    scannerRef.current.openImageDialog()\n  }, [scannerRef])\n\n  useEffect(() => {\n    if (!fileUploadModalOpen && cameraBlocked && !error) {\n      setFileUploadModalOpen(true)\n      openImageDialog()\n    }\n  }, [cameraBlocked, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\n\n  const onFileScannedResolve = (error: Error | null, successData: string | null) => {\n    if (error) {\n      console.error('QR code error', error)\n\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDismissedError') {\n        setCameraBlocked(true)\n        setFileUploadModalOpen(false)\n      } else {\n        setError('The QR could not be read')\n      }\n      return\n    }\n\n    if (successData) {\n      onScan(successData)\n    } else if (cameraBlocked) {\n      setError('The QR could not be read')\n    }\n  }\n\n  return (\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\n      <Row align=\"center\" className={classes.heading} grow>\n        <Paragraph noMargin size=\"xl\">\n          Scan QR\n        </Paragraph>\n        <IconButton disableRipple onClick={onClose}>\n          <Close className={classes.close} />\n        </IconButton>\n      </Row>\n      <Hairline />\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\n        {error && (\n          <Block padding=\"md\" margin=\"md\">\n            {error}\n          </Block>\n        )}\n        <QrReader\n          legacyMode={cameraBlocked}\n          onError={(err: Error) => onFileScannedResolve(err, null)}\n          onScan={(data: string) => onFileScannedResolve(null, data)}\n          ref={scannerRef}\n          style={{ width: '400px', height: '400px' }}\n          facingMode=\"user\"\n        />\n      </Col>\n      <Hairline />\n      <Row align=\"center\" className={classes.buttonRow}>\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\n          Close\n        </Button>\n        <Button\n          className={classes.button}\n          color=\"primary\"\n          minWidth={154}\n          onClick={() => {\n            setCameraBlocked(true)\n            setError(null)\n            setFileUploadModalOpen(false)\n          }}\n          variant=\"contained\"\n        >\n          Upload an image\n        </Button>\n      </Row>\n    </Modal>\n  )\n}\n","import { makeStyles } from '@material-ui/core/styles'\nimport { ReactElement, useState } from 'react'\n\nimport QRIcon from 'src/assets/icons/qrcode.svg'\nimport { ScanQRModal } from 'src/components/ScanQRModal'\nimport Img from 'src/components/layout/Img'\n\nconst useStyles = makeStyles({\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n})\n\ntype Props = {\n  handleScan: (dataResult: string, closeQrModal: () => void) => void\n  testId?: string\n}\n\nexport const ScanQRWrapper = ({ handleScan, testId }: Props): ReactElement => {\n  const classes = useStyles()\n  const [qrModalOpen, setQrModalOpen] = useState(false)\n\n  const openQrModal = () => {\n    setQrModalOpen(true)\n  }\n\n  const closeQrModal = () => {\n    setQrModalOpen(false)\n  }\n\n  const onScanFinished = (value: string) => {\n    handleScan(value, closeQrModal)\n  }\n\n  return (\n    <>\n      <Img\n        alt=\"Scan QR\"\n        className={classes.qrCodeBtn}\n        height={20}\n        onClick={() => openQrModal()}\n        role=\"button\"\n        src={QRIcon}\n        testId={testId || 'qr-icon'}\n      />\n      {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={onScanFinished} />}\n    </>\n  )\n}\n","import TableCell from '@material-ui/core/TableCell'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\nimport * as React from 'react'\n\ninterface CellWidth {\n  maxWidth: string\n}\n\nexport const cellWidth = (width?: string | number): CellWidth | undefined => {\n  if (!width) {\n    return undefined\n  }\n\n  return {\n    maxWidth: `${width}px`,\n  }\n}\n\nclass GnoTableHead extends React.PureComponent<any> {\n  changeSort =\n    (property: string, orderAttr: string): (() => void) =>\n    () => {\n      const { onSort } = this.props\n\n      onSort(property, orderAttr)\n    }\n\n  render(): React.ReactElement {\n    const { columns, order, orderBy } = this.props\n\n    return (\n      <TableHead>\n        <TableRow>\n          {columns.map((column) => (\n            <TableCell\n              align={column.align}\n              key={column.id}\n              padding={column.disablePadding ? 'none' : 'normal'}\n              sortDirection={orderBy === column.id ? order : false}\n            >\n              {column.static ? (\n                <div style={column.style}>{column.label}</div>\n              ) : (\n                <TableSortLabel\n                  active={orderBy === column.id}\n                  direction={order}\n                  onClick={this.changeSort(column.id, column.order)}\n                  style={column.style}\n                >\n                  {column.label}\n                </TableSortLabel>\n              )}\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n    )\n  }\n}\n\nexport default GnoTableHead\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\n\nconst UnStyledButton = styled.button`\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 0;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 50%;\n  transition: background-color 0.2s ease-in-out;\n  outline-color: transparent;\n  height: 24px;\n  width: 24px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  :hover {\n    background-color: ${({ theme }) => theme.colors.separator};\n  }\n`\ntype Props = {\n  onClick?: () => void\n  children: ReactElement\n  dataTestId?: string\n}\n\nconst ButtonHelper = ({ onClick = () => undefined, children, dataTestId }: Props): React.ReactElement => {\n  return (\n    <UnStyledButton onClick={onClick} type={'button'} data-testid={dataTestId}>\n      {children}\n    </UnStyledButton>\n  )\n}\n\nexport default ButtonHelper\n","import { List } from 'immutable'\n\nexport const FIXED = 'fixed'\n\nexport const buildOrderFieldFrom = (attr: string): string => `${attr}Order`\n\nconst desc = (\n  a: string,\n  b: string,\n  orderBy: string,\n  orderProp: boolean,\n  format: (value: string | number) => string | number,\n): number => {\n  const order = orderProp ? buildOrderFieldFrom(orderBy) : orderBy\n\n  if (format(b[order]) < format(a[order])) {\n    return -1\n  }\n  if (format(b[order]) > format(a[order])) {\n    return 1\n  }\n\n  return 0\n}\n\n// eslint-disable-next-line\nexport const stableSort = (dataArray, cmp, fixed) => {\n  const fixedElems = fixed ? dataArray.filter((elem) => elem.fixed) : List([])\n  const data = fixed ? dataArray.filter((elem) => !elem[FIXED]) : dataArray\n  let stabilizedThis = data.map((el, index) => [el, index])\n\n  stabilizedThis = stabilizedThis.sort((a, b) => {\n    const order = cmp(a[0], b[0])\n\n    if (order !== 0) {\n      return order\n    }\n\n    return a[1] - b[1]\n  })\n\n  const sortedElems = stabilizedThis.map((el) => el[0])\n\n  return fixedElems.concat(sortedElems)\n}\n\nexport const getSorting = (\n  order: 'desc' | 'asc',\n  orderBy: string,\n  orderProp: boolean,\n  format: (value: string | number) => string | number = (value) => value,\n): ((a: string, b: string) => number) =>\n  order === 'desc'\n    ? (a, b) => desc(a, b, orderBy, orderProp, format)\n    : (a, b) => -desc(a, b, orderBy, orderProp, format)\n","import { Loader } from '@gnosis.pm/safe-react-components'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TablePagination from '@material-ui/core/TablePagination'\nimport { withStyles } from '@material-ui/core/styles'\nimport * as React from 'react'\n\nimport TableHead from 'src/components/Table/TableHead'\nimport { getSorting, stableSort } from 'src/components/Table/sorting'\nimport Row from 'src/components/layout/Row'\nimport { sm, xxl } from 'src/theme/variables'\n\nconst styles = {\n  root: {\n    backgroundColor: 'white',\n    borderTopRightRadius: sm,\n    borderTopLeftRadius: sm,\n    boxShadow: '1px 2px 10px 0 rgba(212, 212, 211, 0.59)',\n  },\n  selectRoot: {\n    lineHeight: xxl,\n    backgroundColor: 'white',\n  },\n  white: {\n    backgroundColor: 'white',\n  },\n  paginationRoot: {\n    backgroundColor: 'white',\n    boxShadow: '1px 2px 10px 0 rgba(212, 212, 211, 0.59)',\n    marginBottom: '90px',\n    borderBottomRightRadius: sm,\n    borderBottomLeftRadius: sm,\n  },\n  loader: {\n    boxShadow: '1px 2px 10px 0 rgba(212, 212, 211, 0.59)',\n  },\n}\n\nconst FIXED_EMPTY_HEIGHT = 255\n\nconst backProps = {\n  'aria-label': 'Previous Page',\n}\n\nconst nextProps = {\n  'aria-label': 'Next Page',\n}\n\nclass GnoTable extends React.Component<any, any> {\n  static defaultProps = {\n    defaultOrder: 'asc',\n    disablePagination: false,\n    defaultRowsPerPage: 5,\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      page: 0,\n      order: undefined,\n      orderBy: undefined,\n      fixed: undefined,\n      orderProp: false,\n      rowsPerPage: undefined,\n    }\n  }\n\n  componentDidMount() {\n    const { columns, defaultOrderBy } = this.props\n\n    if (defaultOrderBy && columns) {\n      const defaultOrderCol = columns.find(({ id }) => id === defaultOrderBy)\n\n      if (defaultOrderCol.order) {\n        this.setState({\n          orderProp: true,\n        })\n      }\n    }\n  }\n\n  onSort = (newOrderBy, orderProp) => {\n    const { order, orderBy } = this.state\n    const { defaultOrder } = this.props\n    let newOrder = 'desc'\n\n    // if table was previously sorted by the user\n    if (order && orderBy === newOrderBy && order === 'desc') {\n      newOrder = 'asc'\n    } else if (!order && defaultOrder === 'desc') {\n      // if it was not sorted and defaultOrder is used\n      newOrder = 'asc'\n    }\n\n    this.setState(() => ({\n      order: newOrder,\n      orderBy: newOrderBy,\n      orderProp,\n      fixed: false,\n    }))\n  }\n\n  getEmptyStyle = () => ({\n    height: `calc(100vh - ${FIXED_EMPTY_HEIGHT}px)`,\n    borderTopRightRadius: sm,\n    borderTopLeftRadius: sm,\n    backgroundColor: 'white',\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  })\n\n  handleChangePage = (e, page) => {\n    this.setState({ page })\n  }\n\n  handleChangeRowsPerPage = (e) => {\n    const rowsPerPage = Number(e.target.value)\n    this.setState({ rowsPerPage })\n  }\n\n  render() {\n    const {\n      children,\n      classes,\n      columns,\n      data,\n      defaultFixed,\n      defaultOrder,\n      defaultOrderBy,\n      defaultRowsPerPage,\n      disableLoadingOnEmptyTable,\n      disablePagination,\n      label,\n      noBorder,\n      size,\n    }: any = this.props\n    const { fixed, order, orderBy, orderProp, page, rowsPerPage } = this.state\n    const orderByParam = orderBy || defaultOrderBy\n    const orderParam = order || defaultOrder\n    const displayRows = rowsPerPage || defaultRowsPerPage\n    const fixedParam = typeof fixed !== 'undefined' ? fixed : !!defaultFixed\n    const paginationClasses = {\n      selectRoot: classes.selectRoot,\n      root: !noBorder && classes.paginationRoot,\n      input: classes.white,\n    }\n    const columnSort = columns.find((column) => column.id === orderByParam)\n    let sortedData = stableSort(\n      data,\n      getSorting(orderParam, orderByParam, orderProp, columnSort?.formatTypeSort),\n      fixedParam,\n    )\n\n    if (!disablePagination) {\n      sortedData = sortedData.slice(page * displayRows, page * displayRows + displayRows)\n    }\n\n    const isEmpty = size === 0 && !disableLoadingOnEmptyTable\n\n    return (\n      <>\n        {!isEmpty && (\n          <Table aria-labelledby={label} className={noBorder ? '' : classes.root}>\n            <TableHead columns={columns} onSort={this.onSort} order={order} orderBy={orderByParam} />\n            <TableBody>{children(sortedData)}</TableBody>\n          </Table>\n        )}\n        {isEmpty && (\n          <Row className={classes.loader} style={this.getEmptyStyle()}>\n            <Loader size=\"sm\" />\n          </Row>\n        )}\n        {!disablePagination && (\n          <TablePagination\n            backIconButtonProps={backProps}\n            classes={paginationClasses}\n            component=\"div\"\n            count={size}\n            nextIconButtonProps={nextProps}\n            onPageChange={this.handleChangePage}\n            onRowsPerPageChange={this.handleChangeRowsPerPage}\n            page={page}\n            rowsPerPage={displayRows}\n            rowsPerPageOptions={[5, 10, 25, 50, 100]}\n          />\n        )}\n      </>\n    )\n  }\n}\n\nexport default withStyles(styles as any)(GnoTable)\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { Field } from 'react-final-form'\nimport { OnChange } from 'react-final-form-listeners'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nimport TextField from 'src/components/forms/TextField'\nimport { Validator, composeValidators, mustBeEthereumAddress, required } from 'src/components/forms/validator'\nimport { trimSpaces } from 'src/utils/strings'\nimport { getAddressFromDomain } from 'src/logic/wallets/getWeb3'\nimport { isValidEnsName, isValidCryptoDomainName } from 'src/logic/wallets/ethAddresses'\nimport { checksumAddress } from 'src/utils/checksumAddress'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { parsePrefixedAddress } from 'src/utils/prefixedAddress'\n\nexport interface AddressInputProps {\n  fieldMutator: (address: string) => void\n  name?: string\n  text?: string\n  placeholder?: string\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined | false\n  testId: string\n  validators?: Validator[]\n  defaultValue?: string\n  disabled?: boolean\n  spellCheck?: boolean\n  className?: string\n}\n\nconst AddressInput = ({\n  className = '',\n  name = 'recipientAddress',\n  text = 'Recipient*',\n  placeholder = 'Recipient*',\n  fieldMutator,\n  testId,\n  inputAdornment,\n  validators = [],\n  defaultValue,\n  disabled,\n}: AddressInputProps): React.ReactElement => {\n  const [currentInput, setCurrentInput] = useState<string>('')\n  const [resolutions, setResolutions] = useState<Record<string, string | undefined>>({})\n  const resolvedAddress = resolutions[currentInput]\n  const isResolving = resolvedAddress === ''\n\n  // External validators must receive an unprefixed address\n  const sanitizedValidators = useCallback(\n    (val: string) => {\n      const parsed = parsePrefixedAddress(val)\n      return composeValidators(...validators)(parsed.address)\n    },\n    [validators],\n  )\n\n  // Internal validators + externally passed validators\n  const allValidators = useMemo(\n    () => composeValidators(required, mustBeEthereumAddress, sanitizedValidators),\n    [sanitizedValidators],\n  )\n\n  const onValueChange = useCallback(\n    (rawVal: string) => {\n      const address = trimSpaces(rawVal)\n\n      setCurrentInput(rawVal)\n\n      // A crypto domain name\n      if (isValidEnsName(address) || isValidCryptoDomainName(address)) {\n        setResolutions((prev) => ({ ...prev, [rawVal]: '' }))\n        getAddressFromDomain(address)\n          .then((resolverAddr) => {\n            const formattedAddress = checksumAddress(resolverAddr)\n            setResolutions((prev) => ({ ...prev, [rawVal]: formattedAddress }))\n          })\n          .catch((err) => {\n            setResolutions((prev) => ({ ...prev, [rawVal]: undefined }))\n            logError(Errors._101, err.message)\n          })\n      } else {\n        // A regular address hash\n        if (!mustBeEthereumAddress(address)) {\n          const parsed = parsePrefixedAddress(address)\n          const checkedAddress = checksumAddress(parsed.address) || parsed.address\n\n          // Field mutator (parent component) always gets an unprefixed address\n          fieldMutator(checkedAddress)\n        }\n      }\n    },\n    [setCurrentInput, setResolutions, fieldMutator],\n  )\n\n  useEffect(() => {\n    if (resolvedAddress) {\n      onValueChange(resolvedAddress)\n    }\n  }, [resolvedAddress, onValueChange])\n\n  const adornment = isResolving\n    ? {\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <CircularProgress size=\"16px\" />\n          </InputAdornment>\n        ),\n      }\n    : inputAdornment\n\n  return (\n    <>\n      <Field\n        className={className}\n        component={TextField as any}\n        defaultValue={defaultValue}\n        disabled={disabled}\n        inputAdornment={adornment}\n        name={name}\n        placeholder={placeholder}\n        label={text}\n        spellCheck={false}\n        validate={allValidators}\n        inputProps={{\n          'data-testid': testId,\n        }}\n      />\n\n      <OnChange name={name}>{onValueChange}</OnChange>\n    </>\n  )\n}\n\nexport default AddressInput\n","import { background, lg, md, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  formContainer: {\n    minHeight: '250px',\n  },\n  title: {\n    padding: lg,\n    paddingBottom: 0,\n  },\n  annotation: {\n    paddingLeft: lg,\n  },\n  hide: {\n    '&:hover': {\n      backgroundColor: `${background}`,\n    },\n    '&:hover $actions': {\n      visibility: 'initial',\n    },\n  },\n  actions: {\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n    visibility: 'hidden',\n    minWidth: '100px',\n    gap: md,\n  },\n  noBorderBottom: {\n    '& > td': {\n      borderBottom: 'none',\n    },\n  },\n  controlsRow: {\n    backgroundColor: 'white',\n    padding: lg,\n    borderRadius: sm,\n  },\n  editEntryButton: {\n    cursor: 'pointer',\n  },\n  editEntryButtonNonOwner: {\n    cursor: 'pointer',\n  },\n  removeEntryButton: {\n    cursor: 'pointer',\n  },\n  removeEntryButtonDisabled: {\n    cursor: 'default',\n  },\n  removeEntryButtonNonOwner: {\n    cursor: 'pointer',\n  },\n  leftIcon: {\n    marginRight: sm,\n  },\n  iconSmall: {\n    fontSize: 16,\n  },\n})\n","import { createStyles, makeStyles } from '@material-ui/core/styles'\n\nimport { lg, md } from 'src/theme/variables'\n\nexport const useStyles = makeStyles(\n  createStyles({\n    heading: {\n      padding: lg,\n      justifyContent: 'space-between',\n      boxSizing: 'border-box',\n      height: '74px',\n    },\n    manage: {\n      fontSize: lg,\n    },\n    container: {\n      padding: `${md} ${lg}`,\n    },\n    close: {\n      height: '35px',\n      width: '35px',\n    },\n  }),\n)\n","import { ReactElement } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { useStyles } from './style'\n\nimport { Modal } from 'src/components/Modal'\nimport { ScanQRWrapper } from 'src/components/ScanQRModal/ScanQRWrapper'\nimport AddressInput from 'src/components/forms/AddressInput'\nimport Field from 'src/components/forms/Field'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport TextField from 'src/components/forms/TextField'\nimport { composeValidators, required, uniqueAddress, validAddressBookName } from 'src/components/forms/validator'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Row from 'src/components/layout/Row'\nimport { currentNetworkAddressBookAddresses } from 'src/logic/addressBook/store/selectors'\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { Entry } from 'src/routes/safe/components/AddressBook'\n\nexport const CREATE_ENTRY_INPUT_NAME_ID = 'create-entry-input-name'\nexport const CREATE_ENTRY_INPUT_ADDRESS_ID = 'create-entry-input-address'\nexport const SAVE_NEW_ENTRY_BTN_ID = 'save-new-entry-btn-id'\n\nconst formMutators = {\n  setOwnerAddress: (args, state, utils) => {\n    utils.changeValue(state, 'address', () => args[0])\n  },\n}\n\ntype CreateEditEntryModalProps = {\n  editEntryModalHandler: (entry: AddressBookEntry) => void\n  entryToEdit: Entry\n  isOpen: boolean\n  newEntryModalHandler: (entry: AddressBookEntry) => void\n  onClose: () => void\n}\n\nexport const CreateEditEntryModal = ({\n  editEntryModalHandler,\n  entryToEdit,\n  isOpen,\n  newEntryModalHandler,\n  onClose,\n}: CreateEditEntryModalProps): ReactElement => {\n  const classes = useStyles()\n\n  const { isNew, ...initialValues } = entryToEdit.entry\n\n  const onFormSubmitted = (values: AddressBookEntry) => {\n    if (isNew) {\n      newEntryModalHandler(values)\n    } else {\n      editEntryModalHandler(values)\n    }\n  }\n\n  const storedAddressesInThisNetwork = useSelector(currentNetworkAddressBookAddresses)\n  const isUniqueAddress = uniqueAddress(storedAddressesInThisNetwork)\n\n  return (\n    <Modal\n      description={isNew ? 'Create new addressBook entry' : 'Edit addressBook entry'}\n      handleClose={onClose}\n      open={isOpen}\n      title={isNew ? 'Create new entry' : 'Edit entry'}\n    >\n      <Modal.Header onClose={onClose}>\n        <Modal.Header.Title>{isNew ? 'Create entry' : 'Edit entry'}</Modal.Header.Title>\n      </Modal.Header>\n      <Modal.Body withoutPadding>\n        <GnoForm formMutators={formMutators} onSubmit={onFormSubmitted} initialValues={initialValues}>\n          {(...args) => {\n            const formState = args[2]\n            const mutators = args[3]\n            const handleScan = (value, closeQrModal) => {\n              let scannedAddress = value\n\n              if (scannedAddress.startsWith('ethereum:')) {\n                scannedAddress = scannedAddress.replace('ethereum:', '')\n              }\n\n              mutators.setOwnerAddress(scannedAddress)\n              closeQrModal()\n            }\n            return (\n              <>\n                <Block className={classes.container}>\n                  <Row margin=\"md\">\n                    <Col xs={11}>\n                      <Field\n                        component={TextField}\n                        name=\"name\"\n                        placeholder=\"Name*\"\n                        testId={CREATE_ENTRY_INPUT_NAME_ID}\n                        label=\"Name*\"\n                        type=\"text\"\n                        validate={composeValidators(required, validAddressBookName)}\n                      />\n                    </Col>\n                  </Row>\n                  <Row margin=\"md\">\n                    <Col xs={11}>\n                      <AddressInput\n                        disabled={!isNew}\n                        fieldMutator={mutators.setOwnerAddress}\n                        name=\"address\"\n                        placeholder=\"Address*\"\n                        testId={CREATE_ENTRY_INPUT_ADDRESS_ID}\n                        text=\"Address*\"\n                        validators={[(value?: string) => (isNew ? isUniqueAddress(value) : undefined)]}\n                      />\n                    </Col>\n                    {isNew ? (\n                      <Col center=\"xs\" className={classes} middle=\"xs\" xs={1}>\n                        <ScanQRWrapper handleScan={handleScan} />\n                      </Col>\n                    ) : null}\n                  </Row>\n                </Block>\n                <Modal.Footer>\n                  <Modal.Footer.Buttons\n                    cancelButtonProps={{ onClick: onClose }}\n                    confirmButtonProps={{\n                      disabled: !formState.valid,\n                      testId: SAVE_NEW_ENTRY_BTN_ID,\n                      text: isNew ? 'Create' : 'Save',\n                    }}\n                  />\n                </Modal.Footer>\n              </>\n            )\n          }}\n        </GnoForm>\n      </Modal.Body>\n    </Modal>\n  )\n}\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Text, Link, Icon } from '@gnosis.pm/safe-react-components'\n\nconst StyledIcon = styled(Icon)`\n  svg {\n    position: relative;\n    top: 4px;\n    left: 4px;\n  }\n`\n\nconst HelpInfo = (): ReactElement => (\n  <Link\n    href=\"https://help.gnosis-safe.io/en/articles/5299068-address-book-export-and-import\"\n    target=\"_blank\"\n    rel=\"noreferrer\"\n    title=\"Export & import info\"\n  >\n    <Text size=\"xl\" as=\"span\" color=\"primary\">\n      Learn about the address book import and export\n    </Text>\n    <StyledIcon size=\"sm\" type=\"externalLink\" color=\"primary\" />\n  </Link>\n)\n\nexport default HelpInfo\n","export default __webpack_public_path__ + \"static/media/success.c34f5727.svg\";","export default __webpack_public_path__ + \"static/media/error.6e3e8294.svg\";","export default __webpack_public_path__ + \"static/media/wait.cd1cb151.svg\";","import { GTM_EVENT } from 'src/utils/googleTagManager'\nimport { addEventCategory } from 'src/utils/events/utils'\n\nconst ADDRESS_BOOK = {\n  EXPORT: {\n    event: GTM_EVENT.CLICK,\n    action: 'Export',\n  },\n  DOWNLOAD_BUTTON: {\n    event: GTM_EVENT.CLICK,\n    action: 'Download address book',\n  },\n  IMPORT: {\n    event: GTM_EVENT.CLICK,\n    action: 'Import',\n  },\n  IMPORT_BUTTON: {\n    event: GTM_EVENT.CLICK,\n    action: 'Import address book',\n  },\n  CREATE_ENTRY: {\n    event: GTM_EVENT.CLICK,\n    action: 'Create entry',\n  },\n  EDIT_ENTRY: {\n    event: GTM_EVENT.CLICK,\n    action: 'Edit entry',\n  },\n  DELETE_ENTRY: {\n    event: GTM_EVENT.CLICK,\n    action: 'Delete entry',\n  },\n  SEND: {\n    event: GTM_EVENT.CLICK,\n    action: 'Send to contact',\n  },\n}\n\nconst ADDRESS_BOOK_CATEGORY = 'address-book'\nexport const ADDRESS_BOOK_EVENTS = addEventCategory(ADDRESS_BOOK, ADDRESS_BOOK_CATEGORY)\n","import { ReactElement, useEffect, useState } from 'react'\nimport { format } from 'date-fns'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { CSVDownloader, jsonToCSV } from 'react-papaparse'\nimport { Button, Loader, Text } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\n\nimport { showNotification } from 'src/logic/notifications/store/notifications'\nimport { NOTIFICATIONS } from 'src/logic/notifications'\n\nimport { addressBookState } from 'src/logic/addressBook/store/selectors'\n\nimport { lg, md, background } from 'src/theme/variables'\n\nimport { Modal } from 'src/components/Modal'\nimport Img from 'src/components/layout/Img'\nimport Row from 'src/components/layout/Row'\nimport HelpInfo from 'src/routes/safe/components/AddressBook/HelpInfo'\n\nimport SuccessSvg from './assets/success.svg'\nimport ErrorSvg from './assets/error.svg'\nimport LoadingSvg from './assets/wait.svg'\nimport { ADDRESS_BOOK_EVENTS } from 'src/utils/events/addressBook'\nimport Track from 'src/components/Track'\n\ntype ExportEntriesModalProps = {\n  isOpen: boolean\n  onClose: () => void\n}\n\nconst ImageContainer = styled(Row)`\n  padding: ${md} ${lg};\n  justify-content: center;\n`\n\nconst InfoContainer = styled(Row)`\n  background-color: ${background};\n  flex-direction: column;\n  justify-content: center;\n  padding: ${lg};\n  text-align: center;\n`\n\nconst BodyImage = styled.div`\n  grid-row: 1;\n`\nconst StyledLoader = styled(Loader)`\n  margin-right: 5px;\n`\n\nexport const ExportEntriesModal = ({ isOpen, onClose }: ExportEntriesModalProps): ReactElement => {\n  const dispatch = useDispatch()\n  const addressBook = useSelector(addressBookState)\n  const [loading, setLoading] = useState<boolean>(true)\n  const [error, setError] = useState<string | undefined>('')\n  const [csvData, setCsvData] = useState<string>('')\n  const [doRetry, setDoRetry] = useState<boolean>(false)\n\n  const date = format(new Date(), 'yyyy-MM-dd')\n\n  const handleClose = () => {\n    //This timeout prevents modal to be closed abruptly\n    setLoading(true)\n    setTimeout(() => {\n      if (!loading && error) {\n        dispatch(showNotification(NOTIFICATIONS.ADDRESS_BOOK_EXPORT_ENTRIES_ERROR))\n      }\n      onClose()\n    }, 600)\n  }\n\n  useEffect(() => {\n    const handleCsvData = () => {\n      if (!isOpen && !doRetry) return\n      setLoading(true)\n      setError('')\n      try {\n        setCsvData(jsonToCSV(addressBook))\n      } catch (e) {\n        setLoading(false)\n        setError(e.message)\n        return\n      }\n      setLoading(false)\n      setDoRetry(false)\n    }\n\n    handleCsvData()\n  }, [addressBook, isOpen, doRetry, csvData])\n\n  return (\n    <Modal description=\"Export address book\" handleClose={onClose} open={isOpen} title=\"Export address book\">\n      <Modal.Header onClose={onClose}>\n        <Modal.Header.Title withoutMargin>Export address book</Modal.Header.Title>\n      </Modal.Header>\n\n      <Modal.Body withoutPadding>\n        <ImageContainer>\n          <BodyImage>\n            <Img alt=\"Export\" height={92} src={error ? ErrorSvg : loading ? LoadingSvg : SuccessSvg} />\n          </BodyImage>\n        </ImageContainer>\n        <InfoContainer>\n          <Text color=\"primary\" as=\"p\" size=\"xl\">\n            {!error ? (\n              <Text size=\"xl\" as=\"span\">\n                You&apos;re about to export a CSV file with{' '}\n                <Text size=\"xl\" strong as=\"span\">\n                  {addressBook.length} address book entries. <br />\n                  <HelpInfo />\n                </Text>\n                .\n              </Text>\n            ) : (\n              <Text size=\"xl\" as=\"span\">\n                An error occurred while generating the address book CSV.\n              </Text>\n            )}\n          </Text>\n        </InfoContainer>\n      </Modal.Body>\n\n      <Modal.Footer withoutBorder>\n        <Button size=\"md\" variant=\"outlined\" onClick={onClose}>\n          Cancel\n        </Button>\n\n        {error ? (\n          <Button color=\"primary\" size=\"md\" disabled={loading} onClick={() => setDoRetry(true)}>\n            Retry\n          </Button>\n        ) : (\n          <CSVDownloader data={csvData} bom filename={`gnosis-safe-address-book-${date}`} type=\"link\">\n            <Track {...ADDRESS_BOOK_EVENTS.DOWNLOAD_BUTTON} label={addressBook.length}>\n              <Button color=\"primary\" size=\"md\" disabled={loading} onClick={handleClose}>\n                {loading && <StyledLoader color=\"secondaryLight\" size=\"xs\" />}\n                Download\n              </Button>\n            </Track>\n          </CSVDownloader>\n        )}\n      </Modal.Footer>\n    </Modal>\n  )\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\n\nimport { Modal } from 'src/components/Modal'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport { Entry } from 'src/routes/safe/components/AddressBook'\n\nexport const DELETE_ENTRY_BTN_ID = 'delete-entry-btn-id'\n\ninterface DeleteEntryModalProps {\n  deleteEntryModalHandler: () => void\n  entryToDelete: Entry\n  isOpen: boolean\n  onClose: () => void\n}\n\nexport const DeleteEntryModal = ({\n  deleteEntryModalHandler,\n  entryToDelete,\n  isOpen,\n  onClose,\n}: DeleteEntryModalProps): ReactElement => {\n  const handleDeleteEntrySubmit = () => {\n    deleteEntryModalHandler()\n  }\n\n  return (\n    <Modal description=\"Delete entry\" handleClose={onClose} open={isOpen} title=\"Delete entry\">\n      <Modal.Header onClose={onClose}>\n        <Modal.Header.Title>Delete entry</Modal.Header.Title>\n      </Modal.Header>\n      <GnoForm onSubmit={handleDeleteEntrySubmit}>\n        {() => (\n          <>\n            <Modal.Body>\n              <Text size=\"xl\">\n                This action will delete{' '}\n                <Text size=\"xl\" strong as=\"span\">\n                  {entryToDelete.entry.name}\n                </Text>{' '}\n                from the address book.\n              </Text>\n            </Modal.Body>\n            <Modal.Footer>\n              <Modal.Footer.Buttons\n                cancelButtonProps={{ onClick: onClose }}\n                confirmButtonProps={{ color: 'error', testId: DELETE_ENTRY_BTN_ID, text: 'Delete' }}\n              />\n            </Modal.Footer>\n          </>\n        )}\n      </GnoForm>\n    </Modal>\n  )\n}\n","import { List } from 'immutable'\nimport { TableCellProps } from '@material-ui/core/TableCell/TableCell'\n\nexport const ADDRESS_BOOK_ROW_ID = 'address-book-row'\nexport const TX_TABLE_ADDRESS_BOOK_ID = 'idAddressBook'\nexport const AB_NAME_ID = 'name'\nexport const AB_ADDRESS_ID = 'address'\nexport const AB_ADDRESS_ACTIONS_ID = 'actions'\nexport const EDIT_ENTRY_BUTTON = 'edit-entry-btn'\nexport const REMOVE_ENTRY_BUTTON = 'remove-entry-btn'\nexport const SEND_ENTRY_BUTTON = 'send-entry-btn'\n\ntype AddressBookColumn = {\n  id: string\n  order: boolean\n  disablePadding?: boolean\n  label: string\n  width?: number\n  custom?: boolean\n  align?: TableCellProps['align']\n}\n\nexport const generateColumns = (): List<AddressBookColumn> => {\n  const nameColumn = {\n    id: AB_NAME_ID,\n    order: false,\n    disablePadding: false,\n    label: 'Name',\n    width: 150,\n    custom: false,\n    align: 'left',\n  }\n\n  const addressColumn = {\n    id: AB_ADDRESS_ID,\n    order: false,\n    disablePadding: false,\n    label: 'Address',\n    custom: false,\n    align: 'left',\n  }\n\n  const actionsColumn = {\n    id: AB_ADDRESS_ACTIONS_ID,\n    order: false,\n    disablePadding: false,\n    label: '',\n    custom: true,\n  }\n\n  return List([nameColumn, addressColumn, actionsColumn])\n}\n","import { isValidAddress } from 'src/utils/isValidAddress'\nimport { isValidChainId } from 'src/config'\n\nexport const WRONG_FILE_EXTENSION_ERROR = 'Only CSV files are allowed'\nexport const FILE_SIZE_TOO_BIG_ERROR = 'The size of the file is over 1 MB'\n\nconst FILE_BYTES_LIMIT = 1000000\nconst IMPORT_SUPPORTED_FORMATS = [\n  '',\n  'text/csv',\n  'text/plain',\n  'application/vnd.ms-excel',\n  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n]\nconst CSV_EXTENSION_REGEX = /[^.]+\\.(txt|csv|tsv|ods|xls|xlsx)$/\n\nexport type CsvDataType = { data: string[] }[]\n\nexport const validateFile = (file: File): string | undefined => {\n  if (!IMPORT_SUPPORTED_FORMATS.includes(file.type) || !CSV_EXTENSION_REGEX.test(file.name.toLowerCase())) {\n    return WRONG_FILE_EXTENSION_ERROR\n  }\n\n  if (file.size >= FILE_BYTES_LIMIT) {\n    return FILE_SIZE_TOO_BIG_ERROR\n  }\n\n  return\n}\n\nexport const validateCsvData = (data: CsvDataType): string | undefined => {\n  for (let index = 0; index < data.length; index++) {\n    const entry = data[index]\n    const [address, name, chainId] = entry.data\n    if (entry.data.length !== 3) {\n      return `Invalid amount of columns on row ${index + 1}`\n    }\n    if (typeof address !== 'string' || typeof name !== 'string' || typeof chainId !== 'string') {\n      return `Invalid amount of columns on row ${index + 1}`\n    }\n    if (!address.trim() || !name.trim() || !chainId.trim()) {\n      return `Invalid amount of columns on row ${index + 1}`\n    }\n    // Verify address properties\n    const lowerCaseAddress = address.toLowerCase()\n    if (!isValidAddress(lowerCaseAddress)) {\n      return `Invalid address on row ${index + 1}`\n    }\n    if (!isValidChainId(chainId.trim())) {\n      return `Invalid chain id on row ${index + 1}`\n    }\n  }\n  return\n}\n","import { ReactElement, useState } from 'react'\nimport styled from 'styled-components'\nimport { Text } from '@gnosis.pm/safe-react-components'\n\nimport { Modal } from 'src/components/Modal'\nimport { CSVReader } from 'react-papaparse'\nimport { ParseResult } from 'papaparse'\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { checksumAddress } from 'src/utils/checksumAddress'\nimport HelpInfo from 'src/routes/safe/components/AddressBook/HelpInfo'\nimport { validateCsvData, validateFile } from 'src/routes/safe/components/AddressBook/utils'\nimport { ChainId } from 'src/config/chain.d'\nimport { trackEvent } from 'src/utils/googleTagManager'\nimport { ADDRESS_BOOK_EVENTS } from 'src/utils/events/addressBook'\n\nconst ImportContainer = styled.div`\n  flex-direction: column;\n  justify-content: center;\n  margin: 24px;\n  align-items: center;\n  min-height: 100px;\n  display: flex;\n`\n\nconst InfoContainer = styled.div`\n  background-color: ${({ theme }) => theme.colors.background};\n  flex-direction: column;\n  justify-content: center;\n  padding: 24px;\n  text-align: center;\n  margin-top: 16px;\n`\n\ntype ImportEntriesModalProps = {\n  importEntryModalHandler: (addressList: AddressBookEntry[]) => void\n  isOpen: boolean\n  onClose: () => void\n}\n\nconst ImportEntriesModal = ({ importEntryModalHandler, isOpen, onClose }: ImportEntriesModalProps): ReactElement => {\n  const [csvLoaded, setCsvLoaded] = useState(false)\n  const [importError, setImportError] = useState('')\n  const [entryList, setEntryList] = useState<AddressBookEntry[]>([])\n\n  const handleImportEntrySubmit = () => {\n    trackEvent({ ...ADDRESS_BOOK_EVENTS.IMPORT_BUTTON, label: entryList.length })\n    setCsvLoaded(false)\n    importEntryModalHandler(entryList)\n  }\n\n  const handleOnDrop = (parseResults: ParseResult<string>[], file: File) => {\n    // Remove the header row\n    const slicedData = parseResults.slice(1)\n    const fileError = validateFile(file)\n    if (fileError) {\n      setImportError(fileError)\n      return\n    }\n    const trimmedData: ParseResult<string>[] = []\n\n    // Delete empty rows\n    slicedData.forEach((row) => {\n      if (!(row.data.length === 1 && !row.data[0])) {\n        trimmedData.push(row)\n      }\n    })\n\n    const dataError = validateCsvData(trimmedData)\n    if (dataError) {\n      setImportError(dataError)\n      return\n    }\n\n    const formattedList = trimmedData.map(({ data }) => {\n      return {\n        address: checksumAddress(data[0].trim()),\n        name: data[1].trim(),\n        chainId: data[2].trim() as ChainId,\n      }\n    })\n    setEntryList(formattedList)\n    setImportError('')\n    setCsvLoaded(true)\n  }\n\n  const handleOnError = (error: Error): void => {\n    setImportError(error.message)\n  }\n\n  const handleOnRemoveFile = () => {\n    setCsvLoaded(false)\n    setImportError('')\n  }\n\n  const handleClose = () => {\n    setCsvLoaded(false)\n    setEntryList([])\n    setImportError('')\n    onClose()\n  }\n\n  return (\n    <Modal description=\"Import address book\" handleClose={handleClose} open={isOpen} title=\"Import address book\">\n      <Modal.Header onClose={handleClose}>\n        <Modal.Header.Title>Import address book</Modal.Header.Title>\n      </Modal.Header>\n      <Modal.Body withoutPadding>\n        <ImportContainer>\n          <CSVReader\n            onDrop={handleOnDrop}\n            onError={handleOnError}\n            addRemoveButton\n            onRemoveFile={handleOnRemoveFile}\n            style={{\n              dropArea: {\n                borderColor: '#B2B5B2',\n                borderRadius: 8,\n              },\n              dropAreaActive: {\n                borderColor: '#008C73',\n              },\n              dropFile: {\n                width: 200,\n                height: 100,\n                background: '#fff',\n                boxShadow: 'rgb(40 54 61 / 18%) 1px 2px 10px 0px',\n                borderRadius: 8,\n              },\n              fileSizeInfo: {\n                color: '#001428',\n                lineHeight: 1,\n                position: 'absolute',\n                left: '10px',\n                top: '12px',\n              },\n              fileNameInfo: {\n                color: importError === '' ? '#008C73' : '#DB3A3D',\n                backgroundColor: '#fff',\n                fontSize: 14,\n                lineHeight: 1.4,\n                padding: '0 0.4em',\n                margin: '1.2em 0 0.5em 0',\n                maxHeight: '59px',\n                overflow: 'hidden',\n              },\n              progressBar: {\n                backgroundColor: '#008C73',\n              },\n              removeButton: {\n                color: '#DB3A3D',\n              },\n            }}\n          >\n            <Text size=\"xl\">\n              Drop your CSV file here <br />\n              or click to upload.\n            </Text>\n          </CSVReader>\n        </ImportContainer>\n        <InfoContainer>\n          {importError !== '' && (\n            <Text size=\"xl\" color=\"error\">\n              {importError}\n            </Text>\n          )}\n          {!csvLoaded && importError === '' && (\n            <Text color=\"text\" as=\"p\" size=\"xl\">\n              Only CSV files exported from the Safe are allowed. <br />\n              <HelpInfo />\n            </Text>\n          )}\n          {csvLoaded && importError === '' && (\n            <>\n              <Text size=\"xl\" as=\"span\">{`You're about to import`}</Text>\n              <Text size=\"xl\" strong as=\"span\">{` ${entryList.length} entries to your address book`}</Text>\n            </>\n          )}\n        </InfoContainer>\n      </Modal.Body>\n      <Modal.Footer withoutBorder>\n        <Modal.Footer.Buttons\n          cancelButtonProps={{ onClick: () => handleClose() }}\n          confirmButtonProps={{\n            color: 'primary',\n            disabled: !csvLoaded || importError !== '',\n            onClick: handleImportEntrySubmit,\n            text: 'Import',\n          }}\n        />\n      </Modal.Footer>\n    </Modal>\n  )\n}\n\nexport default ImportEntriesModal\n","import {\n  Breadcrumb,\n  BreadcrumbElement,\n  Button,\n  ButtonLink,\n  FixedIcon,\n  Icon,\n  Menu,\n  Text,\n} from '@gnosis.pm/safe-react-components'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableRow from '@material-ui/core/TableRow'\nimport { makeStyles } from '@material-ui/core/styles'\nimport cn from 'classnames'\nimport styled from 'styled-components'\nimport { ReactElement, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { styles } from './style'\nimport { getExplorerInfo } from 'src/config'\nimport ButtonHelper from 'src/components/ButtonHelper'\nimport Table from 'src/components/Table'\nimport { cellWidth } from 'src/components/Table/TableHead'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Row from 'src/components/layout/Row'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\nimport { AddressBookEntry, makeAddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { addressBookAddOrUpdate, addressBookImport, addressBookRemove } from 'src/logic/addressBook/store/actions'\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\nimport { isUserAnOwnerOfAnySafe, sameAddress } from 'src/logic/wallets/ethAddresses'\nimport { CreateEditEntryModal } from 'src/routes/safe/components/AddressBook/CreateEditEntryModal'\nimport { ExportEntriesModal } from 'src/routes/safe/components/AddressBook/ExportEntriesModal'\nimport { DeleteEntryModal } from 'src/routes/safe/components/AddressBook/DeleteEntryModal'\nimport {\n  AB_NAME_ID,\n  AB_ADDRESS_ID,\n  ADDRESS_BOOK_ROW_ID,\n  SEND_ENTRY_BUTTON,\n  generateColumns,\n} from 'src/routes/safe/components/AddressBook/columns'\nimport SendModal from 'src/routes/safe/components/Balances/SendModal'\nimport { safesAsList } from 'src/logic/safe/store/selectors'\nimport { checksumAddress } from 'src/utils/checksumAddress'\nimport { grantedSelector } from 'src/routes/safe/container/selector'\nimport ImportEntriesModal from './ImportEntriesModal'\nimport { isValidAddress } from 'src/utils/isValidAddress'\nimport { useHistory } from 'react-router'\nimport { currentChainId } from 'src/logic/config/store/selectors'\nimport { ADDRESS_BOOK_EVENTS } from 'src/utils/events/addressBook'\nimport Track from 'src/components/Track'\n\nconst StyledButton = styled(Button)`\n  &&.MuiButton-root {\n    margin: 4px 12px 4px 0px;\n    padding: 0 12px;\n    min-width: auto;\n  }\n\n  svg {\n    margin: 0 6px 0 0;\n  }\n`\n\nconst useStyles = makeStyles(styles)\n\ninterface AddressBookSelectedEntry extends AddressBookEntry {\n  isNew?: boolean\n}\n\nexport type Entry = {\n  entry: AddressBookSelectedEntry\n  index?: number\n  isOwnerAddress?: boolean\n}\n\nconst AddressBookTable = (): ReactElement => {\n  const classes = useStyles()\n  const columns = generateColumns()\n  const autoColumns = columns.filter(({ custom }) => !custom)\n  const dispatch = useDispatch()\n  const safesList = useSelector(safesAsList)\n  const addressBook = useSelector(currentNetworkAddressBook)\n  const networkId = useSelector(currentChainId)\n  const granted = useSelector(grantedSelector)\n  const chainId = useSelector(currentChainId)\n  const initialEntryState: Entry = { entry: { address: '', name: '', chainId, isNew: true } }\n  const [selectedEntry, setSelectedEntry] = useState<Entry>(initialEntryState)\n  const [editCreateEntryModalOpen, setEditCreateEntryModalOpen] = useState(false)\n  const [importEntryModalOpen, setImportEntryModalOpen] = useState(false)\n  const [deleteEntryModalOpen, setDeleteEntryModalOpen] = useState(false)\n  const [exportEntriesModalOpen, setExportEntriesModalOpen] = useState(false)\n  const [sendFundsModalOpen, setSendFundsModalOpen] = useState(false)\n\n  const history = useHistory()\n  const queryParams = Object.fromEntries(new URLSearchParams(history.location.search))\n  const entryAddressToEditOrCreateNew = queryParams?.entryAddress\n\n  useEffect(() => {\n    if (entryAddressToEditOrCreateNew) {\n      setEditCreateEntryModalOpen(true)\n    }\n  }, [entryAddressToEditOrCreateNew])\n\n  useEffect(() => {\n    if (isValidAddress(entryAddressToEditOrCreateNew)) {\n      const address = checksumAddress(entryAddressToEditOrCreateNew as string)\n      const oldEntryIndex = addressBook.findIndex((entry) => sameAddress(entry.address, address))\n\n      if (oldEntryIndex >= 0) {\n        // Edit old entry\n        setSelectedEntry({ entry: addressBook[oldEntryIndex], index: oldEntryIndex })\n      } else {\n        // Create new entry\n        setSelectedEntry({\n          entry: {\n            name: '',\n            address,\n            chainId: networkId,\n            isNew: true,\n          },\n        })\n      }\n    }\n  }, [addressBook, entryAddressToEditOrCreateNew, networkId])\n\n  const newEntryModalHandler = (entry: AddressBookEntry) => {\n    // close the modal\n    setEditCreateEntryModalOpen(false)\n    // update the store\n    dispatch(\n      addressBookAddOrUpdate(makeAddressBookEntry({ ...entry, address: checksumAddress(entry.address), chainId })),\n    )\n  }\n\n  const editEntryModalHandler = (entry: AddressBookEntry) => {\n    // reset the form\n    setSelectedEntry(initialEntryState)\n    // close the modal\n    setEditCreateEntryModalOpen(false)\n    // update the store\n    dispatch(\n      addressBookAddOrUpdate(makeAddressBookEntry({ ...entry, address: checksumAddress(entry.address), chainId })),\n    )\n  }\n\n  const deleteEntryModalHandler = () => {\n    // reset the form\n    setSelectedEntry(initialEntryState)\n    // close the modal\n    setDeleteEntryModalOpen(false)\n    // update the store\n    selectedEntry?.entry && dispatch(addressBookRemove(selectedEntry.entry))\n  }\n\n  const importEntryModalHandler = (addressList: AddressBookEntry[]) => {\n    dispatch(addressBookImport(addressList))\n    setImportEntryModalOpen(false)\n  }\n\n  return (\n    <>\n      <Menu>\n        <Col start=\"sm\" sm={6} xs={12}>\n          <Breadcrumb>\n            <BreadcrumbElement iconType=\"addressBook\" text=\"Address Book\" counter={addressBook?.length.toString()} />\n          </Breadcrumb>\n        </Col>\n        <Col end=\"sm\" sm={6} xs={12}>\n          <Track {...ADDRESS_BOOK_EVENTS.EXPORT}>\n            <ButtonLink\n              onClick={() => {\n                setSelectedEntry(initialEntryState)\n                setExportEntriesModalOpen(true)\n              }}\n              color=\"primary\"\n              iconType=\"exportImg\"\n              iconSize=\"sm\"\n              textSize=\"xl\"\n            >\n              Export\n            </ButtonLink>\n          </Track>\n          <Track {...ADDRESS_BOOK_EVENTS.IMPORT}>\n            <ButtonLink\n              onClick={() => {\n                setImportEntryModalOpen(true)\n              }}\n              color=\"primary\"\n              iconType=\"importImg\"\n              iconSize=\"sm\"\n              textSize=\"xl\"\n            >\n              Import\n            </ButtonLink>\n          </Track>\n          <Track {...ADDRESS_BOOK_EVENTS.CREATE_ENTRY}>\n            <ButtonLink\n              onClick={() => {\n                setSelectedEntry(initialEntryState)\n                setEditCreateEntryModalOpen(true)\n              }}\n              color=\"primary\"\n              iconType=\"add\"\n              iconSize=\"sm\"\n              textSize=\"xl\"\n            >\n              Create entry\n            </ButtonLink>\n          </Track>\n        </Col>\n      </Menu>\n      <Block className={classes.formContainer}>\n        <TableContainer>\n          <Table\n            columns={columns}\n            data={addressBook}\n            defaultFixed\n            defaultOrderBy={AB_NAME_ID}\n            defaultRowsPerPage={25}\n            disableLoadingOnEmptyTable\n            label=\"Address Book\"\n            size={addressBook?.length || 0}\n          >\n            {(sortedData) =>\n              sortedData.map((row, index) => {\n                const userOwner = isUserAnOwnerOfAnySafe(safesList, row.address)\n                const hideBorderBottom = index >= 3 && index === sortedData.size - 1 && classes.noBorderBottom\n                return (\n                  <TableRow\n                    className={cn(classes.hide, hideBorderBottom)}\n                    data-testid={ADDRESS_BOOK_ROW_ID}\n                    key={index}\n                    tabIndex={-1}\n                  >\n                    {autoColumns.map((column) => {\n                      return (\n                        <TableCell align={column.align} component=\"td\" key={column.id} style={cellWidth(column.width)}>\n                          {column.id === AB_ADDRESS_ID ? (\n                            <Block justify=\"left\">\n                              <PrefixedEthHashInfo\n                                hash={row[column.id]}\n                                showCopyBtn\n                                showAvatar\n                                explorerUrl={getExplorerInfo(row[column.id])}\n                              />\n                            </Block>\n                          ) : (\n                            row[column.id]\n                          )}\n                        </TableCell>\n                      )\n                    })}\n                    <TableCell component=\"td\">\n                      <Row align=\"end\" className={classes.actions}>\n                        <Track {...ADDRESS_BOOK_EVENTS.EDIT_ENTRY}>\n                          <ButtonHelper\n                            onClick={() => {\n                              setSelectedEntry({\n                                entry: row,\n                                isOwnerAddress: userOwner,\n                              })\n                              setEditCreateEntryModalOpen(true)\n                            }}\n                          >\n                            <Icon\n                              size=\"sm\"\n                              type=\"edit\"\n                              tooltip=\"Edit entry\"\n                              className={granted ? classes.editEntryButton : classes.editEntryButtonNonOwner}\n                            />\n                          </ButtonHelper>\n                        </Track>\n                        <Track {...ADDRESS_BOOK_EVENTS.DELETE_ENTRY}>\n                          <ButtonHelper\n                            onClick={() => {\n                              setSelectedEntry({ entry: row })\n                              setDeleteEntryModalOpen(true)\n                            }}\n                          >\n                            <Icon\n                              size=\"sm\"\n                              type=\"delete\"\n                              color=\"error\"\n                              tooltip=\"Delete entry\"\n                              className={granted ? classes.removeEntryButton : classes.removeEntryButtonNonOwner}\n                            />\n                          </ButtonHelper>\n                        </Track>\n                        {granted && (\n                          <Track {...ADDRESS_BOOK_EVENTS.SEND}>\n                            <StyledButton\n                              color=\"primary\"\n                              onClick={() => {\n                                setSelectedEntry({ entry: row })\n                                setSendFundsModalOpen(true)\n                              }}\n                              size=\"md\"\n                              variant=\"contained\"\n                              data-testid={SEND_ENTRY_BUTTON}\n                            >\n                              <FixedIcon type=\"arrowSentWhite\" />\n                              <Text size=\"xl\" color=\"white\">\n                                Send\n                              </Text>\n                            </StyledButton>\n                          </Track>\n                        )}\n                      </Row>\n                    </TableCell>\n                  </TableRow>\n                )\n              })\n            }\n          </Table>\n        </TableContainer>\n      </Block>\n      <CreateEditEntryModal\n        editEntryModalHandler={editEntryModalHandler}\n        entryToEdit={selectedEntry}\n        isOpen={editCreateEntryModalOpen}\n        newEntryModalHandler={newEntryModalHandler}\n        onClose={() => setEditCreateEntryModalOpen(false)}\n      />\n      <DeleteEntryModal\n        deleteEntryModalHandler={deleteEntryModalHandler}\n        entryToDelete={selectedEntry}\n        isOpen={deleteEntryModalOpen}\n        onClose={() => setDeleteEntryModalOpen(false)}\n      />\n      <ExportEntriesModal isOpen={exportEntriesModalOpen} onClose={() => setExportEntriesModalOpen(false)} />\n      <ImportEntriesModal\n        importEntryModalHandler={importEntryModalHandler}\n        isOpen={importEntryModalOpen}\n        onClose={() => setImportEntryModalOpen(false)}\n      />\n      <SendModal\n        activeScreenType=\"chooseTxType\"\n        isOpen={sendFundsModalOpen}\n        onClose={() => setSendFundsModalOpen(false)}\n        recipientAddress={selectedEntry?.entry?.address}\n        recipientName={selectedEntry?.entry?.name}\n      />\n    </>\n  )\n}\n\nexport default AddressBookTable\n"],"sourceRoot":""}