{"version":3,"sources":["components/Table/TableHead.tsx","components/Table/sorting.ts","components/Table/index.tsx","routes/safe/components/Balances/AssetTableCell/index.tsx","routes/safe/components/Balances/dataFetcher.ts","routes/safe/components/Balances/Coins/styles.ts","routes/safe/components/Balances/Coins/index.tsx"],"names":["cellWidth","width","maxWidth","GnoTableHead","changeSort","property","orderAttr","onSort","props","this","columns","order","orderBy","map","column","align","padding","disablePadding","sortDirection","id","static","style","label","active","direction","onClick","React","desc","a","b","orderProp","format","styles","root","backgroundColor","borderTopRightRadius","sm","borderTopLeftRadius","boxShadow","selectRoot","lineHeight","xxl","white","paginationRoot","marginBottom","borderBottomRightRadius","borderBottomLeftRadius","loader","backProps","nextProps","GnoTable","newOrderBy","state","defaultOrder","newOrder","setState","fixed","getEmptyStyle","height","display","justifyContent","alignItems","handleChangePage","e","page","handleChangeRowsPerPage","rowsPerPage","Number","target","value","undefined","defaultOrderBy","find","children","classes","data","defaultFixed","defaultRowsPerPage","disableLoadingOnEmptyTable","disablePagination","noBorder","size","orderByParam","orderParam","displayRows","fixedParam","paginationClasses","input","columnSort","sortedData","dataArray","cmp","fixedElems","filter","elem","List","stabilizedThis","el","index","sortedElems","sort","concat","stableSort","getSorting","formatTypeSort","slice","isEmpty","Table","className","TableHead","TableBody","Row","TablePagination","backIconButtonProps","component","count","nextIconButtonProps","onPageChange","onRowsPerPageChange","rowsPerPageOptions","defaultProps","withStyles","StyledParagraph","styled","Paragraph","AssetTableCell","asset","isNativeCurrency","address","getNativeCurrencyAddress","Block","justify","Img","alt","name","onError","setImageToPlaceholder","src","logoUri","noMargin","explorerUrl","getExplorerInfo","BALANCE_TABLE_ASSET_ID","BALANCE_TABLE_BALANCE_ID","BALANCE_TABLE_VALUE_ID","createStyles","iconSmall","fontSize","tooltipInfo","position","top","left","hide","background","visibility","actions","leftIcon","marginRight","currencyValueRow","textAlign","StyledButton","Button","useStyles","makeStyles","CurrencyTooltip","balanceWithSymbol","valueWithCurrency","balance","replace","Tooltip","placement","title","InfoIcon","Coins","showReceiveFunds","showSendFunds","assetColumn","custom","balanceColumn","generateColumns","autoColumns","c","selectedCurrency","useSelector","currentCurrencySelector","safeTokens","extendedSafeTokensSelector","granted","grantedSelector","differingTokens","useMemo","useEffect","trackEvent","ASSETS_EVENTS","DIFFERING_TOKENS","filteredData","currencySelected","token","tokenBalance","fiatBalance","symbol","formatCurrency","toString","getBalanceData","TableContainer","row","TableRow","BALANCE_ROW_TEST_ID","tabIndex","cellItem","showCurrencyValueRow","Skeleton","animation","TableCell","Track","SEND","color","variant","type","RECEIVE"],"mappings":"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","file":"static/js/64.9cb1fed0.chunk.js","sourcesContent":["import TableCell from '@material-ui/core/TableCell'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\nimport * as React from 'react'\n\ninterface CellWidth {\n  maxWidth: string\n}\n\nexport const cellWidth = (width?: string | number): CellWidth | undefined => {\n  if (!width) {\n    return undefined\n  }\n\n  return {\n    maxWidth: `${width}px`,\n  }\n}\n\nclass GnoTableHead extends React.PureComponent<any> {\n  changeSort =\n    (property: string, orderAttr: string): (() => void) =>\n    () => {\n      const { onSort } = this.props\n\n      onSort(property, orderAttr)\n    }\n\n  render(): React.ReactElement {\n    const { columns, order, orderBy } = this.props\n\n    return (\n      <TableHead>\n        <TableRow>\n          {columns.map((column) => (\n            <TableCell\n              align={column.align}\n              key={column.id}\n              padding={column.disablePadding ? 'none' : 'normal'}\n              sortDirection={orderBy === column.id ? order : false}\n            >\n              {column.static ? (\n                <div style={column.style}>{column.label}</div>\n              ) : (\n                <TableSortLabel\n                  active={orderBy === column.id}\n                  direction={order}\n                  onClick={this.changeSort(column.id, column.order)}\n                  style={column.style}\n                >\n                  {column.label}\n                </TableSortLabel>\n              )}\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n    )\n  }\n}\n\nexport default GnoTableHead\n","import { List } from 'immutable'\n\nexport const FIXED = 'fixed'\n\nexport const buildOrderFieldFrom = (attr: string): string => `${attr}Order`\n\nconst desc = (\n  a: string,\n  b: string,\n  orderBy: string,\n  orderProp: boolean,\n  format: (value: string | number) => string | number,\n): number => {\n  const order = orderProp ? buildOrderFieldFrom(orderBy) : orderBy\n\n  if (format(b[order]) < format(a[order])) {\n    return -1\n  }\n  if (format(b[order]) > format(a[order])) {\n    return 1\n  }\n\n  return 0\n}\n\n// eslint-disable-next-line\nexport const stableSort = (dataArray, cmp, fixed) => {\n  const fixedElems = fixed ? dataArray.filter((elem) => elem.fixed) : List([])\n  const data = fixed ? dataArray.filter((elem) => !elem[FIXED]) : dataArray\n  let stabilizedThis = data.map((el, index) => [el, index])\n\n  stabilizedThis = stabilizedThis.sort((a, b) => {\n    const order = cmp(a[0], b[0])\n\n    if (order !== 0) {\n      return order\n    }\n\n    return a[1] - b[1]\n  })\n\n  const sortedElems = stabilizedThis.map((el) => el[0])\n\n  return fixedElems.concat(sortedElems)\n}\n\nexport const getSorting = (\n  order: 'desc' | 'asc',\n  orderBy: string,\n  orderProp: boolean,\n  format: (value: string | number) => string | number = (value) => value,\n): ((a: string, b: string) => number) =>\n  order === 'desc'\n    ? (a, b) => desc(a, b, orderBy, orderProp, format)\n    : (a, b) => -desc(a, b, orderBy, orderProp, format)\n","import { Loader } from '@gnosis.pm/safe-react-components'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TablePagination from '@material-ui/core/TablePagination'\nimport { withStyles } from '@material-ui/core/styles'\nimport * as React from 'react'\n\nimport TableHead from 'src/components/Table/TableHead'\nimport { getSorting, stableSort } from 'src/components/Table/sorting'\nimport Row from 'src/components/layout/Row'\nimport { sm, xxl } from 'src/theme/variables'\n\nconst styles = {\n  root: {\n    backgroundColor: 'white',\n    borderTopRightRadius: sm,\n    borderTopLeftRadius: sm,\n    boxShadow: '1px 2px 10px 0 rgba(212, 212, 211, 0.59)',\n  },\n  selectRoot: {\n    lineHeight: xxl,\n    backgroundColor: 'white',\n  },\n  white: {\n    backgroundColor: 'white',\n  },\n  paginationRoot: {\n    backgroundColor: 'white',\n    boxShadow: '1px 2px 10px 0 rgba(212, 212, 211, 0.59)',\n    marginBottom: '90px',\n    borderBottomRightRadius: sm,\n    borderBottomLeftRadius: sm,\n  },\n  loader: {\n    boxShadow: '1px 2px 10px 0 rgba(212, 212, 211, 0.59)',\n  },\n}\n\nconst FIXED_EMPTY_HEIGHT = 255\n\nconst backProps = {\n  'aria-label': 'Previous Page',\n}\n\nconst nextProps = {\n  'aria-label': 'Next Page',\n}\n\nclass GnoTable extends React.Component<any, any> {\n  static defaultProps = {\n    defaultOrder: 'asc',\n    disablePagination: false,\n    defaultRowsPerPage: 5,\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      page: 0,\n      order: undefined,\n      orderBy: undefined,\n      fixed: undefined,\n      orderProp: false,\n      rowsPerPage: undefined,\n    }\n  }\n\n  componentDidMount() {\n    const { columns, defaultOrderBy } = this.props\n\n    if (defaultOrderBy && columns) {\n      const defaultOrderCol = columns.find(({ id }) => id === defaultOrderBy)\n\n      if (defaultOrderCol.order) {\n        this.setState({\n          orderProp: true,\n        })\n      }\n    }\n  }\n\n  onSort = (newOrderBy, orderProp) => {\n    const { order, orderBy } = this.state\n    const { defaultOrder } = this.props\n    let newOrder = 'desc'\n\n    // if table was previously sorted by the user\n    if (order && orderBy === newOrderBy && order === 'desc') {\n      newOrder = 'asc'\n    } else if (!order && defaultOrder === 'desc') {\n      // if it was not sorted and defaultOrder is used\n      newOrder = 'asc'\n    }\n\n    this.setState(() => ({\n      order: newOrder,\n      orderBy: newOrderBy,\n      orderProp,\n      fixed: false,\n    }))\n  }\n\n  getEmptyStyle = () => ({\n    height: `calc(100vh - ${FIXED_EMPTY_HEIGHT}px)`,\n    borderTopRightRadius: sm,\n    borderTopLeftRadius: sm,\n    backgroundColor: 'white',\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  })\n\n  handleChangePage = (e, page) => {\n    this.setState({ page })\n  }\n\n  handleChangeRowsPerPage = (e) => {\n    const rowsPerPage = Number(e.target.value)\n    this.setState({ rowsPerPage })\n  }\n\n  render() {\n    const {\n      children,\n      classes,\n      columns,\n      data,\n      defaultFixed,\n      defaultOrder,\n      defaultOrderBy,\n      defaultRowsPerPage,\n      disableLoadingOnEmptyTable,\n      disablePagination,\n      label,\n      noBorder,\n      size,\n    }: any = this.props\n    const { fixed, order, orderBy, orderProp, page, rowsPerPage } = this.state\n    const orderByParam = orderBy || defaultOrderBy\n    const orderParam = order || defaultOrder\n    const displayRows = rowsPerPage || defaultRowsPerPage\n    const fixedParam = typeof fixed !== 'undefined' ? fixed : !!defaultFixed\n    const paginationClasses = {\n      selectRoot: classes.selectRoot,\n      root: !noBorder && classes.paginationRoot,\n      input: classes.white,\n    }\n    const columnSort = columns.find((column) => column.id === orderByParam)\n    let sortedData = stableSort(\n      data,\n      getSorting(orderParam, orderByParam, orderProp, columnSort?.formatTypeSort),\n      fixedParam,\n    )\n\n    if (!disablePagination) {\n      sortedData = sortedData.slice(page * displayRows, page * displayRows + displayRows)\n    }\n\n    const isEmpty = size === 0 && !disableLoadingOnEmptyTable\n\n    return (\n      <>\n        {!isEmpty && (\n          <Table aria-labelledby={label} className={noBorder ? '' : classes.root}>\n            <TableHead columns={columns} onSort={this.onSort} order={order} orderBy={orderByParam} />\n            <TableBody>{children(sortedData)}</TableBody>\n          </Table>\n        )}\n        {isEmpty && (\n          <Row className={classes.loader} style={this.getEmptyStyle()}>\n            <Loader size=\"sm\" />\n          </Row>\n        )}\n        {!disablePagination && (\n          <TablePagination\n            backIconButtonProps={backProps}\n            classes={paginationClasses}\n            component=\"div\"\n            count={size}\n            nextIconButtonProps={nextProps}\n            onPageChange={this.handleChangePage}\n            onRowsPerPageChange={this.handleChangeRowsPerPage}\n            page={page}\n            rowsPerPage={displayRows}\n            rowsPerPageOptions={[5, 10, 25, 50, 100]}\n          />\n        )}\n      </>\n    )\n  }\n}\n\nexport default withStyles(styles as any)(GnoTable)\n","import { ReactElement } from 'react'\nimport { ExplorerButton } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\n\nimport Block from 'src/components/layout/Block'\nimport Img from 'src/components/layout/Img'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport { getExplorerInfo } from 'src/config'\nimport { BalanceData } from '../dataFetcher'\nimport { getNativeCurrencyAddress } from 'src/config/utils'\n\nconst StyledParagraph = styled(Paragraph)`\n  margin-left: 10px;\n  margin-right: 10px;\n`\n\nconst AssetTableCell = ({ asset }: { asset: BalanceData['asset'] }): ReactElement => {\n  const isNativeCurrency = asset.address === getNativeCurrencyAddress()\n  return (\n    <Block justify=\"left\">\n      <Img alt={asset.name} height={26} onError={setImageToPlaceholder} src={asset.logoUri} />\n      <StyledParagraph noMargin size=\"lg\">\n        {asset.name}\n      </StyledParagraph>\n      {!isNativeCurrency && <ExplorerButton explorerUrl={getExplorerInfo(asset.address)} />}\n    </Block>\n  )\n}\n\nexport default AssetTableCell\n","import { List } from 'immutable'\nimport { formatCurrency } from 'src/logic/tokens/utils/formatAmount'\nimport { TableColumn } from 'src/components/Table/types.d'\nimport { Token } from 'src/logic/tokens/store/model/token'\nexport const BALANCE_TABLE_ASSET_ID = 'asset'\nexport const BALANCE_TABLE_BALANCE_ID = 'balance'\nexport const BALANCE_TABLE_VALUE_ID = 'value'\nexport interface BalanceData {\n  asset: { name: string; logoUri: string; address: string; symbol: string }\n  assetOrder: string\n  balance: string\n  balanceOrder: number\n  value: string\n  valueOrder: number\n}\n\nexport const getBalanceData = (safeTokens: List<Token>, currencySelected: string): List<BalanceData> => {\n  return safeTokens.map((token) => {\n    const { tokenBalance, fiatBalance } = token.balance\n\n    return {\n      [BALANCE_TABLE_ASSET_ID]: {\n        name: token.name,\n        logoUri: token.logoUri || '',\n        address: token.address,\n        symbol: token.symbol,\n      },\n      assetOrder: token.name,\n      [BALANCE_TABLE_BALANCE_ID]: formatCurrency(tokenBalance?.toString() || '0', token.symbol),\n      balanceOrder: Number(tokenBalance),\n      [BALANCE_TABLE_VALUE_ID]: formatCurrency(fiatBalance?.toString() || '0', currencySelected),\n      valueOrder: Number(tokenBalance),\n    }\n  })\n}\n\nexport const generateColumns = (): List<TableColumn> => {\n  const assetColumn: TableColumn = {\n    id: BALANCE_TABLE_ASSET_ID,\n    order: true,\n    disablePadding: false,\n    label: 'Asset',\n    custom: false,\n    static: true,\n    width: 250,\n  }\n\n  const balanceColumn: TableColumn = {\n    id: BALANCE_TABLE_BALANCE_ID,\n    align: 'right',\n    order: true,\n    disablePadding: false,\n    label: 'Balance',\n    custom: false,\n    static: true,\n  }\n\n  const actions: TableColumn = {\n    id: 'actions',\n    order: false,\n    disablePadding: false,\n    label: '',\n    custom: true,\n    static: true,\n  }\n\n  const value: TableColumn = {\n    id: BALANCE_TABLE_VALUE_ID,\n    align: 'right',\n    order: true,\n    label: 'Value',\n    custom: false,\n    static: true,\n    disablePadding: false,\n  }\n\n  return List([assetColumn, balanceColumn, value, actions])\n}\n","import { background, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  iconSmall: {\n    fontSize: 16,\n  },\n  tooltipInfo: {\n    position: 'relative',\n    top: '3px',\n    left: '3px',\n  },\n  hide: {\n    '&:hover': {\n      backgroundColor: `${background}`,\n    },\n    '&:hover $actions': {\n      visibility: 'initial',\n    },\n    '&:focus $actions': {\n      visibility: 'initial',\n    },\n  },\n  actions: {\n    justifyContent: 'flex-end',\n    visibility: 'hidden',\n  },\n  leftIcon: {\n    marginRight: sm,\n  },\n  currencyValueRow: {\n    textAlign: 'right',\n  },\n})\n","import { useEffect, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { useSelector } from 'react-redux'\nimport { List } from 'immutable'\nimport TableCell from '@material-ui/core/TableCell'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableRow from '@material-ui/core/TableRow'\nimport { Skeleton } from '@material-ui/lab'\n\nimport InfoIcon from 'src/assets/icons/info_red.svg'\nimport { FixedIcon, Text, Button } from '@gnosis.pm/safe-react-components'\n\nimport Img from 'src/components/layout/Img'\nimport Table from 'src/components/Table'\nimport { cellWidth } from 'src/components/Table/TableHead'\nimport Row from 'src/components/layout/Row'\nimport { BALANCE_ROW_TEST_ID } from 'src/routes/safe/components/Balances'\nimport AssetTableCell from 'src/routes/safe/components/Balances/AssetTableCell'\nimport {\n  BALANCE_TABLE_ASSET_ID,\n  BALANCE_TABLE_BALANCE_ID,\n  BALANCE_TABLE_VALUE_ID,\n  generateColumns,\n  getBalanceData,\n  BalanceData,\n} from 'src/routes/safe/components/Balances/dataFetcher'\nimport { extendedSafeTokensSelector, grantedSelector } from 'src/routes/safe/container/selector'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { styles } from './styles'\nimport { currentCurrencySelector } from 'src/logic/currencyValues/store/selectors'\nimport { trackEvent } from 'src/utils/googleTagManager'\nimport { ASSETS_EVENTS } from 'src/utils/events/assets'\nimport Track from 'src/components/Track'\n\nconst StyledButton = styled(Button)`\n  &&.MuiButton-root {\n    margin: 4px 12px 4px 0px;\n    padding: 0 12px;\n    min-width: auto;\n  }\n  svg {\n    margin: 0 6px 0 0;\n  }\n`\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  showReceiveFunds: () => void\n  showSendFunds: (tokenAddress: string) => void\n}\n\ntype CurrencyTooltipProps = {\n  valueWithCurrency: string\n  balanceWithSymbol: string\n}\n\nconst CurrencyTooltip = (props: CurrencyTooltipProps): React.ReactElement | null => {\n  const { balanceWithSymbol, valueWithCurrency } = props\n  const classes = useStyles()\n  const balance = balanceWithSymbol.replace(/[^\\d.-]/g, '')\n  const value = valueWithCurrency.replace(/[^\\d.-]/g, '')\n  if (!Number(value) && Number(balance)) {\n    return (\n      <Tooltip placement=\"top\" title=\"Value may be zero due to missing token price information\">\n        <span>\n          <Img className={classes.tooltipInfo} alt=\"Info Tooltip\" height={16} src={InfoIcon} />\n        </span>\n      </Tooltip>\n    )\n  }\n  return null\n}\n\nconst Coins = (props: Props): React.ReactElement => {\n  const { showReceiveFunds, showSendFunds } = props\n  const classes = useStyles()\n  const columns = generateColumns()\n  const autoColumns = columns.filter((c) => !c.custom)\n  const selectedCurrency = useSelector(currentCurrencySelector)\n  const safeTokens = useSelector(extendedSafeTokensSelector)\n  const granted = useSelector(grantedSelector)\n\n  const differingTokens = useMemo(() => safeTokens.size, [safeTokens])\n  useEffect(() => {\n    // Safe does not have any tokens until fetching is complete\n    if (differingTokens > 0) {\n      trackEvent({ ...ASSETS_EVENTS.DIFFERING_TOKENS, label: differingTokens })\n    }\n  }, [differingTokens])\n\n  const filteredData: List<BalanceData> = useMemo(\n    () => getBalanceData(safeTokens, selectedCurrency),\n    [safeTokens, selectedCurrency],\n  )\n\n  return (\n    <TableContainer>\n      <Table columns={columns} data={filteredData} defaultRowsPerPage={100} label=\"Balances\" size={filteredData.size}>\n        {(sortedData) =>\n          sortedData.map((row, index) => (\n            <TableRow className={classes.hide} data-testid={BALANCE_ROW_TEST_ID} key={index} tabIndex={-1}>\n              {autoColumns.map((column) => {\n                const { align, id, width } = column\n                let cellItem\n                switch (id) {\n                  case BALANCE_TABLE_ASSET_ID: {\n                    cellItem = <AssetTableCell asset={row[id]} />\n                    break\n                  }\n                  case BALANCE_TABLE_BALANCE_ID: {\n                    cellItem = <div data-testid={`balance-${row[BALANCE_TABLE_ASSET_ID].symbol}`}>{row[id]}</div>\n                    break\n                  }\n                  case BALANCE_TABLE_VALUE_ID: {\n                    // If there are no values for that row but we have balances, we display as '0.00 {CurrencySelected}'\n                    // In case we don't have balances, we display a skeleton\n                    const showCurrencyValueRow = row[id] || row[BALANCE_TABLE_BALANCE_ID]\n                    const valueWithCurrency = row[id] ? row[id] : `0.00 ${selectedCurrency}`\n                    cellItem =\n                      showCurrencyValueRow && selectedCurrency ? (\n                        <div className={classes.currencyValueRow}>\n                          {valueWithCurrency}\n                          <CurrencyTooltip\n                            valueWithCurrency={valueWithCurrency}\n                            balanceWithSymbol={row[BALANCE_TABLE_BALANCE_ID]}\n                          />\n                        </div>\n                      ) : (\n                        <Skeleton animation=\"wave\" />\n                      )\n                    break\n                  }\n                  default: {\n                    cellItem = null\n                    break\n                  }\n                }\n                return (\n                  <TableCell align={align} component=\"td\" key={id} style={cellWidth(width)}>\n                    {cellItem}\n                  </TableCell>\n                )\n              })}\n              <TableCell component=\"td\">\n                <Row align=\"end\" className={classes.actions}>\n                  {granted && (\n                    <Track {...ASSETS_EVENTS.SEND}>\n                      <StyledButton\n                        color=\"primary\"\n                        onClick={() => showSendFunds(row.asset.address)}\n                        size=\"md\"\n                        variant=\"contained\"\n                        data-testid=\"balance-send-btn\"\n                      >\n                        <FixedIcon type=\"arrowSentWhite\" />\n                        <Text size=\"xl\" color=\"white\">\n                          Send\n                        </Text>\n                      </StyledButton>\n                    </Track>\n                  )}\n                  <Track {...ASSETS_EVENTS.RECEIVE}>\n                    <StyledButton color=\"primary\" onClick={showReceiveFunds} size=\"md\" variant=\"contained\">\n                      <FixedIcon type=\"arrowReceivedWhite\" />\n                      <Text size=\"xl\" color=\"white\">\n                        Receive\n                      </Text>\n                    </StyledButton>\n                  </Track>\n                </Row>\n              </TableCell>\n            </TableRow>\n          ))\n        }\n      </Table>\n    </TableContainer>\n  )\n}\n\nexport default Coins\n"],"sourceRoot":""}