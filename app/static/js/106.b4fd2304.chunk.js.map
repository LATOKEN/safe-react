{"version":3,"sources":["routes/safe/components/Transactions/TxList/hooks/usePagedHistoryTransactions.ts","routes/safe/components/Transactions/TxList/hooks/useHistoryTransactions.ts","routes/safe/components/Transactions/TxList/TxHistoryCollapsed.tsx","routes/safe/components/Transactions/TxList/TxInfoCreation.tsx","routes/safe/components/Transactions/TxList/TxHistoryRow.tsx","routes/safe/components/Transactions/TxList/HistoryTxList.tsx","routes/safe/components/Transactions/TxList/HistoryTransactions.tsx","routes/safe/components/Transactions/TxList/TxSingularDetails.tsx","routes/safe/components/Transactions/TxList/index.tsx"],"names":["usePagedHistoryTransactions","historyTxs","useSelector","historyTransactions","useState","count","setCount","useEffect","history","Object","entries","reduce","acc","length","transactions","useHistoryTransactions","chainId","currentChainId","dispatch","useDispatch","safeAddress","useSafeAddress","isLoading","setIsLoading","next","useCallback","a","loadPagedHistoryTransactions","results","content","Errors","_608","log","values","addHistoryTransactions","TxHistoryCollapsed","transaction","nonce","executionInfo","type","useTransactionType","info","useAssetInfo","txInfo","status","useTransactionStatus","TxCollapsed","time","timestamp","StyledTxCreationAddress","styled","div","md","TxInfoCreation","generateCreatorTxData","title","creationEntity","address","size","strong","PrefixedEthHashInfo","textSize","hash","value","showCopyBtn","explorerUrl","getExplorerInfo","name","undefined","customAvatar","logoUri","showAvatar","as","NOT_AVAILABLE","className","creator","useKnownAddress","factory","implementation","TxDataRow","transactionHash","inlineType","formatDateTime","TxHistoryRow","TransitionProps","mountOnEnter","unmountOnExit","appear","isCreationTxInfo","TxDetails","HistoryTxList","useContext","TxsInfiniteScrollContext","lastItemId","setLastItemId","lastTransactionsGroup","lastTransaction","sameString","id","Provider","txLocation","map","txs","formatWithSchema","Number","HistoryTransactions","isFiltered","useLocation","search","includes","FILTER_TYPE_FIELD_NAME","Filter","TxsInfiniteScroll","Img","alt","src","NoTransactionsImage","TxSingularDetails","useParams","TRANSACTION_ID_SLUG","txId","storedTx","state","getTransactionWithLocationByAttribute","attributeName","attributeValue","shallowEqual","useStoredTx","useAsync","fetchSafeTransaction","fetchedTx","safeParams","extractPrefixedSafeAddress","FetchError","text","buttonText","redirectRoute","generateSafeRoute","SAFE_ROUTES","TRANSACTIONS","detailedTx","makeTxFromDetails","padding","isQueue","isTxQueued","txStatus","TxList","QueueTxList","fallbackLocation","toString","TRANSACTION_TABS","label","TRANSACTIONS_QUEUE","TRANSACTIONS_HISTORY","StyledLink","Link","GatewayTransactions","useHistory","path","useRouteMatch","isTxDetails","isDeeplinkedTx","breadcrumbText","parentCrumb","Col","start","xs","iconType","to","toUpperCase","color","onChange","replace","items","selectedTab","exact","render","QueueTransactions","TRANSACTIONS_SINGULAR"],"mappings":"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","file":"static/js/106.b4fd2304.chunk.js","sourcesContent":["import { useCallback, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { loadPagedHistoryTransactions } from 'src/logic/safe/store/actions/transactions/fetchTransactions/loadGatewayTransactions'\nimport { addHistoryTransactions } from 'src/logic/safe/store/actions/transactions/gatewayTransactions'\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { currentChainId } from 'src/logic/config/store/selectors'\nimport { useHistoryTransactions } from 'src/routes/safe/components/Transactions/TxList/hooks/useHistoryTransactions'\nimport { Errors } from 'src/logic/exceptions/CodedException'\nimport { Await } from 'src/types/helpers'\nimport useSafeAddress from 'src/logic/currentSession/hooks/useSafeAddress'\n\ntype PagedTransactions = {\n  count: number\n  transactions: TransactionDetails['transactions']\n  next: () => Promise<void>\n  isLoading: boolean\n}\n\nexport const usePagedHistoryTransactions = (): PagedTransactions => {\n  const { count, transactions } = useHistoryTransactions()\n  const chainId = useSelector(currentChainId)\n\n  const dispatch = useDispatch()\n  const { safeAddress } = useSafeAddress()\n  const [isLoading, setIsLoading] = useState(false)\n\n  const next = useCallback(async () => {\n    setIsLoading(true)\n\n    let results: Await<ReturnType<typeof loadPagedHistoryTransactions>>\n    try {\n      results = await loadPagedHistoryTransactions(safeAddress)\n    } catch (e) {\n      // No next page\n      if (e.content !== Errors._608) {\n        e.log()\n      }\n    }\n\n    if (!results) {\n      setIsLoading(false)\n      return\n    }\n\n    const { values } = results\n\n    if (values) {\n      dispatch(addHistoryTransactions({ chainId, safeAddress, values }))\n    }\n    setIsLoading(false)\n  }, [chainId, dispatch, safeAddress])\n\n  return { count, transactions, next, isLoading }\n}\n","import { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { historyTransactions } from 'src/logic/safe/store/selectors/gatewayTransactions'\n\nexport const useHistoryTransactions = (): TransactionDetails => {\n  const historyTxs = useSelector(historyTransactions)\n  const [count, setCount] = useState(0)\n\n  useEffect(() => {\n    const history = historyTxs\n      ? Object.entries(historyTxs).reduce((acc, [, transactions]) => (acc += transactions.length), 0)\n      : 0\n    setCount(history)\n  }, [historyTxs])\n\n  return {\n    count,\n    transactions: historyTxs ? Object.entries(historyTxs) : [],\n  }\n}\n","import { MultisigExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ReactElement } from 'react'\n\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { useAssetInfo } from './hooks/useAssetInfo'\nimport { useTransactionStatus } from './hooks/useTransactionStatus'\nimport { useTransactionType } from './hooks/useTransactionType'\nimport { TxCollapsed } from './TxCollapsed'\n\nexport const TxHistoryCollapsed = ({ transaction }: { transaction: Transaction }): ReactElement => {\n  const nonce = (transaction.executionInfo as MultisigExecutionInfo)?.nonce\n  const type = useTransactionType(transaction)\n  const info = useAssetInfo(transaction.txInfo)\n  const status = useTransactionStatus(transaction)\n\n  return (\n    <TxCollapsed\n      nonce={nonce}\n      type={type}\n      info={info}\n      time={transaction.timestamp}\n      status={status}\n      transaction={transaction}\n    />\n  )\n}\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Text } from '@gnosis.pm/safe-react-components'\nimport { Creation } from '@gnosis.pm/safe-react-gateway-sdk'\n\nimport { getExplorerInfo } from 'src/config'\nimport { formatDateTime } from 'src/utils/date'\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { NOT_AVAILABLE } from './utils'\nimport { TxDetailsContainer } from './styled'\nimport { KnownAddressType, useKnownAddress } from './hooks/useKnownAddress'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\nimport { TxDataRow } from './TxDataRow'\nimport { md } from 'src/theme/variables'\n\nconst StyledTxCreationAddress = styled.div`\n  margin-bottom: ${md};\n\n  &:last-of-type {\n    margin-bottom: 0px;\n  }\n`\n\nexport const TxInfoCreation = ({ transaction }: { transaction: Transaction }): ReactElement => {\n  const txInfo = transaction.txInfo as Creation\n  const timestamp = transaction.timestamp\n\n  const generateCreatorTxData = (\n    title,\n    creationEntity: Creation['creator' | 'factory' | 'implementation'],\n    address: KnownAddressType,\n  ): ReactElement => (\n    <StyledTxCreationAddress>\n      <Text size=\"xl\" strong>\n        {title}:\n      </Text>\n      {creationEntity ? (\n        <PrefixedEthHashInfo\n          textSize=\"xl\"\n          hash={creationEntity.value}\n          showCopyBtn\n          explorerUrl={getExplorerInfo(creationEntity.value)}\n          name={address?.name || undefined}\n          customAvatar={address?.logoUri || undefined}\n          showAvatar\n        />\n      ) : (\n        <Text size=\"xl\" as=\"span\">\n          {NOT_AVAILABLE}\n        </Text>\n      )}\n    </StyledTxCreationAddress>\n  )\n\n  return (\n    <TxDetailsContainer>\n      <div className=\"tx-creation\">\n        <div>\n          {generateCreatorTxData('Creator', txInfo.creator, useKnownAddress(txInfo.creator))}\n          {generateCreatorTxData('Factory', txInfo.factory, useKnownAddress(txInfo.factory))}\n          {generateCreatorTxData('Mastercopy', txInfo.implementation, useKnownAddress(txInfo.implementation))}\n        </div>\n        <div>\n          <TxDataRow title=\"Transaction hash:\" value={txInfo.transactionHash} inlineType=\"hash\" />\n          <TxDataRow title=\"Created:\" value={formatDateTime(timestamp)} />\n        </div>\n      </div>\n    </TxDetailsContainer>\n  )\n}\n","import { AccordionDetails } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\n\nimport { isCreationTxInfo, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { NoPaddingAccordion, StyledAccordionSummary } from './styled'\nimport { TxHistoryCollapsed } from './TxHistoryCollapsed'\nimport { TxDetails } from './TxDetails'\nimport { TxInfoCreation } from './TxInfoCreation'\n\nexport const TxHistoryRow = ({ transaction }: { transaction: Transaction }): ReactElement => (\n  <NoPaddingAccordion\n    TransitionProps={{\n      mountOnEnter: false,\n      unmountOnExit: true,\n      appear: true,\n    }}\n  >\n    <StyledAccordionSummary>\n      <TxHistoryCollapsed transaction={transaction} />\n    </StyledAccordionSummary>\n    <AccordionDetails>\n      {isCreationTxInfo(transaction.txInfo) ? (\n        <TxInfoCreation transaction={transaction} />\n      ) : (\n        <TxDetails transaction={transaction} />\n      )}\n    </AccordionDetails>\n  </NoPaddingAccordion>\n)\n","import { ReactElement, useContext } from 'react'\n\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { TxsInfiniteScrollContext } from 'src/routes/safe/components/Transactions/TxList/TxsInfiniteScroll'\nimport { formatWithSchema } from 'src/utils/date'\nimport { sameString } from 'src/utils/strings'\nimport { StyledTransactions, StyledTransactionsGroup, SubTitle } from './styled'\nimport { TxHistoryRow } from './TxHistoryRow'\nimport { TxLocationContext } from './TxLocationProvider'\n\nexport const HistoryTxList = ({ transactions }: { transactions: TransactionDetails['transactions'] }): ReactElement => {\n  const { lastItemId, setLastItemId } = useContext(TxsInfiniteScrollContext)\n\n  const [, lastTransactionsGroup] = transactions[transactions.length - 1]\n  const lastTransaction = lastTransactionsGroup[lastTransactionsGroup.length - 1]\n\n  if (!sameString(lastItemId, lastTransaction.id)) {\n    setLastItemId(lastTransaction.id)\n  }\n\n  return (\n    <TxLocationContext.Provider value={{ txLocation: 'history' }}>\n      {transactions?.map(([timestamp, txs]) => (\n        <StyledTransactionsGroup key={timestamp}>\n          <SubTitle size=\"lg\">{formatWithSchema(Number(timestamp), 'MMM d, yyyy')}</SubTitle>\n          <StyledTransactions>\n            {txs.map((transaction) => (\n              <TxHistoryRow key={transaction.id} transaction={transaction} />\n            ))}\n          </StyledTransactions>\n        </StyledTransactionsGroup>\n      ))}\n    </TxLocationContext.Provider>\n  )\n}\n","import { Loader, Title } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\n\nimport { usePagedHistoryTransactions } from './hooks/usePagedHistoryTransactions'\nimport { Centered, NoTransactions } from './styled'\nimport { HistoryTxList } from './HistoryTxList'\nimport { TxsInfiniteScroll } from './TxsInfiniteScroll'\nimport Img from 'src/components/layout/Img'\nimport NoTransactionsImage from './assets/no-transactions.svg'\nimport Filter, { FILTER_TYPE_FIELD_NAME } from './Filter'\nimport { useLocation } from 'react-router-dom'\n\nexport const HistoryTransactions = (): ReactElement => {\n  const { count, next, transactions, isLoading } = usePagedHistoryTransactions()\n  const { search } = useLocation()\n  const isFiltered = search.includes(`${FILTER_TYPE_FIELD_NAME}=`)\n\n  if (count === 0 && isLoading) {\n    return (\n      <Centered>\n        <Loader size=\"md\" />\n      </Centered>\n    )\n  }\n\n  return (\n    <>\n      <Filter />\n      {count === 0 || !transactions.length ? (\n        <NoTransactions>\n          <Img alt=\"No Transactions yet\" src={NoTransactionsImage} />\n          <Title size=\"xs\">{isFiltered ? 'No results found' : 'History transactions will appear here'} </Title>\n        </NoTransactions>\n      ) : (\n        <TxsInfiniteScroll next={next} isLoading={isLoading}>\n          <HistoryTxList transactions={transactions} />\n        </TxsInfiniteScroll>\n      )}\n    </>\n  )\n}\n","import { ReactElement } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { Loader } from '@gnosis.pm/safe-react-components'\nimport { shallowEqual, useSelector } from 'react-redux'\nimport { TransactionDetails } from '@gnosis.pm/safe-react-gateway-sdk'\n\nimport { isTxQueued, TxLocation, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport {\n  extractPrefixedSafeAddress,\n  generateSafeRoute,\n  SafeRouteSlugs,\n  SAFE_ROUTES,\n  TRANSACTION_ID_SLUG,\n} from 'src/routes/routes'\nimport { Centered } from './styled'\nimport { TxLocationContext } from './TxLocationProvider'\nimport { AppReduxState } from 'src/store'\nimport { fetchSafeTransaction } from 'src/logic/safe/transactions/api/fetchSafeTransaction'\nimport { makeTxFromDetails } from './utils'\nimport { QueueTxList } from './QueueTxList'\nimport { HistoryTxList } from './HistoryTxList'\nimport FetchError from '../../FetchError'\nimport useAsync from 'src/logic/hooks/useAsync'\nimport { getTransactionWithLocationByAttribute } from 'src/logic/safe/store/selectors/gatewayTransactions'\n\nconst useStoredTx = (txId?: string): { txLocation: TxLocation; transaction?: Transaction } | null => {\n  return (\n    useSelector(\n      (state: AppReduxState) =>\n        txId ? getTransactionWithLocationByAttribute(state, { attributeName: 'id', attributeValue: txId }) : undefined,\n      shallowEqual,\n    ) || null\n  )\n}\n\nconst TxSingularDetails = (): ReactElement => {\n  // Get a safeTxHash from the URL\n  const { [TRANSACTION_ID_SLUG]: txId = '' } = useParams<SafeRouteSlugs>()\n  const storedTx = useStoredTx(txId)\n\n  // Fetch tx details\n  const [fetchedTx, error] = useAsync<TransactionDetails>(() => fetchSafeTransaction(txId), [txId])\n\n  if (error) {\n    const safeParams = extractPrefixedSafeAddress()\n    return (\n      <FetchError\n        text=\"Transaction not found\"\n        buttonText=\"See all transactions\"\n        redirectRoute={generateSafeRoute(SAFE_ROUTES.TRANSACTIONS, safeParams)}\n      />\n    )\n  }\n\n  const detailedTx = storedTx?.transaction || (fetchedTx ? makeTxFromDetails(fetchedTx) : null)\n\n  if (!detailedTx) {\n    return (\n      <Centered padding={10}>\n        <Loader size=\"sm\" />\n      </Centered>\n    )\n  }\n\n  const isQueue = isTxQueued(detailedTx.txStatus)\n  const TxList = isQueue ? QueueTxList : HistoryTxList\n  const fallbackLocation: TxLocation = isQueue ? 'queued.queued' : 'history'\n\n  return (\n    <TxLocationContext.Provider value={{ txLocation: storedTx?.txLocation || fallbackLocation }}>\n      <TxList transactions={[[detailedTx.timestamp.toString(), [detailedTx]]]} />\n    </TxLocationContext.Provider>\n  )\n}\n\nexport default TxSingularDetails\n","import { Menu, Breadcrumb, BreadcrumbElement, Tab } from '@gnosis.pm/safe-react-components'\nimport { Item } from '@gnosis.pm/safe-react-components/dist/navigation/Tab'\nimport { ReactElement } from 'react'\nimport { Redirect, Route, Switch, useHistory, useRouteMatch, Link } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport Col from 'src/components/layout/Col'\nimport { extractPrefixedSafeAddress, generateSafeRoute, SAFE_ROUTES } from 'src/routes/routes'\nimport { HistoryTransactions } from './HistoryTransactions'\nimport { QueueTransactions } from './QueueTransactions'\nimport { ContentWrapper, Wrapper } from './styled'\nimport TxSingularDetails from './TxSingularDetails'\nimport { isDeeplinkedTx } from './utils'\n\nconst TRANSACTION_TABS: Item[] = [\n  { label: 'Queue', id: SAFE_ROUTES.TRANSACTIONS_QUEUE },\n  { label: 'History', id: SAFE_ROUTES.TRANSACTIONS_HISTORY },\n]\n\nconst StyledLink = styled(Link)`\n  text-decoration: none;\n  & * {\n    cursor: pointer !important;\n  }\n`\n\nconst GatewayTransactions = (): ReactElement => {\n  const history = useHistory()\n  const { path } = useRouteMatch()\n  const isTxDetails = isDeeplinkedTx()\n\n  let breadcrumbText = 'History'\n  if (isTxDetails) {\n    breadcrumbText = 'Details'\n  } else if (path === SAFE_ROUTES.TRANSACTIONS_QUEUE) {\n    breadcrumbText = 'Queue'\n  }\n\n  const onTabChange = (path: string) => history.replace(generateSafeRoute(path, extractPrefixedSafeAddress()))\n\n  return (\n    <Wrapper>\n      <Menu>\n        <Col start=\"sm\" xs={12}>\n          <Breadcrumb>\n            {((parentCrumb) =>\n              !isTxDetails ? (\n                parentCrumb\n              ) : (\n                <StyledLink to={generateSafeRoute(SAFE_ROUTES.TRANSACTIONS, extractPrefixedSafeAddress())}>\n                  {parentCrumb}\n                </StyledLink>\n              ))(<BreadcrumbElement iconType=\"transactionsInactive\" text=\"TRANSACTIONS\" />)}\n\n            <BreadcrumbElement text={breadcrumbText.toUpperCase()} color=\"placeHolder\" />\n          </Breadcrumb>\n        </Col>\n      </Menu>\n\n      {!isTxDetails && <Tab onChange={onTabChange} items={TRANSACTION_TABS} selectedTab={path} />}\n\n      <ContentWrapper>\n        <Switch>\n          <Route exact path={SAFE_ROUTES.TRANSACTIONS_QUEUE} render={() => <QueueTransactions />} />\n          <Route exact path={SAFE_ROUTES.TRANSACTIONS_HISTORY} render={() => <HistoryTransactions />} />\n          <Route exact path={SAFE_ROUTES.TRANSACTIONS_SINGULAR} render={() => <TxSingularDetails />} />\n          <Redirect to={SAFE_ROUTES.TRANSACTIONS_HISTORY} />\n        </Switch>\n      </ContentWrapper>\n    </Wrapper>\n  )\n}\n\nexport default GatewayTransactions\n"],"sourceRoot":""}