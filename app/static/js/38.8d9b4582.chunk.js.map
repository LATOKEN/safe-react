{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ContractInteraction/SendCustomTx/style.ts","routes/safe/components/Balances/SendModal/screens/ContractInteraction/SendCustomTx/index.tsx","routes/safe/components/Balances/SendModal/utils.tsx","assets/icons/qrcode.svg","components/ScanQRModal/style.ts","components/ScanQRModal/index.tsx","components/ScanQRModal/ScanQRWrapper/index.tsx","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","routes/safe/components/Balances/SendModal/screens/AddressBookInput/style.ts","routes/safe/components/Balances/SendModal/screens/AddressBookInput/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/style.ts","components/forms/TextAreaField/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/Buttons/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/EthAddressInput/index.tsx"],"names":["styles","createStyles","heading","padding","md","lg","justifyContent","boxSizing","maxHeight","annotation","letterSpacing","color","marginRight","marginLeft","manage","fontSize","closeIcon","height","width","qrCodeBtn","cursor","formContainer","buttonRow","gap","dataInput","lineHeight","border","selectAddress","useStyles","makeStyles","SendCustomTx","initialValues","isABI","onClose","onNext","switchMethod","classes","nativeCurrency","getNativeCurrency","ethBalance","useSelector","currentSafeEthBalance","saveForm","values","a","handleSubmit","contractAddress","data","value","submit","Row","align","className","grow","Paragraph","noMargin","weight","getStepTitle","IconButton","disableRipple","onClick","Hairline","GnoForm","decorators","ensResolver","formMutators","onSubmit","subscription","submitting","pristine","validating","rest","mutators","Block","SafeInfo","Divider","withArrow","EthAddressInput","name","onScannedValue","setContractAddress","text","margin","Col","between","size","ButtonLink","setMax","Field","component","TextField","inputAdornment","endAdornment","InputAdornment","position","symbol","placeholder","type","validate","composeValidators","mustBeFloat","maxValue","minValue","TextAreaField","mustBeHexData","Switch","checked","onChange","Buttons","currentStep","totalSteps","loaderContainer","close","secondaryText","detailsContainer","backgroundColor","background","button","sm","ScanQRModal","isOpen","onScan","useState","fileUploadModalOpen","setFileUploadModalOpen","error","setError","cameraBlocked","setCameraBlocked","scannerRef","React","openImageDialog","current","useEffect","onFileScannedResolve","successData","console","Modal","description","handleClose","open","title","layout","middle","legacyMode","onError","err","ref","style","facingMode","Button","minWidth","variant","ScanQRWrapper","handleScan","testId","qrModalOpen","setQrModalOpen","closeQrModal","Img","alt","role","src","QRIcon","Wrapper","styled","div","StyledDivider","DividerSRC","StyledIcon","Icon","StyledBlock","xs","currentSafeWithNames","safeAddress","address","safeName","hash","strongName","explorerUrl","getExplorerInfo","showAvatar","showCopyBtn","useTextFieldLabelStyle","root","overflow","useTextFieldInputStyle","input","BaseAddressBookInput","addressBookEntries","fieldMutator","label","setIsValidAddress","setSelectedEntry","setValidationText","validationText","networkId","currentChainId","updateAddressInfo","addressEntry","validateAddress","fullAddress","addressErrorMessage","mustBeEthereumAddress","parsePrefixedAddress","checkedAddr","checksumAddress","filteredEntries","filterAddressEntries","inputValue","length","onInputChange","_","reason","normalizedValue","trimSpaces","hasFeature","FEATURES","DOMAIN_LOOKUP","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","logError","Errors","_101","message","validatedAddress","chainId","labelStyles","inputStyles","Autocomplete","openOnFocus","filterOptions","freeSolo","options","id","renderInput","params","autoFocus","fullWidth","InputLabelProps","shrink","required","InputProps","inputProps","getOptionLabel","renderOption","PrefixedEthHashInfo","display","flexGrow","AddressBookInput","props","currentNetworkAddressBook","errorMsg","ContractsAddressBookInput","setFilteredEntries","filterContractAddresses","filterContractAddressBookEntries","filteredADBK","onSetSelectedEntry","selectedEntry","mustBeEthereumContractAddress","contractAddressErrorMessage","wordBreak","outerData","minHeight","fontFamily","fontStretch","textarea","paddingTop","paddingBottom","alignItems","multiline","rows","requiresMethod","method","useField","useFormState","modifiedSinceLastSubmit","submitError","valid","Footer","cancelButtonProps","confirmButtonProps","disabled","status","ButtonStatus","LOADING","READY","isReadMethod","isContract","isRequired","validatorsList","filter","validator","event","target","center","scannedAddress","startsWith","replace"],"mappings":"gXAGaA,EAASC,YAAa,CACjCC,QAAS,CACPC,QAAQ,GAAD,OAAKC,KAAL,YAAWC,MAClBC,eAAgB,aAChBC,UAAW,aACXC,UAAW,QAEbC,WAAY,CACVC,cAAe,OACfC,MAAO,UACPC,YAAa,OACbC,WAAY,QAEdC,OAAQ,CACNC,SAAUV,MAEZW,UAAW,CACTC,OAAQ,OACRC,MAAO,QAETC,UAAW,CACTC,OAAQ,WAEVC,cAAe,CACblB,QAAQ,GAAD,OAAKC,KAAL,YAAWC,OAEpBiB,UAAW,CACTL,OAAQ,OACRX,eAAgB,SAChBiB,IAAK,QAEPC,UAAW,CACT,uBAAwB,CACtBC,WAAY,OACZC,OAAQ,UAGZC,cAAe,CACbP,OAAQ,a,2FCONQ,EAAYC,YAAW7B,GAmGd8B,UAjGM,SAAC,GAAkF,IAAhFC,EAA+E,EAA/EA,cAAeC,EAAgE,EAAhEA,MAAOC,EAAyD,EAAzDA,QAASC,EAAgD,EAAhDA,OAAQC,EAAwC,EAAxCA,aACvDC,EAAUR,IACVS,EAAiBC,cACjBC,EAAaC,YAAYC,KAEzBC,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEACTC,EAAaF,GAAQ,GADZ,OAEfR,IAFe,2CAAH,sDAKRU,EAAe,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,gBAAiBC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,MAAUL,EAA4B,iBAAlBM,IAAkB,0DAC/EF,GAAQC,IACVd,EAAO,2BAAKS,GAAN,IAAcG,kBAAiBC,OAAMC,UAASC,IAIxD,OACE,qCACE,eAACC,EAAA,EAAD,CAAKC,MAAM,SAASC,UAAWhB,EAAQlC,QAASmD,MAAI,EAApD,UACE,cAACC,EAAA,EAAD,CAAWF,UAAWhB,EAAQtB,OAAQyC,UAAQ,EAACC,OAAO,SAAtD,kCAGA,cAACF,EAAA,EAAD,CAAWF,UAAWhB,EAAQ3B,WAA9B,SAA2CgD,YAAa,EAAG,KAC3D,cAACC,EAAA,EAAD,CAAYC,eAAa,EAACC,QAAS3B,EAAnC,SACE,cAAC,IAAD,CAAOmB,UAAWhB,EAAQpB,iBAG9B,cAAC6C,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CACEC,WAAY,CAACC,KACbC,aAAcA,IACdlC,cAAeA,EACfmC,SAAUrB,EACVsB,aAAc,CAAEC,YAAY,EAAMC,UAAU,EAAM1B,QAAQ,GAL5D,SAOG,SAACyB,EAAYE,EAAYC,EAAMC,GAG9B,OACE,qCACE,eAACC,EAAA,EAAD,CAAOrB,UAAWhB,EAAQf,cAA1B,UACE,cAACqD,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAASC,WAAS,IAClB,cAACC,EAAA,EAAD,CACEC,KAAK,kBACLC,eAAgBP,EAASQ,mBACzBC,KAAK,sBAEP,cAAC/B,EAAA,EAAD,CAAKgC,OAAO,KAAZ,SACE,eAACC,EAAA,EAAD,CAAKC,QAAQ,KAAb,UACE,cAAC9B,EAAA,EAAD,CAAW3C,MAAM,WAAW4C,UAAQ,EAAC8B,KAAK,KAA1C,mBAGA,cAACC,EAAA,EAAD,CAAY1B,QAjBK,kBAAMY,EAASe,OAAOhD,IAiBEiB,OAAO,OAAhD,2BAKJ,cAACN,EAAA,EAAD,CAAKgC,OAAO,KAAZ,SACE,cAACC,EAAA,EAAD,UACE,cAACK,EAAA,EAAD,CACEC,UAAWC,IACXC,eAAgB,CACdC,aAAc,cAACC,EAAA,EAAD,CAAgBC,SAAS,MAAzB,SAAgCzD,EAAe0D,UAE/DjB,KAAK,QACLkB,YAAY,SACZC,KAAK,OACLC,SAAUC,YAAkBC,IAAaC,YAAS9D,GAAc,KAAM+D,YAAS,UAIrF,cAACpD,EAAA,EAAD,CAAKgC,OAAO,KAAZ,SACE,cAACC,EAAA,EAAD,UACE,cAACoB,EAAA,EAAD,CACEzB,KAAK,OACLkB,YAAY,sBACZf,KAAK,sBACLgB,KAAK,OACLC,SAAUM,UAIhB,eAAClD,EAAA,EAAD,CAAW3C,MAAM,WAAW4C,UAAQ,EAAC8B,KAAK,KAA1C,UACE,cAACoB,EAAA,EAAD,CAAQC,SAAU1E,EAAO2E,SA/CT,kBAAMjE,EAAS6B,EAAK5B,WA8CtC,sCAKF,cAACiE,EAAA,EAAD,CAAS3E,QAASA,e,kCC1IhC,kCAAO,IAAMwB,EAAe,SAACoD,EAAqBC,GAAtB,qBAA6DD,EAA7D,eAA+EC,K,gGCA5F,MAA0B,mC,8DCG5B9G,EAASC,YAAa,CACjCC,QAAS,CACPC,QAASE,KACTC,eAAgB,gBAChBE,UAAW,OACXD,UAAW,cAEbwG,gBAAiB,CACf7F,MAAO,OACPD,OAAQ,QAEV+F,MAAO,CACL/F,OAAQ,OACRC,MAAO,OACPP,MAAOsG,iBAETC,iBAAkB,CAChBC,gBAAiBC,aACjB5G,UAAW,SAEbc,UAAW,CACTL,OAAQ,OACRX,eAAgB,UAElB+G,OAAQ,CACN,eAAgB,CACdxG,WAAYyG,S,mECZZ1F,EAAYC,YAAW7B,GAQhBuH,EAAc,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,OAAQvF,EAAiD,EAAjDA,QAASwF,EAAwC,EAAxCA,OACvCrF,EAAUR,IAChB,EAAsD8F,oBAAkB,GAAxE,mBAAOC,EAAP,KAA4BC,EAA5B,KACA,EAA0BF,mBAAwB,MAAlD,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA0CJ,oBAAkB,GAA5D,mBAAOK,EAAP,KAAsBC,EAAtB,KACMC,EAAkBC,cAClBC,EAAkBD,eAAkB,WACxCD,EAAWG,QAAQD,oBAClB,CAACF,IAEJI,qBAAU,WACHV,IAAuBI,GAAkBF,IAC5CD,GAAuB,GACvBO,OAED,CAACJ,EAAeI,EAAiBR,EAAqBC,EAAwBC,IAEjF,IAAMS,EAAuB,SAACT,EAAqBU,GACjD,GAAIV,EASF,OARAW,QAAQX,MAAM,gBAAiBA,QAEZ,oBAAfA,EAAM/C,MAA6C,6BAAf+C,EAAM/C,MAC5CkD,GAAiB,GACjBJ,GAAuB,IAEvBE,EAAS,6BAKTS,EACFd,EAAOc,GACER,GACTD,EAAS,6BAIb,OACE,eAACW,EAAA,EAAD,CAAOC,YAAY,sBAAsBC,YAAa1G,EAAS2G,KAAMpB,EAAQqB,MAAM,iBAAnF,UACE,eAAC3F,EAAA,EAAD,CAAKC,MAAM,SAASC,UAAWhB,EAAQlC,QAASmD,MAAI,EAApD,UACE,cAACC,EAAA,EAAD,CAAWC,UAAQ,EAAC8B,KAAK,KAAzB,qBAGA,cAAC3B,EAAA,EAAD,CAAYC,eAAa,EAACC,QAAS3B,EAAnC,SACE,cAAC,IAAD,CAAOmB,UAAWhB,EAAQ4E,aAG9B,cAACnD,EAAA,EAAD,IACA,eAACsB,EAAA,EAAD,CAAK/B,UAAWhB,EAAQ8E,iBAAkB4B,OAAO,SAASC,OAAO,KAAjE,UACGlB,GACC,cAACpD,EAAA,EAAD,CAAOtE,QAAQ,KAAK+E,OAAO,KAA3B,SACG2C,IAGL,cAAC,IAAD,CACEmB,WAAYjB,EACZkB,QAAS,SAACC,GAAD,OAAgBZ,EAAqBY,EAAK,OACnDzB,OAAQ,SAAC1E,GAAD,OAAkBuF,EAAqB,KAAMvF,IACrDoG,IAAKlB,EACLmB,MAAO,CAAElI,MAAO,QAASD,OAAQ,SACjCoI,WAAW,YAGf,cAACxF,EAAA,EAAD,IACA,eAACX,EAAA,EAAD,CAAKC,MAAM,SAASC,UAAWhB,EAAQd,UAAvC,UACE,cAACgI,EAAA,EAAD,CAAQlG,UAAWhB,EAAQiF,OAAQ1G,MAAM,YAAY4I,SAAU,IAAK3F,QAAS3B,EAA7E,mBAGA,cAACqH,EAAA,EAAD,CACElG,UAAWhB,EAAQiF,OACnB1G,MAAM,UACN4I,SAAU,IACV3F,QAAS,WACPoE,GAAiB,GACjBF,EAAS,MACTF,GAAuB,IAEzB4B,QAAQ,YATV,oC,SCtFF5H,EAAYC,YAAW,CAC3BV,UAAW,CACTC,OAAQ,aASCqI,EAAgB,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,WAAYC,EAAkC,EAAlCA,OACpCvH,EAAUR,IAChB,EAAsC8F,oBAAS,GAA/C,mBAAOkC,EAAP,KAAoBC,EAApB,KAMMC,EAAe,WACnBD,GAAe,IAOjB,OACE,qCACE,cAACE,EAAA,EAAD,CACEC,IAAI,UACJ5G,UAAWhB,EAAQjB,UACnBF,OAAQ,GACR2C,QAAS,WAjBbiG,GAAe,IAkBXI,KAAK,SACLC,IAAKC,EACLR,OAAQA,GAAU,YAEnBC,GAAe,cAAC,EAAD,CAAapC,OAAQoC,EAAa3H,QAAS6H,EAAcrC,OAftD,SAACzE,GACtB0G,EAAW1G,EAAO8G,W,0EC3BhBM,EAAUC,UAAOC,IAAV,0JAUPC,EAAgBF,kBAAOG,UAAPH,CAAH,4CAIbI,EAAaJ,kBAAOK,OAAPL,CAAH,6KAuBD1F,IAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACd,eAACwF,EAAD,WACGxF,GAAa,cAAC6F,EAAD,CAAYxE,KAAK,YAAYZ,KAAK,OAChD,cAACkF,EAAD,S,uICzBEI,EAAcN,kBAAO5F,IAAP4F,CAAH,wOAIK3I,SAGNkJ,MAyCDlG,IAhCE,SAAC,GAAiD,IAA/CO,EAA8C,EAA9CA,KAClB,EAA6DzC,YAAYqI,KAAxDC,EAAjB,EAAQC,QAAsBxI,EAA9B,EAA8BA,WAAkByI,EAAhD,EAA0ClG,KACpCzC,EAAiBC,cAEvB,OACE,qCACG2C,GACC,cAAC,IAAD,CAAKC,OAAO,KAAZ,SACE,cAAC,IAAD,CAAWvE,MAAM,WAAW4C,UAAQ,EAAC8B,KAAK,KAA1C,SACGJ,MAIP,cAAC,IAAD,CACEgG,KAAMH,EACNhG,KAAMkG,EACNE,YAAU,EACVC,YAAaC,YAAgBN,GAC7BO,YAAU,EACVC,aAAW,IAEZ/I,GACC,cAACoI,EAAD,UACE,eAAC,IAAD,CAAWpH,UAAQ,EAAnB,sBACW,cAAC,IAAD,CAAM,cAAY,sBAAlB,mBAA4ChB,EAA5C,YAA0DF,EAAe0D,oB,wPClDjFwF,EAAyB1J,YACpC5B,YAAa,CACXuL,KAAM,CACJC,SAAU,aAKHC,EAAyB7J,YACpC5B,YAAa,CACX0L,MAAO,CACLxL,QAAS,sB,oHC4BTyL,EAAuB,SAAC,GAQkB,IAP9CC,EAO6C,EAP7CA,mBACAC,EAM6C,EAN7CA,aAM6C,IAL7CC,aAK6C,MALrC,YAKqC,EAJ7CC,EAI6C,EAJ7CA,kBACAC,EAG6C,EAH7CA,iBACAC,EAE6C,EAF7CA,kBACAC,EAC6C,EAD7CA,eAEMC,EAAY5J,YAAY6J,KAExBC,EAAoB,SAACC,GACzBN,EAAiBM,GACjBT,EAAaS,EAAaxB,UAGtByB,EAAkB,SAACC,GACvB,IAAMC,EAAsBC,YAAsBF,GAGlD,GAFAT,GAAmBU,IAEfA,EAAJ,CAMA,IAAQ3B,EAAY6B,YAAqBH,GAAjC1B,QACF8B,EAAcC,YAAgB/B,IAAYA,EAC1CgC,EAAkBC,YAAqBnB,EAAoB,CAAEoB,WAAYJ,IAC/E,OAAkC,IAA3BE,EAAgBG,OAAeH,EAAgB,GAAKF,EARzDX,EAAkBQ,IAqBhBS,EAAuF,uCAAG,WAC9FC,EACApK,EACAqK,GAH8F,qBAAAzK,EAAA,2DAKtFyK,EALsF,OAMvF,UANuF,0BAOpFC,EAAkBC,YAAWvK,GAPuD,uDAexFwK,YAAWC,WAASC,iBACnBC,YAAeL,KAAoBM,YAAwBN,GAhB4B,wBAkBpFvC,EAAU,GAlB0E,mBAoBtE8C,YAAqBP,GApBiD,QAoBtFvC,EApBsF,yDAsBtF+C,YAASC,IAAOC,KAAM,KAAIC,SAtB4D,WAyBlFC,EAAmB1B,EAAgBzB,GAzB+C,wBA4BtFe,EAAa,IA5ByE,oCAyCxFQ,EAR8B,kBAArB4B,EACH,CACEnD,UACAjG,KAAMwI,EACNa,QAAS/B,GAEX8B,GAvCkF,gCA8CpFA,EAAmB1B,EAAgBc,GA9CiD,wBAiDxFxB,EAAa,IAjD2E,oCA8D1FQ,EAR8B,kBAArB4B,EACH,CACEnD,QAASmD,EACTpJ,KAAM,GACNqJ,QAAS/B,GAEX8B,GA5DoF,+EAAH,0DAqEvFE,EAAc7C,IACd8C,EAAc3C,IAEpB,OACE,cAAC4C,EAAA,EAAD,CACEtN,UAAW,KACXuN,aAAa,EACbC,cAAexB,IACfyB,UAAQ,EACR9H,SAxFkF,SAACyG,EAAGpK,EAAOqK,GAC/F,GACO,kBADCA,EACN,CACE,MAAmCrK,EAA3B+H,EAAR,EAAQA,QAASjG,EAAjB,EAAiBA,KAAMqJ,EAAvB,EAAuBA,QACvB7B,EAAkB,CAAEvB,UAASjG,OAAMqJ,cAqFrChB,cAAeA,EACfuB,QAAS7C,EACT8C,GAAG,qBACHC,YAAa,SAACC,GAAD,OACX,cAAC,IAAD,2BACMA,GADN,IAEEC,WAAS,EACTjH,QAASsE,EACT4C,WAAS,EACTvF,QAAQ,WACRuC,MAAOI,GAAkCJ,EACzCiD,gBAAiB,CAAEC,QAAQ,EAAMC,UAAU,EAAM9M,QAASgM,GAC1De,WAAU,2BAAON,EAAOM,YAAd,IAA0B/M,QAASiM,IAC7Ce,WAAU,2BAAOP,EAAOO,YAAd,IAA0B,cAAe,2BAGvDC,eAAgB,qBAAGtE,SACnBuE,aAAc,gBAAGvE,EAAH,EAAGA,QAASjG,EAAZ,EAAYA,KAAZ,OAAuB,cAACyK,EAAA,EAAD,CAAqBtE,KAAMF,EAASjG,KAAMA,EAAMuG,YAAU,KAC/FpB,KAAK,UACLb,MAAO,CAAEoG,QAAS,OAAQC,SAAU,MAK7BC,EAAmB,SAACC,GAC/B,IAAM9D,EAAqBrJ,YAAYoN,KACvC,EAA4ClI,mBAAiB,IAA7D,mBAAOyE,EAAP,KAAuBD,EAAvB,KAQA,OANA7D,qBAAU,WACJsH,EAAME,UACR3D,EAAkByD,EAAME,YAEzB,CAACF,EAAME,WAGR,cAAC,EAAD,aACEhE,mBAAoBA,EACpBK,kBAAmBA,EACnBC,eAAgBA,GACZwD,KAKGG,EAA4B,SAAC,GAIH,IAHrC9D,EAGoC,EAHpCA,kBACAC,EAEoC,EAFpCA,iBACG0D,EACiC,iBAC9B9D,EAAqBrJ,YAAYoN,KACvC,EAA8ClI,mBAA6B,IAA3E,mBAAOqF,EAAP,KAAwBgD,EAAxB,KACA,EAA4CrI,mBAAiB,IAA7D,mBAAOyE,EAAP,KAAuBD,EAAvB,KAEA7D,qBAAU,WACR,IAAM2H,EAAuB,uCAAG,4BAAApN,EAAA,sEACHqN,YAAiCpE,GAD9B,OACxBqE,EADwB,OAE9BH,EAAmBG,GAFW,2CAAH,qDAI7BF,MACC,CAACnE,IAEJ,IAAMsE,EAAkB,uCAAG,WAAOC,GAAP,eAAAxN,EAAA,kEACrBwN,QADqB,IACrBA,OADqB,EACrBA,EAAerF,SADM,gCAGmBsF,YAA8BD,EAAcrF,SAH/D,OAGjBuF,EAHiB,OAIvBtE,GAAmBsE,GACnBpE,EAAiB,OAACoE,QAAD,IAACA,IAA+B,IACjDrE,EAAiBmE,GANM,2CAAH,sDAUxB,OACE,cAAC,EAAD,aACEvE,mBAAoBkB,EACpBf,kBAAmBA,EACnBC,iBAAkBkE,EAClBjE,kBAAmBA,EACnBC,eAAgBA,GACZwD,M,kCChPV,sDAGa3P,EAASC,YAAa,CACjCkB,UAAW,CACTC,OAAQ,WAEVC,cAAe,CACblB,QAAQ,GAAD,OAAKC,KAAL,YAAWC,MAClBkQ,UAAW,cAEbvN,MAAO,CACLnC,WAAYyG,MAEdkJ,UAAW,CACTC,UAAW,QAEb1N,KAAM,CACJwN,UAAW,YACX9E,SAAU,OACV1K,SAAU,OACV2P,WAAY,SACZlQ,UAAW,QACXE,cAAe,SACfiQ,YAAa,SACblP,WAAY,QAEdH,UAAW,CACTL,OAAQ,OACRX,eAAgB,SAChBiB,IAAK,QAEPC,UAAW,CACT,uBAAwB,CACtBC,WAAY,OACZC,OAAQ,UAGZC,cAAe,CACbP,OAAQ,WAEV2N,UAAW,CACTzO,eAAgB,oB,0HCpCdN,EAASC,YAAa,CAC1B2Q,SAAU,CACR,UAAW,CACT3P,OAAQ,QACR4P,WAAY,IACZC,cAAe,IACfC,WAAY,OACZ,eAAgB,CACdhQ,SAAU,OACVL,cAAe,SACfe,WAAY,OACZR,OAAQ,aAMVW,EAAYC,YAAW7B,GAEhBuG,EAAgB,SAAC,GAAgC,IAA3BoJ,EAA0B,oBACrDvN,EAAUR,IAChB,OAAO,cAAC,IAAD,2BAAW+N,GAAX,IAAkBvM,UAAWhB,EAAQwO,SAAUnL,UAAWC,IAAWsL,WAAS,EAACC,KAAK,S,kCC3B7F,qCA2CerK,IAjCC,SAAC,GAAkE,IAAhE3E,EAA+D,EAA/DA,QAASiP,EAAsD,EAAtDA,eAERC,EACdC,YAAS,iBAAkB,CAAEjN,aAAc,CAAEnB,OAAO,KADtD2I,MAAS3I,MAEX,EAAgFqO,YAAa,CAC3FlN,aAAc,CACZmN,yBAAyB,EACzBC,aAAa,EACbnN,YAAY,EACZoN,OAAO,EACPlN,YAAY,KANRgN,EAAR,EAAQA,wBAAyBC,EAAjC,EAAiCA,YAAanN,EAA9C,EAA8CA,WAAYoN,EAA1D,EAA0DA,MAAOlN,EAAjE,EAAiEA,WAUjE,OACE,cAAC,IAAMmN,OAAP,UACE,cAAC,IAAMA,OAAO7K,QAAd,CACE8K,kBAAmB,CAAE9N,QAAS3B,GAC9B0P,mBAAoB,CAClBC,SACExN,GACAE,KACGkN,KAAWD,KAAiBD,GAC9BJ,IAAmBC,EACtBU,OAAQzN,GAAcE,EAAawN,IAAaC,QAAUD,IAAaE,MACvErI,OAAO,GAAD,OAAKsI,YAAad,GAAU,OAAS,SAArC,WACNlM,KAAMgN,YAAad,GAAU,OAAS,gB,kMCjB1CvP,EAAYC,YAAW7B,KAUhB6E,EAAkB,SAAC,GAMiB,IAAD,IAL9CqN,kBAK8C,aAJ9CC,kBAI8C,SAH9CrN,EAG8C,EAH9CA,KACAC,EAE8C,EAF9CA,eACAE,EAC8C,EAD9CA,KAEM7C,EAAUR,IACVwQ,EAAiB,CACrBD,GAAcjD,IACdvC,IACAuF,GAAc7B,KAEVnK,EAAWC,IAAiB,WAAjB,cAAqBiM,EAAeC,QAAO,SAACC,GAAD,OAAeA,OACnEjO,EAAagN,YAAa,CAAElN,aAAc,CAAEE,UAAU,KAAtDA,SAEGrB,EACPoO,YAAS,kBAAmB,CAAEjN,aAAc,CAAEnB,OAAO,KADvD2I,MAAS3I,MAEX,EAA0C0E,mBAA4D,CACpGqD,QAAS/H,EACT8B,KAAM,KAFR,mBAAOsL,EAAP,KAAsBnE,EAAtB,KAsBA,OACE,eAAC,IAAD,CAAK/G,OAAO,KAAZ,UACE,cAAC,IAAD,CAAK0F,GAAI,GAAT,UACgB,OAAbwF,QAAa,IAAbA,OAAA,EAAAA,EAAerF,SACd,cAAC,IAAD,CACEtF,UAAWC,IACXZ,KAAMA,EACNkB,YAAaf,EACb0B,SAb4D,SAAC4L,GACrE,IAAQvP,EAAUuP,EAAMC,OAAhBxP,MACRiJ,EAAiB,CAAElB,QAAS/H,KAYpB2G,OAAQ7E,EACRiH,MAAO9G,EACPgB,KAAK,OACLC,SAAUA,IAGZ,cAAC,IAAD,CACE+F,iBAAkBA,EAClBD,kBAAmB,aACnBF,aAAc/G,EACdV,SAAUA,EACV0H,MAAM,uBAIZ,cAAC,IAAD,CAAK0G,OAAO,KAAKrP,UAAWhB,EAAS2G,OAAO,KAAK6B,GAAI,EAArD,SACE,cAAC,IAAD,CAAelB,WA1CF,SAAC1G,EAAO8G,GACzB,IAAI4I,EAAiB1P,EAEjB0P,EAAeC,WAAW,eAC5BD,EAAiBA,EAAeE,QAAQ,YAAa,KAGvD3G,EAAiB,CAAElB,QAAS2H,IAC5B3N,EAAe2N,GACf5I","file":"static/js/38.8d9b4582.chunk.js","sourcesContent":["import { lg, md } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: `${md} ${lg}`,\n    justifyContent: 'flex-start',\n    boxSizing: 'border-box',\n    maxHeight: '74px',\n  },\n  annotation: {\n    letterSpacing: '-1px',\n    color: '#a2a8ba',\n    marginRight: 'auto',\n    marginLeft: '20px',\n  },\n  manage: {\n    fontSize: lg,\n  },\n  closeIcon: {\n    height: '35px',\n    width: '35px',\n  },\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n  formContainer: {\n    padding: `${md} ${lg}`,\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n  dataInput: {\n    '& TextField-root-294': {\n      lineHeight: 'auto',\n      border: 'green',\n    },\n  },\n  selectAddress: {\n    cursor: 'pointer',\n  },\n})\n","import { ReactElement } from 'react'\nimport { useSelector } from 'react-redux'\nimport IconButton from '@material-ui/core/IconButton'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Switch from '@material-ui/core/Switch'\nimport Close from '@material-ui/icons/Close'\n\nimport Divider from 'src/components/Divider'\nimport Field from 'src/components/forms/Field'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport { TextAreaField } from 'src/components/forms/TextAreaField'\nimport TextField from 'src/components/forms/TextField'\nimport { composeValidators, maxValue, minValue, mustBeFloat, mustBeHexData } from 'src/components/forms/validator'\nimport Block from 'src/components/layout/Block'\nimport ButtonLink from 'src/components/layout/ButtonLink'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { currentSafeEthBalance } from 'src/logic/safe/store/selectors'\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\n\nimport { styles } from './style'\nimport { getNativeCurrency } from 'src/config'\nimport { EthAddressInput } from '../EthAddressInput'\nimport { ensResolver, formMutators } from '../utils'\nimport Buttons from '../Buttons'\nimport { getStepTitle } from 'src/routes/safe/components/Balances/SendModal/utils'\n\nexport interface CreatedTx {\n  contractAddress: string\n  data: string\n  value: string | number\n}\n\nexport type CustomTxProps = {\n  contractAddress?: string\n}\n\ntype Props = {\n  initialValues: CustomTxProps\n  onClose: () => void\n  onNext: (tx: CreatedTx, submit: boolean) => void\n  isABI: boolean\n  switchMethod: () => void\n}\n\nconst useStyles = makeStyles(styles)\n\nconst SendCustomTx = ({ initialValues, isABI, onClose, onNext, switchMethod }: Props): ReactElement => {\n  const classes = useStyles()\n  const nativeCurrency = getNativeCurrency()\n  const ethBalance = useSelector(currentSafeEthBalance)\n\n  const saveForm = async (values) => {\n    await handleSubmit(values, false)\n    switchMethod()\n  }\n\n  const handleSubmit = ({ contractAddress, data, value, ...values }, submit = true) => {\n    if (data || value) {\n      onNext({ ...values, contractAddress, data, value }, submit)\n    }\n  }\n\n  return (\n    <>\n      <Row align=\"center\" className={classes.heading} grow>\n        <Paragraph className={classes.manage} noMargin weight=\"bolder\">\n          Contract interaction\n        </Paragraph>\n        <Paragraph className={classes.annotation}>{getStepTitle(1, 2)}</Paragraph>\n        <IconButton disableRipple onClick={onClose}>\n          <Close className={classes.closeIcon} />\n        </IconButton>\n      </Row>\n      <Hairline />\n      <GnoForm\n        decorators={[ensResolver]}\n        formMutators={formMutators}\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        subscription={{ submitting: true, pristine: true, values: true }}\n      >\n        {(submitting, validating, rest, mutators) => {\n          const handleClickSendMax = () => mutators.setMax(ethBalance)\n          const handleToggleAbi = () => saveForm(rest.values)\n          return (\n            <>\n              <Block className={classes.formContainer}>\n                <SafeInfo />\n                <Divider withArrow />\n                <EthAddressInput\n                  name=\"contractAddress\"\n                  onScannedValue={mutators.setContractAddress}\n                  text=\"Contract address*\"\n                />\n                <Row margin=\"xs\">\n                  <Col between=\"lg\">\n                    <Paragraph color=\"disabled\" noMargin size=\"md\">\n                      Value\n                    </Paragraph>\n                    <ButtonLink onClick={handleClickSendMax} weight=\"bold\">\n                      Send max\n                    </ButtonLink>\n                  </Col>\n                </Row>\n                <Row margin=\"md\">\n                  <Col>\n                    <Field\n                      component={TextField}\n                      inputAdornment={{\n                        endAdornment: <InputAdornment position=\"end\">{nativeCurrency.symbol}</InputAdornment>,\n                      }}\n                      name=\"value\"\n                      placeholder=\"Value*\"\n                      type=\"text\"\n                      validate={composeValidators(mustBeFloat, maxValue(ethBalance || '0'), minValue(0))}\n                    />\n                  </Col>\n                </Row>\n                <Row margin=\"sm\">\n                  <Col>\n                    <TextAreaField\n                      name=\"data\"\n                      placeholder=\"Data (hex encoded)*\"\n                      text=\"Data (hex encoded)*\"\n                      type=\"text\"\n                      validate={mustBeHexData}\n                    />\n                  </Col>\n                </Row>\n                <Paragraph color=\"disabled\" noMargin size=\"lg\">\n                  <Switch checked={!isABI} onChange={handleToggleAbi} />\n                  Use custom data (hex encoded)\n                </Paragraph>\n              </Block>\n              <Buttons onClose={onClose} />\n            </>\n          )\n        }}\n      </GnoForm>\n    </>\n  )\n}\n\nexport default SendCustomTx\n","export const getStepTitle = (currentStep: number, totalSteps: number): string => `Step ${currentStep} of ${totalSteps}`\n","export default __webpack_public_path__ + \"static/media/qrcode.fec1b6d8.svg\";","import { background, lg, secondaryText, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: lg,\n    justifyContent: 'space-between',\n    maxHeight: '75px',\n    boxSizing: 'border-box',\n  },\n  loaderContainer: {\n    width: '100%',\n    height: '100%',\n  },\n  close: {\n    height: '25px',\n    width: '25px',\n    color: secondaryText,\n  },\n  detailsContainer: {\n    backgroundColor: background,\n    maxHeight: '450px',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n  },\n  button: {\n    '&:last-child': {\n      marginLeft: sm,\n    },\n  },\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Close from '@material-ui/icons/Close'\nimport * as React from 'react'\nimport QrReader from 'react-qr-reader'\n\nimport { styles } from './style'\n\nimport Modal from 'src/components/Modal'\nimport Block from 'src/components/layout/Block'\nimport Button from 'src/components/layout/Button'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { useEffect, useState } from 'react'\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  isOpen: boolean\n  onClose: () => void\n  onScan: (value: string) => void\n}\n\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\n  const classes = useStyles()\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n  const [cameraBlocked, setCameraBlocked] = useState<boolean>(false)\n  const scannerRef: any = React.createRef()\n  const openImageDialog = React.useCallback(() => {\n    scannerRef.current.openImageDialog()\n  }, [scannerRef])\n\n  useEffect(() => {\n    if (!fileUploadModalOpen && cameraBlocked && !error) {\n      setFileUploadModalOpen(true)\n      openImageDialog()\n    }\n  }, [cameraBlocked, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\n\n  const onFileScannedResolve = (error: Error | null, successData: string | null) => {\n    if (error) {\n      console.error('QR code error', error)\n\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDismissedError') {\n        setCameraBlocked(true)\n        setFileUploadModalOpen(false)\n      } else {\n        setError('The QR could not be read')\n      }\n      return\n    }\n\n    if (successData) {\n      onScan(successData)\n    } else if (cameraBlocked) {\n      setError('The QR could not be read')\n    }\n  }\n\n  return (\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\n      <Row align=\"center\" className={classes.heading} grow>\n        <Paragraph noMargin size=\"xl\">\n          Scan QR\n        </Paragraph>\n        <IconButton disableRipple onClick={onClose}>\n          <Close className={classes.close} />\n        </IconButton>\n      </Row>\n      <Hairline />\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\n        {error && (\n          <Block padding=\"md\" margin=\"md\">\n            {error}\n          </Block>\n        )}\n        <QrReader\n          legacyMode={cameraBlocked}\n          onError={(err: Error) => onFileScannedResolve(err, null)}\n          onScan={(data: string) => onFileScannedResolve(null, data)}\n          ref={scannerRef}\n          style={{ width: '400px', height: '400px' }}\n          facingMode=\"user\"\n        />\n      </Col>\n      <Hairline />\n      <Row align=\"center\" className={classes.buttonRow}>\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\n          Close\n        </Button>\n        <Button\n          className={classes.button}\n          color=\"primary\"\n          minWidth={154}\n          onClick={() => {\n            setCameraBlocked(true)\n            setError(null)\n            setFileUploadModalOpen(false)\n          }}\n          variant=\"contained\"\n        >\n          Upload an image\n        </Button>\n      </Row>\n    </Modal>\n  )\n}\n","import { makeStyles } from '@material-ui/core/styles'\nimport { ReactElement, useState } from 'react'\n\nimport QRIcon from 'src/assets/icons/qrcode.svg'\nimport { ScanQRModal } from 'src/components/ScanQRModal'\nimport Img from 'src/components/layout/Img'\n\nconst useStyles = makeStyles({\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n})\n\ntype Props = {\n  handleScan: (dataResult: string, closeQrModal: () => void) => void\n  testId?: string\n}\n\nexport const ScanQRWrapper = ({ handleScan, testId }: Props): ReactElement => {\n  const classes = useStyles()\n  const [qrModalOpen, setQrModalOpen] = useState(false)\n\n  const openQrModal = () => {\n    setQrModalOpen(true)\n  }\n\n  const closeQrModal = () => {\n    setQrModalOpen(false)\n  }\n\n  const onScanFinished = (value: string) => {\n    handleScan(value, closeQrModal)\n  }\n\n  return (\n    <>\n      <Img\n        alt=\"Scan QR\"\n        className={classes.qrCodeBtn}\n        height={20}\n        onClick={() => openQrModal()}\n        role=\"button\"\n        src={QRIcon}\n        testId={testId || 'qr-icon'}\n      />\n      {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={onScanFinished} />}\n    </>\n  )\n}\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  margin: 8px 0;\n\n  svg {\n    margin: 0 12px 0 4px;\n  }\n`\nconst StyledDivider = styled(DividerSRC)`\n  width: 100%;\n`\n\nconst StyledIcon = styled(Icon)`\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%);\n  padding: 0 20px;\n  background: white;\n\n  & svg {\n    margin: 0;\n  }\n`\n\ntype Props = {\n  withArrow?: boolean\n}\n\nconst Divider = ({ withArrow }: Props): ReactElement => (\n  <Wrapper>\n    {withArrow && <StyledIcon type=\"arrowDown\" size=\"md\" />}\n    <StyledDivider />\n  </Wrapper>\n)\n\nexport default Divider\n","import { useSelector } from 'react-redux'\nimport styled from 'styled-components'\n\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Bold from 'src/components/layout/Bold'\nimport { border, xs } from 'src/theme/variables'\nimport Block from 'src/components/layout/Block'\nimport Row from 'src/components/layout/Row'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\n\nconst StyledBlock = styled(Block)`\n  font-size: 12px;\n  line-height: 1.08;\n  letter-spacing: -0.5px;\n  background-color: ${border};\n  width: fit-content;\n  padding: 5px 10px;\n  margin-top: ${xs};\n  margin-left: 40px;\n  border-radius: 3px;\n`\n\ntype SafeInfoProps = {\n  text?: string\n}\n\nconst SafeInfo = ({ text }: SafeInfoProps): React.ReactElement => {\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\n  const nativeCurrency = getNativeCurrency()\n\n  return (\n    <>\n      {text && (\n        <Row margin=\"sm\">\n          <Paragraph color=\"black400\" noMargin size=\"lg\">\n            {text}\n          </Paragraph>\n        </Row>\n      )}\n      <PrefixedEthHashInfo\n        hash={safeAddress}\n        name={safeName}\n        strongName\n        explorerUrl={getExplorerInfo(safeAddress)}\n        showAvatar\n        showCopyBtn\n      />\n      {ethBalance && (\n        <StyledBlock>\n          <Paragraph noMargin>\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCurrency.symbol}`}</Bold>\n          </Paragraph>\n        </StyledBlock>\n      )}\n    </>\n  )\n}\n\nexport default SafeInfo\n","import { createStyles, makeStyles } from '@material-ui/core'\n\nexport const useTextFieldLabelStyle = makeStyles(\n  createStyles({\n    root: {\n      overflow: 'hidden',\n    },\n  }),\n)\n\nexport const useTextFieldInputStyle = makeStyles(\n  createStyles({\n    input: {\n      padding: '16px !important',\n    },\n  }),\n)\n","import MuiTextField from '@material-ui/core/TextField'\nimport Autocomplete, { AutocompleteProps } from '@material-ui/lab/Autocomplete'\nimport { Dispatch, ReactElement, SetStateAction, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { mustBeEthereumAddress, mustBeEthereumContractAddress } from 'src/components/forms/validator'\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\nimport { filterContractAddressBookEntries, filterAddressEntries } from 'src/logic/addressBook/utils'\nimport { isValidEnsName, isValidCryptoDomainName } from 'src/logic/wallets/ethAddresses'\nimport { getAddressFromDomain } from 'src/logic/wallets/getWeb3'\nimport {\n  useTextFieldInputStyle,\n  useTextFieldLabelStyle,\n} from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput/style'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\nimport { trimSpaces } from 'src/utils/strings'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { checksumAddress } from 'src/utils/checksumAddress'\nimport { currentChainId } from 'src/logic/config/store/selectors'\nimport { FEATURES } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { parsePrefixedAddress } from 'src/utils/prefixedAddress'\nimport { hasFeature } from 'src/logic/safe/utils/safeVersion'\n\nexport interface AddressBookProps {\n  fieldMutator: (address: string) => void\n  label?: string\n  pristine?: boolean\n  recipientAddress?: string\n  errorMsg?: string\n  setIsValidAddress: (valid: boolean) => void\n  setSelectedEntry: Dispatch<SetStateAction<{ address: string; name: string }> | null>\n}\n\nexport interface BaseAddressBookInputProps extends AddressBookProps {\n  addressBookEntries: AddressBookEntry[]\n  setSelectedEntry: (args: { address: string; name: string } | null) => void\n  setValidationText: Dispatch<SetStateAction<string | undefined>>\n  validationText: string | undefined\n}\n\nconst BaseAddressBookInput = ({\n  addressBookEntries,\n  fieldMutator,\n  label = 'Recipient',\n  setIsValidAddress,\n  setSelectedEntry,\n  setValidationText,\n  validationText,\n}: BaseAddressBookInputProps): ReactElement => {\n  const networkId = useSelector(currentChainId)\n\n  const updateAddressInfo = (addressEntry: AddressBookEntry): void => {\n    setSelectedEntry(addressEntry)\n    fieldMutator(addressEntry.address)\n  }\n\n  const validateAddress = (fullAddress: string): AddressBookEntry | string | undefined => {\n    const addressErrorMessage = mustBeEthereumAddress(fullAddress)\n    setIsValidAddress(!addressErrorMessage)\n\n    if (addressErrorMessage) {\n      setValidationText(addressErrorMessage)\n      return\n    }\n\n    // Automatically checksum valid addresses\n    const { address } = parsePrefixedAddress(fullAddress)\n    const checkedAddr = checksumAddress(address) || address\n    const filteredEntries = filterAddressEntries(addressBookEntries, { inputValue: checkedAddr })\n    return filteredEntries.length === 1 ? filteredEntries[0] : checkedAddr\n  }\n\n  const onChange: AutocompleteProps<AddressBookEntry, false, false, true>['onChange'] = (_, value, reason) => {\n    switch (reason) {\n      case 'select-option': {\n        const { address, name, chainId } = value as AddressBookEntry\n        updateAddressInfo({ address, name, chainId })\n        break\n      }\n    }\n  }\n\n  const onInputChange: AutocompleteProps<AddressBookEntry, false, false, true>['onInputChange'] = async (\n    _,\n    value,\n    reason,\n  ) => {\n    switch (reason) {\n      case 'input': {\n        const normalizedValue = trimSpaces(value)\n\n        if (!normalizedValue) {\n          break\n        }\n\n        // ENS-enabled resolve/validation\n        if (\n          hasFeature(FEATURES.DOMAIN_LOOKUP) &&\n          (isValidEnsName(normalizedValue) || isValidCryptoDomainName(normalizedValue))\n        ) {\n          let address = ''\n          try {\n            address = await getAddressFromDomain(normalizedValue)\n          } catch (err) {\n            logError(Errors._101, err.message)\n          }\n\n          const validatedAddress = validateAddress(address)\n\n          if (!validatedAddress) {\n            fieldMutator('')\n            break\n          }\n\n          const newEntry =\n            typeof validatedAddress === 'string'\n              ? {\n                  address,\n                  name: normalizedValue,\n                  chainId: networkId,\n                }\n              : validatedAddress\n\n          updateAddressInfo(newEntry)\n          break\n        }\n\n        // ETH address validation\n        const validatedAddress = validateAddress(normalizedValue)\n\n        if (!validatedAddress) {\n          fieldMutator('')\n          break\n        }\n\n        const newEntry =\n          typeof validatedAddress === 'string'\n            ? {\n                address: validatedAddress,\n                name: '',\n                chainId: networkId,\n              }\n            : validatedAddress\n\n        updateAddressInfo(newEntry)\n\n        break\n      }\n    }\n  }\n\n  const labelStyles = useTextFieldLabelStyle()\n  const inputStyles = useTextFieldInputStyle()\n\n  return (\n    <Autocomplete<AddressBookEntry, false, false, true>\n      closeIcon={null}\n      openOnFocus={false}\n      filterOptions={filterAddressEntries}\n      freeSolo\n      onChange={onChange}\n      onInputChange={onInputChange}\n      options={addressBookEntries}\n      id=\"address-book-input\"\n      renderInput={(params) => (\n        <MuiTextField\n          {...params}\n          autoFocus\n          error={!!validationText}\n          fullWidth\n          variant=\"outlined\"\n          label={validationText ? validationText : label}\n          InputLabelProps={{ shrink: true, required: true, classes: labelStyles }}\n          InputProps={{ ...params.InputProps, classes: inputStyles }}\n          inputProps={{ ...params.inputProps, 'data-testid': 'address-book-input' }}\n        />\n      )}\n      getOptionLabel={({ address }) => address}\n      renderOption={({ address, name }) => <PrefixedEthHashInfo hash={address} name={name} showAvatar />}\n      role=\"listbox\"\n      style={{ display: 'flex', flexGrow: 1 }}\n    />\n  )\n}\n\nexport const AddressBookInput = (props: AddressBookProps): ReactElement => {\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\n  const [validationText, setValidationText] = useState<string>('')\n\n  useEffect(() => {\n    if (props.errorMsg) {\n      setValidationText(props.errorMsg)\n    }\n  }, [props.errorMsg])\n\n  return (\n    <BaseAddressBookInput\n      addressBookEntries={addressBookEntries}\n      setValidationText={setValidationText}\n      validationText={validationText}\n      {...props}\n    />\n  )\n}\n\nexport const ContractsAddressBookInput = ({\n  setIsValidAddress,\n  setSelectedEntry,\n  ...props\n}: AddressBookProps): ReactElement => {\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\n  const [filteredEntries, setFilteredEntries] = useState<AddressBookEntry[]>([])\n  const [validationText, setValidationText] = useState<string>('')\n\n  useEffect(() => {\n    const filterContractAddresses = async (): Promise<void> => {\n      const filteredADBK = await filterContractAddressBookEntries(addressBookEntries)\n      setFilteredEntries(filteredADBK)\n    }\n    filterContractAddresses()\n  }, [addressBookEntries])\n\n  const onSetSelectedEntry = async (selectedEntry) => {\n    if (selectedEntry?.address) {\n      // verify if `address` is a contract\n      const contractAddressErrorMessage = await mustBeEthereumContractAddress(selectedEntry.address)\n      setIsValidAddress(!contractAddressErrorMessage)\n      setValidationText(contractAddressErrorMessage ?? '')\n      setSelectedEntry(selectedEntry)\n    }\n  }\n\n  return (\n    <BaseAddressBookInput\n      addressBookEntries={filteredEntries}\n      setIsValidAddress={setIsValidAddress}\n      setSelectedEntry={onSetSelectedEntry}\n      setValidationText={setValidationText}\n      validationText={validationText}\n      {...props}\n    />\n  )\n}\n","import { lg, md, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n  formContainer: {\n    padding: `${md} ${lg}`,\n    wordBreak: 'break-word',\n  },\n  value: {\n    marginLeft: sm,\n  },\n  outerData: {\n    minHeight: '21px',\n  },\n  data: {\n    wordBreak: 'break-all',\n    overflow: 'auto',\n    fontSize: '16px',\n    fontFamily: 'Averta',\n    maxHeight: '100px',\n    letterSpacing: 'normal',\n    fontStretch: 'normal',\n    lineHeight: '1.43',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n  dataInput: {\n    '& TextField-root-294': {\n      lineHeight: 'auto',\n      border: 'green',\n    },\n  },\n  selectAddress: {\n    cursor: 'pointer',\n  },\n  fullWidth: {\n    justifyContent: 'space-between',\n  },\n})\n","import { createStyles, makeStyles } from '@material-ui/core/styles'\nimport { ReactElement } from 'react'\n\nimport Field from 'src/components/forms/Field'\nimport TextField from 'src/components/forms/TextField'\n\nconst styles = createStyles({\n  textarea: {\n    '& > div': {\n      height: '140px',\n      paddingTop: '0',\n      paddingBottom: '0',\n      alignItems: 'auto',\n      '& > textarea': {\n        fontSize: '15px',\n        letterSpacing: '-0.5px',\n        lineHeight: '20px',\n        height: '102px',\n      },\n    },\n  },\n})\n\nconst useStyles = makeStyles(styles)\n\nexport const TextAreaField = ({ ...props }): ReactElement => {\n  const classes = useStyles()\n  return <Field {...props} className={classes.textarea} component={TextField} multiline rows=\"5\" />\n}\n","import { useField, useFormState } from 'react-final-form'\n\nimport { ButtonStatus, Modal } from 'src/components/Modal'\nimport { isReadMethod } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils'\n\nexport interface ButtonProps {\n  onClose: () => void\n  requiresMethod?: boolean\n}\n\nconst Buttons = ({ onClose, requiresMethod }: ButtonProps): React.ReactElement => {\n  const {\n    input: { value: method },\n  } = useField('selectedMethod', { subscription: { value: true } })\n  const { modifiedSinceLastSubmit, submitError, submitting, valid, validating } = useFormState({\n    subscription: {\n      modifiedSinceLastSubmit: true,\n      submitError: true,\n      submitting: true,\n      valid: true,\n      validating: true,\n    },\n  })\n\n  return (\n    <Modal.Footer>\n      <Modal.Footer.Buttons\n        cancelButtonProps={{ onClick: onClose }}\n        confirmButtonProps={{\n          disabled:\n            submitting ||\n            validating ||\n            ((!valid || !!submitError) && !modifiedSinceLastSubmit) ||\n            (requiresMethod && !method),\n          status: submitting || validating ? ButtonStatus.LOADING : ButtonStatus.READY,\n          testId: `${isReadMethod(method) ? 'call' : 'review'}-tx-btn`,\n          text: isReadMethod(method) ? 'Call' : 'Review',\n        }}\n      />\n    </Modal.Footer>\n  )\n}\n\nexport default Buttons\n","import { makeStyles } from '@material-ui/core/styles'\nimport { useState } from 'react'\nimport { useFormState, useField } from 'react-final-form'\n\nimport { ScanQRWrapper } from 'src/components/ScanQRModal/ScanQRWrapper'\nimport { ContractsAddressBookInput } from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput'\nimport Field from 'src/components/forms/Field'\nimport TextField from 'src/components/forms/TextField'\nimport {\n  composeValidators,\n  mustBeEthereumAddress,\n  mustBeEthereumContractAddress,\n  required,\n  Validator,\n} from 'src/components/forms/validator'\nimport Col from 'src/components/layout/Col'\nimport Row from 'src/components/layout/Row'\nimport { styles } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/style'\n\nconst useStyles = makeStyles(styles)\n\nexport interface EthAddressInputProps {\n  isContract?: boolean\n  isRequired?: boolean\n  name: string\n  onScannedValue: (scannedValue: string) => void\n  text: string\n}\n\nexport const EthAddressInput = ({\n  isContract = true,\n  isRequired = true,\n  name,\n  onScannedValue,\n  text,\n}: EthAddressInputProps): React.ReactElement => {\n  const classes = useStyles()\n  const validatorsList = [\n    isRequired && required,\n    mustBeEthereumAddress,\n    isContract && mustBeEthereumContractAddress,\n  ] as Validator[]\n  const validate = composeValidators(...validatorsList.filter((validator) => validator))\n  const { pristine } = useFormState({ subscription: { pristine: true } })\n  const {\n    input: { value },\n  } = useField('contractAddress', { subscription: { value: true } })\n  const [selectedEntry, setSelectedEntry] = useState<{ address?: string; name?: string | null } | null>({\n    address: value,\n    name: '',\n  })\n\n  const handleScan = (value, closeQrModal) => {\n    let scannedAddress = value\n\n    if (scannedAddress.startsWith('ethereum:')) {\n      scannedAddress = scannedAddress.replace('ethereum:', '')\n    }\n\n    setSelectedEntry({ address: scannedAddress })\n    onScannedValue(scannedAddress)\n    closeQrModal()\n  }\n\n  const handleInputChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    const { value } = event.target\n    setSelectedEntry({ address: value })\n  }\n\n  return (\n    <Row margin=\"md\">\n      <Col xs={11}>\n        {selectedEntry?.address ? (\n          <Field\n            component={TextField}\n            name={name}\n            placeholder={text}\n            onChange={handleInputChange}\n            testId={name}\n            label={text}\n            type=\"text\"\n            validate={validate}\n          />\n        ) : (\n          <ContractsAddressBookInput\n            setSelectedEntry={setSelectedEntry}\n            setIsValidAddress={() => {}}\n            fieldMutator={onScannedValue}\n            pristine={pristine}\n            label=\"Contract address\"\n          />\n        )}\n      </Col>\n      <Col center=\"xs\" className={classes} middle=\"xs\" xs={1}>\n        <ScanQRWrapper handleScan={handleScan} />\n      </Col>\n    </Row>\n  )\n}\n"],"sourceRoot":""}