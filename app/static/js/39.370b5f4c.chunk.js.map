{"version":3,"sources":["components/WhenFieldChanges/index.tsx","routes/safe/components/Balances/SendModal/screens/SendCollectible/style.ts","routes/safe/components/Balances/SendModal/screens/SendCollectible/CollectibleSelectField/index.tsx","routes/safe/components/Balances/SendModal/screens/SendCollectible/TokenSelectField/index.tsx","routes/safe/components/Balances/SendModal/screens/SendCollectible/index.tsx","routes/safe/components/Balances/SendModal/utils.tsx","assets/icons/qrcode.svg","components/ScanQRModal/style.ts","components/ScanQRModal/index.tsx","components/ScanQRModal/ScanQRWrapper/index.tsx","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","components/forms/SelectField/index.tsx","../node_modules/react-final-form-listeners/dist/react-final-form-listeners.es.js","routes/safe/components/Balances/SendModal/screens/AddressBookInput/style.ts","routes/safe/components/Balances/SendModal/screens/AddressBookInput/index.tsx","logic/collectibles/store/selectors/index.ts"],"names":["WhenFieldChanges","field","set","to","name","subscription","onChange","input","styles","createStyles","qrCodeBtn","cursor","formContainer","padding","md","lg","buttonRow","height","justifyContent","gap","selectedTokenStyles","container","background","width","tokenData","margin","lineHeight","tokenImage","display","marginRight","sm","selectStyles","selectMenu","paddingRight","useSelectedCollectibleStyles","makeStyles","SelectedCollectible","tokenId","tokens","classes","token","find","id","shortener","textShortener","charsStart","charsEnd","MenuItem","className","disableRipple","ListItemIcon","Img","alt","description","onError","setImageToPlaceholder","src","image","ListItemText","primary","secondary","toString","Paragraph","color","size","style","opacity","weight","noMargin","useCollectibleSelectFieldStyles","CollectibleSelectField","initialValue","Field","component","SelectField","disabled","length","displayEmpty","renderValue","nftTokenId","validate","required","map","value","assetAddress","useSelectedTokenStyles","SelectedToken","assets","asset","numberOfTokens","formatAmount","symbol","useTokenSelectFieldStyles","TokenSelectField","tokenClasses","assetsAddresses","Object","keys","slug","formMutators","setMax","args","state","utils","changeValue","onTokenChange","setRecipient","useStyles","SendCollectible","initialValues","onClose","onNext","recipientAddress","selectedToken","nftAssets","useSelector","nftAssetsSelector","nftTokens","nftTokensSelector","addressBook","currentNetworkAddressBook","useState","addressErrorMsg","setAddressErrorMsg","defaultEntry","address","predefinedAddress","addressBookEntry","sameAddress","selectedEntry","setSelectedEntry","pristine","setPristine","isValidAddress","setIsValidAddress","useMemo","ModalHeader","subTitle","getStepTitle","title","Hairline","GnoForm","onSubmit","values","recipientName","assetName","formState","mutators","selectedNFTTokens","filter","nftToken","handleScan","closeQrModal","scannedAddress","startsWith","replace","scannedName","addressErrorMessage","mustBeEthereumAddress","shouldDisableSubmitButton","Block","SafeInfo","text","Divider","withArrow","onKeyDown","e","sameString","key","onClick","role","tabIndex","Row","align","Col","xs","PrefixedEthHashInfo","hash","strongName","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","AddressBookInput","fieldMutator","errorMsg","center","middle","ScanQRWrapper","between","tokenAddress","Modal","Footer","Buttons","cancelButtonProps","confirmButtonProps","testId","currentStep","totalSteps","heading","maxHeight","boxSizing","loaderContainer","close","secondaryText","detailsContainer","backgroundColor","button","marginLeft","ScanQRModal","isOpen","onScan","fileUploadModalOpen","setFileUploadModalOpen","error","setError","cameraBlocked","setCameraBlocked","scannerRef","React","openImageDialog","current","useEffect","onFileScannedResolve","successData","console","handleClose","open","grow","IconButton","layout","legacyMode","err","data","ref","facingMode","Button","minWidth","variant","qrModalOpen","setQrModalOpen","QRIcon","Wrapper","styled","div","StyledDivider","DividerSRC","StyledIcon","Icon","type","StyledBlock","border","currentSafeWithNames","safeAddress","ethBalance","safeName","nativeCurrency","getNativeCurrency","SelectInput","disableError","formControlProps","restInput","label","meta","rest","showError","submitError","dirtySinceLastSubmit","touched","inputProps","htmlFor","_extends","assign","target","i","arguments","source","prototype","hasOwnProperty","call","apply","this","_inheritsLoose","subClass","superClass","create","constructor","__proto__","Component","OnChangeState","_React$Component","props","_this","previous","_proto","componentDidUpdate","_this$props","children","setState","render","OnChange","_ref","createElement","allowNull","useTextFieldLabelStyle","root","overflow","useTextFieldInputStyle","BaseAddressBookInput","addressBookEntries","setValidationText","validationText","networkId","currentChainId","updateAddressInfo","addressEntry","validateAddress","fullAddress","parsePrefixedAddress","checkedAddr","checksumAddress","filteredEntries","filterAddressEntries","inputValue","onInputChange","_","reason","a","normalizedValue","trimSpaces","hasFeature","FEATURES","DOMAIN_LOOKUP","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","logError","Errors","_101","message","validatedAddress","chainId","labelStyles","inputStyles","Autocomplete","closeIcon","openOnFocus","filterOptions","freeSolo","options","renderInput","params","autoFocus","fullWidth","InputLabelProps","shrink","InputProps","getOptionLabel","renderOption","flexGrow","ContractsAddressBookInput","setFilteredEntries","filterContractAddresses","filterContractAddressBookEntries","filteredADBK","onSetSelectedEntry","mustBeEthereumContractAddress","contractAddressErrorMessage","NFT_ASSETS_REDUCER_ID","NFT_TOKENS_REDUCER_ID","createSelector","items","nftLoadedSelector","loaded","nftAssetsToListSelector","nftAssetsAddressFromNftTokensSelector","userNftTokens","addresses","uniqueAddresses","Set","Array","from","orderedNFTAssets","sort","b","localeCompare","nftAssetsFromNftTokensSelector","nftAssetsFromNftTokens","includes"],"mappings":"uQAkBeA,EAdU,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,IAAKC,EAAf,EAAeA,GAAf,OACvB,cAAC,IAAD,CAAUC,KAAMF,EAAKG,aAAc,GAAnC,SACG,gBAEYC,EAFZ,EAEGC,MAASD,SAFZ,OAIC,cAAC,IAAD,CAAUF,KAAMH,EAAhB,SACG,WACCK,EAASH,U,mHCTNK,EAASC,YAAa,CACjCC,UAAW,CACTC,OAAQ,WAEVC,cAAe,CACbC,QAAQ,GAAD,OAAKC,KAAL,YAAWC,OAEpBC,UAAW,CACTC,OAAQ,OACRC,eAAgB,SAChBC,IAAK,UAIIC,EAAsBX,YAAa,CAC9CY,UAAW,CACTC,WAAY,kBACZT,QAAS,IACTU,MAAO,QAETC,UAAW,CACTX,QAAS,EACTY,OAAQ,EACRC,WAAY,QAEdC,WAAY,CACVC,QAAS,QACTC,YAAaC,KACbb,OAAQ,GACRM,MAAO,UAIEQ,EAAetB,YAAa,CACvCuB,WAAY,CACVC,aAAc,GAEhBN,WAAY,CACVE,YAAaC,Q,qCCzBXI,EAA+BC,YAAWf,GAO1CgB,EAAsB,SAAC,GAAuE,IAArEC,EAAoE,EAApEA,QAASC,EAA2D,EAA3DA,OAChCC,EAAUL,IACVM,EAAQH,GAAWC,EAASA,EAAOG,MAAK,gBAAYC,EAAZ,EAAGL,QAAH,OAAqBA,IAAYK,KAAM,KAC/EC,EAAYC,YAAc,CAAEC,WAAY,GAAIC,SAAU,IAE5D,OACE,cAACC,EAAA,EAAD,CAAUC,UAAWT,EAAQlB,UAAW4B,eAAa,EAArD,SACGT,EACC,qCACE,cAACU,EAAA,EAAD,CAAcF,UAAWT,EAAQZ,WAAjC,SACE,cAACwB,EAAA,EAAD,CAAKC,IAAKZ,EAAMa,YAAapC,OAAQ,GAAIqC,QAASC,IAAuBC,IAAKhB,EAAMiB,UAEtF,cAACC,EAAA,EAAD,CACEV,UAAWT,EAAQf,UACnBmC,QAAShB,EAAUH,EAAMpC,MACzBwD,UAAS,oBAAejB,EAAUH,EAAMH,QAAQwB,kBAIpD,cAACC,EAAA,EAAD,CAAWC,MAAM,WAAWC,KAAK,KAAKC,MAAO,CAAEC,QAAS,IAAOC,OAAO,QAAQC,UAAQ,EAAtF,gCAQFC,EAAkClC,YAAWJ,GAOtCuC,EAAyB,SAAC,GAA+E,IAA7EC,EAA4E,EAA5EA,aAAcjC,EAA8D,EAA9DA,OAC/CC,EAAU8B,IAEhB,OACE,cAACG,EAAA,EAAD,CACExB,UAAWT,EAAQP,WACnByC,UAAWC,IACXC,UAAWrC,EAAOsC,OAClBL,aAAcA,EACdnE,KAAK,aACLyE,cAAY,EACZC,YAAa,SAACC,GAAD,OAAgB,cAAC,EAAD,CAAqB1C,QAAS0C,EAAYzC,OAAQA,KAC/E0C,SAAUC,IARZ,SAUG3C,EAAO4C,KAAI,SAAC1C,GAAD,OACV,eAACO,EAAA,EAAD,CAAyDoC,MAAO3C,EAAMH,QAAtE,UACE,cAACa,EAAA,EAAD,CAAcF,UAAWT,EAAQZ,WAAjC,SACE,cAACwB,EAAA,EAAD,CAAKC,IAAKZ,EAAMpC,KAAMa,OAAQ,GAAIqC,QAASC,IAAuBC,IAAKhB,EAAMiB,UAE/E,cAACC,EAAA,EAAD,CAAcC,QAASnB,EAAMpC,KAAMwD,UAAS,oBAAepB,EAAMH,aAJnE,UAAkBG,EAAM4C,aAAxB,YAAwC5C,EAAMH,gB,SCvDhDgD,EAAyBlD,YAAWf,GAOpCkE,EAAgB,SAAC,GAAsE,IAApEF,EAAmE,EAAnEA,aAAcG,EAAqD,EAArDA,OAC/BhD,EAAU8C,IACVG,EAAQJ,EAAeG,EAAOH,GAAgB,KAC9CzC,EAAYC,YAAc,CAAEC,WAAY,GAAIC,SAAU,IAE5D,OACE,cAACC,EAAA,EAAD,CAAUC,UAAWT,EAAQlB,UAAW4B,eAAa,EAArD,SACGuC,GAASA,EAAMC,eACd,qCACE,cAACvC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKH,UAAWT,EAAQZ,WAAYyB,IAAKoC,EAAMpF,KAAMkD,QAASC,IAAuBC,IAAKgC,EAAM/B,UAElG,cAACC,EAAA,EAAD,CACEV,UAAWT,EAAQf,UACnBmC,QAAShB,EAAU6C,EAAMpF,MACzBwD,UAAS,UAAK8B,YAAaF,EAAMC,eAAe5B,YAAvC,YAAsD2B,EAAMG,aAIzE,cAAC7B,EAAA,EAAD,CAAWC,MAAM,WAAWC,KAAK,KAAKC,MAAO,CAAEC,QAAS,IAAOC,OAAO,QAAQC,UAAQ,EAAtF,iCAQFwB,EAA4BzD,YAAWJ,GA+C9B8D,EAxCU,SAAC,GAAyE,IAAvEN,EAAsE,EAAtEA,OAAQhB,EAA8D,EAA9DA,aAC5BhC,EAAUqD,IACVE,EAAeT,IACfU,EAAkBC,OAAOC,KAAKV,GAEpC,OACE,cAACf,EAAA,EAAD,CACExB,UAAWT,EAAQP,WACnByC,UAAWC,IACXC,UAAWoB,EAAgBnB,OAC3BL,aAAcA,EACdnE,KAAK,eACLyE,cAAY,EACZC,YAAa,SAACM,GAAD,OAAkB,cAAC,EAAD,CAAeA,aAAcA,EAAcG,OAAQA,KAClFP,SAAUC,IARZ,SAUGc,EAAgBb,KAAI,SAACE,GACpB,IAAMI,EAAQD,EAAOH,GAErB,OACE,eAACrC,EAAA,EAAD,CAA2BoC,MAAOC,EAAlC,UACE,cAAClC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEH,UAAW8C,EAAanE,WACxByB,IAAKoC,EAAMpF,KACXkD,QAASC,IACTC,IAAKgC,EAAM/B,UAGf,cAACC,EAAA,EAAD,CACEC,QAAS6B,EAAMpF,KACfwD,UAAS,iBAAY8B,YAAaF,EAAMC,eAAe5B,YAA9C,YAA6D2B,EAAMG,YAXjEH,EAAMU,Y,mBC9CzBC,EAAe,CACnBC,OAAQ,SAACC,EAAMC,EAAOC,GACpBA,EAAMC,YAAYF,EAAO,UAAU,kBAAMD,EAAK,OAEhDI,cAAe,SAACJ,EAAMC,EAAOC,GAC3BA,EAAMC,YAAYF,EAAO,UAAU,iBAAM,OAE3CI,aAAc,SAACL,EAAMC,EAAOC,GAC1BA,EAAMC,YAAYF,EAAO,oBAAoB,kBAAMD,EAAK,QAItDM,EAAYxE,YAAW3B,GAiNdoG,UA/LS,SAAC,GAMwB,IAL/CC,EAK8C,EAL9CA,cACAC,EAI8C,EAJ9CA,QACAC,EAG8C,EAH9CA,OACAC,EAE8C,EAF9CA,iBACAC,EAC8C,EAD9CA,cAEM1E,EAAUoE,IACVO,EAAYC,YAAYC,KACxBC,EAAYF,YAAYG,KACxBC,EAAcJ,YAAYK,KAChC,EAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA0CF,oBAAmD,WAAO,IAAD,EAC3FG,EAAe,CAAEC,QAASb,GAAoB,GAAI5G,KAAM,IAG9D,KAAI,OAACyG,QAAD,IAACA,OAAD,EAACA,EAAeG,oBAAqBA,EACvC,OAAOY,EAIT,IAAME,EAAiB,iBAAGjB,QAAH,IAAGA,OAAH,EAAGA,EAAeG,wBAAlB,QAAsCA,EACvDe,EAAmBR,EAAY9E,MAAK,YAAkB,IAAfoF,EAAc,EAAdA,QAC3C,OAAOG,YAAYF,EAAmBD,MAIxC,OAAIE,GAKGH,KApBT,mBAAOK,EAAP,KAAsBC,EAAtB,KAsBA,EAAgCT,oBAAS,GAAzC,mBAAOU,EAAP,KAAiBC,EAAjB,KACA,EAA4CX,oBAAS,GAArD,mBAAOY,EAAP,KAAuBC,GAAvB,KAEAC,mBAAQ,WACgB,OAAlBN,GAA0BE,GAC5BC,GAAY,KAEb,CAACH,EAAeE,IAanB,OACE,qCACE,cAACK,EAAA,EAAD,CAAa1B,QAASA,EAAS2B,SAAUC,YAAa,EAAG,GAAIC,MAAM,aACnE,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAS1C,aAAcA,EAAcU,cAAeA,EAAeiC,SAflD,SAACC,GAEfA,EAAO/B,mBACV+B,EAAO/B,iBAAP,OAA0BiB,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAeJ,SAE3CkB,EAAOC,cAAP,OAAuBf,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAe7H,KACtC2I,EAAOE,UAAY/B,EAAU6B,EAAO3D,cAAchF,KAElD2G,EAAOgC,IAOL,SACG,WAAc,IAAD,EACNG,EAAS,wCACTC,EAAQ,wCACN/D,EAAiB8D,EAAUH,OAA3B3D,aACFgE,EAAoB/B,EAAUgC,QAAO,SAACC,GAAD,OAAcA,EAASlE,eAAiBA,KAE7EmE,EAAa,SAACpE,EAAOqE,GAAkB,IAAD,EACtCC,EAAiBtE,EAEjBsE,EAAeC,WAAW,eAC5BD,EAAiBA,EAAeE,QAAQ,YAAa,KAEvD,IAAMC,EAAW,UAAGrC,EAAY9E,MAAK,YAAkB,IAAfoF,EAAc,EAAdA,QACtC,OAAOG,YAAYyB,EAAgB5B,aADpB,aAAG,EAEhBzH,KACEyJ,EAAsBC,YAAsBL,GAC7CI,EAOElC,EAAmBkC,IANxBV,EAASzC,aAAa+C,GACtBvB,EAAiB,CACf9H,KAAMwJ,GAAe,GACrB/B,QAAS4B,IAEX9B,EAAmB,KAGrB6B,KAGEO,GAA6B1B,EAMjC,OAJIJ,IACF8B,GAA6B9B,EAAcJ,SAI3C,qCACE,cAAC,EAAD,CAAkB5H,MAAM,eAAeC,IAAI,aAAaC,GAAI,KAC5D,eAAC6J,EAAA,EAAD,CAAOhH,UAAWT,EAAQ3B,cAA1B,UACE,cAACqJ,EAAA,EAAD,CAAUC,KAAK,iBACf,cAACC,EAAA,EAAD,CAASC,WAAS,IACjBnC,GAAiBA,EAAcJ,QAC9B,sBACEwC,UAAW,SAACC,GACNC,YAAWD,EAAEE,IAAK,QAGtBtC,EAAiB,CAAEL,QAAS,GAAIzH,KAAM,MAExCqK,QAAS,WACPvC,EAAiB,CAAEL,QAAS,GAAIzH,KAAM,MAExCsK,KAAK,UACLC,SAAU,EAXZ,UAaE,cAACC,EAAA,EAAD,CAAKnJ,OAAO,KAAZ,SACE,cAACqC,EAAA,EAAD,CAAWC,MAAM,WAAWK,UAAQ,EAACJ,KAAK,KAA1C,yBAIF,cAAC4G,EAAA,EAAD,CAAKC,MAAM,SAASpJ,OAAO,KAA3B,SACE,cAACqJ,EAAA,EAAD,CAAKC,GAAI,GAAT,SACE,cAACC,EAAA,EAAD,CACEC,KAAMhD,EAAcJ,QACpBzH,KAAM6H,EAAc7H,KACpB8K,YAAU,EACVC,YAAU,EACVC,aAAW,EACXC,YAAaC,YAAgBrD,EAAcJ,kBAMnD,eAAC+C,EAAA,EAAD,CAAKnJ,OAAO,KAAZ,UACE,cAACqJ,EAAA,EAAD,CAAKC,GAAI,GAAT,SACE,cAACQ,EAAA,EAAD,CACEC,aAAcrC,EAASzC,aACvByB,SAAUA,EACVsD,SAAU/D,EACVY,kBAAmBA,GACnBJ,iBAAkBA,MAGtB,cAAC4C,EAAA,EAAD,CAAKY,OAAO,KAAK1I,UAAWT,EAASoJ,OAAO,KAAKZ,GAAI,EAArD,SACE,cAACa,EAAA,EAAD,CAAerC,WAAYA,SAIjC,cAACqB,EAAA,EAAD,CAAKnJ,OAAO,KAAZ,SACE,cAACqJ,EAAA,EAAD,CAAKe,QAAQ,KAAb,SACE,cAAC/H,EAAA,EAAD,CAAWC,MAAM,WAAWK,UAAQ,EAACJ,KAAK,KAA1C,gCAKJ,cAAC4G,EAAA,EAAD,CAAKnJ,OAAO,KAAZ,SACE,cAACqJ,EAAA,EAAD,UACE,cAAC,EAAD,CACEvF,OAAQ2B,EACR3C,aAAY,iBACT0C,QADS,IACTA,OADS,EACTA,EAA4B7B,oBADnB,eACoC6B,QADpC,IACoCA,OADpC,EACoCA,EAAkC6E,mBAKxF,cAAClB,EAAA,EAAD,CAAKnJ,OAAO,KAAZ,SACE,cAACqJ,EAAA,EAAD,CAAKe,QAAQ,KAAb,SACE,cAAC/H,EAAA,EAAD,CAAWC,MAAM,WAAWK,UAAQ,EAACJ,KAAK,KAA1C,0BAKJ,cAAC4G,EAAA,EAAD,CAAKnJ,OAAO,KAAZ,SACE,cAACqJ,EAAA,EAAD,UACE,cAAC,EAAD,CAAwBvG,aAAY,OAAE0C,QAAF,IAAEA,OAAF,EAAEA,EAAe5E,QAASC,OAAQ8G,WAI5E,cAAC2C,EAAA,EAAMC,OAAP,UACE,cAACD,EAAA,EAAMC,OAAOC,QAAd,CACEC,kBAAmB,CAAEzB,QAAS3D,GAC9BqF,mBAAoB,CAAExH,SAAUoF,EAA2BqC,OAAQ,gBAAiBlC,KAAM,yB,kCClP5G,kCAAO,IAAMxB,EAAe,SAAC2D,EAAqBC,GAAtB,qBAA6DD,EAA7D,eAA+EC,K,gGCA5F,MAA0B,mC,8DCG5B9L,EAASC,YAAa,CACjC8L,QAAS,CACP1L,QAASE,KACTG,eAAgB,gBAChBsL,UAAW,OACXC,UAAW,cAEbC,gBAAiB,CACfnL,MAAO,OACPN,OAAQ,QAEV0L,MAAO,CACL1L,OAAQ,OACRM,MAAO,OACPwC,MAAO6I,iBAETC,iBAAkB,CAChBC,gBAAiBxL,aACjBkL,UAAW,SAEbxL,UAAW,CACTC,OAAQ,OACRC,eAAgB,UAElB6L,OAAQ,CACN,eAAgB,CACdC,WAAYlL,S,mECZZ6E,EAAYxE,YAAW3B,GAQhByM,EAAc,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,OAAQpG,EAAiD,EAAjDA,QAASqG,EAAwC,EAAxCA,OACvC5K,EAAUoE,IAChB,EAAsDc,oBAAkB,GAAxE,mBAAO2F,EAAP,KAA4BC,EAA5B,KACA,EAA0B5F,mBAAwB,MAAlD,mBAAO6F,EAAP,KAAcC,EAAd,KACA,EAA0C9F,oBAAkB,GAA5D,mBAAO+F,EAAP,KAAsBC,EAAtB,KACMC,EAAkBC,cAClBC,EAAkBD,eAAkB,WACxCD,EAAWG,QAAQD,oBAClB,CAACF,IAEJI,qBAAU,WACHV,IAAuBI,GAAkBF,IAC5CD,GAAuB,GACvBO,OAED,CAACJ,EAAeI,EAAiBR,EAAqBC,EAAwBC,IAEjF,IAAMS,EAAuB,SAACT,EAAqBU,GACjD,GAAIV,EASF,OARAW,QAAQX,MAAM,gBAAiBA,QAEZ,oBAAfA,EAAMlN,MAA6C,6BAAfkN,EAAMlN,MAC5CqN,GAAiB,GACjBJ,GAAuB,IAEvBE,EAAS,6BAKTS,EACFb,EAAOa,GACER,GACTD,EAAS,6BAIb,OACE,eAACxB,EAAA,EAAD,CAAO1I,YAAY,sBAAsB6K,YAAapH,EAASqH,KAAMjB,EAAQvE,MAAM,iBAAnF,UACE,eAACiC,EAAA,EAAD,CAAKC,MAAM,SAAS7H,UAAWT,EAAQgK,QAAS6B,MAAI,EAApD,UACE,cAACtK,EAAA,EAAD,CAAWM,UAAQ,EAACJ,KAAK,KAAzB,qBAGA,cAACqK,EAAA,EAAD,CAAYpL,eAAa,EAACwH,QAAS3D,EAAnC,SACE,cAAC,IAAD,CAAO9D,UAAWT,EAAQoK,aAG9B,cAAC/D,EAAA,EAAD,IACA,eAACkC,EAAA,EAAD,CAAK9H,UAAWT,EAAQsK,iBAAkByB,OAAO,SAAS3C,OAAO,KAAjE,UACG2B,GACC,cAACtD,EAAA,EAAD,CAAOnJ,QAAQ,KAAKY,OAAO,KAA3B,SACG6L,IAGL,cAAC,IAAD,CACEiB,WAAYf,EACZlK,QAAS,SAACkL,GAAD,OAAgBT,EAAqBS,EAAK,OACnDrB,OAAQ,SAACsB,GAAD,OAAkBV,EAAqB,KAAMU,IACrDC,IAAKhB,EACLzJ,MAAO,CAAE1C,MAAO,QAASN,OAAQ,SACjC0N,WAAW,YAGf,cAAC/F,EAAA,EAAD,IACA,eAACgC,EAAA,EAAD,CAAKC,MAAM,SAAS7H,UAAWT,EAAQvB,UAAvC,UACE,cAAC4N,EAAA,EAAD,CAAQ5L,UAAWT,EAAQwK,OAAQhJ,MAAM,YAAY8K,SAAU,IAAKpE,QAAS3D,EAA7E,mBAGA,cAAC8H,EAAA,EAAD,CACE5L,UAAWT,EAAQwK,OACnBhJ,MAAM,UACN8K,SAAU,IACVpE,QAAS,WACPgD,GAAiB,GACjBF,EAAS,MACTF,GAAuB,IAEzByB,QAAQ,YATV,oC,SCtFFnI,EAAYxE,YAAW,CAC3BzB,UAAW,CACTC,OAAQ,aASCiL,EAAgB,SAAC,GAAiD,IAA/CrC,EAA8C,EAA9CA,WAAY6C,EAAkC,EAAlCA,OACpC7J,EAAUoE,IAChB,EAAsCc,oBAAS,GAA/C,mBAAOsH,EAAP,KAAoBC,EAApB,KAMMxF,EAAe,WACnBwF,GAAe,IAOjB,OACE,qCACE,cAAC7L,EAAA,EAAD,CACEC,IAAI,UACJJ,UAAWT,EAAQ7B,UACnBO,OAAQ,GACRwJ,QAAS,WAjBbuE,GAAe,IAkBXtE,KAAK,SACLlH,IAAKyL,EACL7C,OAAQA,GAAU,YAEnB2C,GAAe,cAAC,EAAD,CAAa7B,OAAQ6B,EAAajI,QAAS0C,EAAc2D,OAftD,SAAChI,GACtBoE,EAAWpE,EAAOqE,W,0EC3BhB0F,EAAUC,UAAOC,IAAV,0JAUPC,EAAgBF,kBAAOG,UAAPH,CAAH,4CAIbI,EAAaJ,kBAAOK,OAAPL,CAAH,6KAuBDhF,IAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACd,eAAC8E,EAAD,WACG9E,GAAa,cAACmF,EAAD,CAAYE,KAAK,YAAYzL,KAAK,OAChD,cAACqL,EAAD,S,uICzBEK,EAAcP,kBAAOnF,IAAPmF,CAAH,wOAIKQ,SAGN5E,MAyCDd,IAhCE,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,KAClB,EAA6D/C,YAAYyI,KAAxDC,EAAjB,EAAQhI,QAAsBiI,EAA9B,EAA8BA,WAAkBC,EAAhD,EAA0C3P,KACpC4P,EAAiBC,cAEvB,OACE,qCACG/F,GACC,cAAC,IAAD,CAAKzI,OAAO,KAAZ,SACE,cAAC,IAAD,CAAWsC,MAAM,WAAWK,UAAQ,EAACJ,KAAK,KAA1C,SACGkG,MAIP,cAAC,IAAD,CACEe,KAAM4E,EACNzP,KAAM2P,EACN7E,YAAU,EACVG,YAAaC,YAAgBuE,GAC7B1E,YAAU,EACVC,aAAW,IAEZ0E,GACC,cAACJ,EAAD,UACE,eAAC,IAAD,CAAWtL,UAAQ,EAAnB,sBACW,cAAC,IAAD,CAAM,cAAY,sBAAlB,mBAA4C0L,EAA5C,YAA0DE,EAAerK,oB,mNC7CxF1B,EAAQ,CACZ4K,SAAU,QAoDGqB,IAjCK,SAAC,GASa,IARhC3N,EAQ+B,EAR/BA,QACA4N,EAO+B,EAP/BA,aACAC,EAM+B,EAN/BA,iBAM+B,IAL/B7P,MAASH,EAKsB,EALtBA,KAAME,EAKgB,EALhBA,SAAU6E,EAKM,EALNA,MAAUkL,EAKJ,iBAJ/BC,EAI+B,EAJ/BA,MACAC,EAG+B,EAH/BA,KACAzL,EAE+B,EAF/BA,YACG0L,EAC4B,iBACzBC,GAAcF,EAAKG,cAAgBH,EAAKI,sBAAyBJ,EAAKjD,QAAUiD,EAAKK,UAAYT,EACjGU,EAAU,2BACXR,GADW,IAEdjQ,SAGF,OACE,eAAC,IAAD,2BAAiBgQ,GAAjB,IAAmC9C,MAAOmD,EAAWxM,MAAOA,EAA5D,UACE,cAAC,IAAD,CAAY6M,QAAS1Q,EAArB,SAA4BkQ,IAC5B,cAAC,IAAD,aACE/N,QAASA,EACTsO,WAAYA,EACZvQ,SAAUA,EACVwE,YAAaA,EACbK,MAAOA,EACP2J,QAAQ,YACJ0B,IAELC,GAAa,cAAC,IAAD,UAAiBF,EAAKjD,OAASiD,EAAKG,oB,kCCvDxD,sDAGA,SAASK,IAeP,OAdAA,EAAW/K,OAAOgL,QAAU,SAAUC,GACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUvM,OAAQsM,IAAK,CACzC,IAAIE,EAASD,UAAUD,GAEvB,IAAK,IAAI1G,KAAO4G,EACVpL,OAAOqL,UAAUC,eAAeC,KAAKH,EAAQ5G,KAC/CyG,EAAOzG,GAAO4G,EAAO5G,IAK3B,OAAOyG,GAGFF,EAASS,MAAMC,KAAMN,WAG9B,SAASO,EAAeC,EAAUC,GAChCD,EAASN,UAAYrL,OAAO6L,OAAOD,EAAWP,WAC9CM,EAASN,UAAUS,YAAcH,EACjCA,EAASI,UAAYH,EAwCrBI,YA2DAA,YAhGF,IAkHIC,EAEJ,SAAUC,GAGR,SAASD,EAAcE,GACrB,IAAIC,EAMJ,OAJAA,EAAQF,EAAiBX,KAAKE,KAAMU,IAAUV,MACxCnL,MAAQ,CACZ+L,SAAUF,EAAM5R,MAAM4E,OAEjBiN,EATTV,EAAeO,EAAeC,GAY9B,IAAII,EAASL,EAAcZ,UAoB3B,OAlBAiB,EAAOC,mBAAqB,WAC1B,IAAIC,EAAcf,KAAKU,MACnBM,EAAWD,EAAYC,SACvBtN,EAAQqN,EAAYjS,MAAM4E,MAC1BkN,EAAWZ,KAAKnL,MAAM+L,SAEtBlN,IAAUkN,IACZZ,KAAKiB,SAAS,CACZL,SAAUlN,IAEZsN,EAAStN,EAAOkN,KAIpBC,EAAOK,OAAS,WACd,OAAO,MAGFV,EAjCT,CAkCED,aAEEY,EAAW,SAAkBC,GAC/B,IAAIzS,EAAOyS,EAAKzS,KACZqS,EAAWI,EAAKJ,SACpB,OAAOK,wBAActO,IAAO,CAC1BpE,KAAMA,EACNC,aAAc,CACZ8E,OAAO,GAET4N,WAAW,EACXJ,OAAQ,SAAgBR,GACtB,OAAOW,wBAAcb,EAAelB,EAAS,GAAIoB,EAAO,CACtDM,SAAUA,SA8ChBT,a,wPC1OWgB,EAAyB7Q,YACpC1B,YAAa,CACXwS,KAAM,CACJC,SAAU,aAKHC,EAAyBhR,YACpC1B,YAAa,CACXF,MAAO,CACLM,QAAS,sB,oHC4BTuS,EAAuB,SAAC,GAQkB,IAP9CC,EAO6C,EAP7CA,mBACA7H,EAM6C,EAN7CA,aAM6C,IAL7C8E,aAK6C,MALrC,YAKqC,EAJ7ChI,EAI6C,EAJ7CA,kBACAJ,EAG6C,EAH7CA,iBACAoL,EAE6C,EAF7CA,kBACAC,EAC6C,EAD7CA,eAEMC,EAAYrM,YAAYsM,KAExBC,EAAoB,SAACC,GACzBzL,EAAiByL,GACjBnI,EAAamI,EAAa9L,UAGtB+L,EAAkB,SAACC,GACvB,IAAMhK,EAAsBC,YAAsB+J,GAGlD,GAFAvL,GAAmBuB,IAEfA,EAAJ,CAMA,IAAQhC,EAAYiM,YAAqBD,GAAjChM,QACFkM,EAAcC,YAAgBnM,IAAYA,EAC1CoM,EAAkBC,YAAqBb,EAAoB,CAAEc,WAAYJ,IAC/E,OAAkC,IAA3BE,EAAgBrP,OAAeqP,EAAgB,GAAKF,EARzDT,EAAkBzJ,IAqBhBuK,EAAuF,uCAAG,WAC9FC,EACAlP,EACAmP,GAH8F,qBAAAC,EAAA,2DAKtFD,EALsF,OAMvF,UANuF,0BAOpFE,EAAkBC,YAAWtP,GAPuD,uDAexFuP,YAAWC,WAASC,iBACnBC,YAAeL,KAAoBM,YAAwBN,GAhB4B,wBAkBpF3M,EAAU,GAlB0E,mBAoBtEkN,YAAqBP,GApBiD,QAoBtF3M,EApBsF,yDAsBtFmN,YAASC,IAAOC,KAAM,KAAIC,SAtB4D,WAyBlFC,EAAmBxB,EAAgB/L,GAzB+C,wBA4BtF2D,EAAa,IA5ByE,oCAyCxFkI,EAR8B,kBAArB0B,EACH,CACEvN,UACAzH,KAAMoU,EACNa,QAAS7B,GAEX4B,GAvCkF,gCA8CpFA,EAAmBxB,EAAgBY,GA9CiD,wBAiDxFhJ,EAAa,IAjD2E,oCA8D1FkI,EAR8B,kBAArB0B,EACH,CACEvN,QAASuN,EACThV,KAAM,GACNiV,QAAS7B,GAEX4B,GA5DoF,+EAAH,0DAqEvFE,EAActC,IACduC,EAAcpC,IAEpB,OACE,cAACqC,EAAA,EAAD,CACEC,UAAW,KACXC,aAAa,EACbC,cAAezB,IACf0B,UAAQ,EACRtV,SAxFkF,SAAC+T,EAAGlP,EAAOmP,GAC/F,GACO,kBADCA,EACN,CACE,MAAmCnP,EAA3B0C,EAAR,EAAQA,QAASzH,EAAjB,EAAiBA,KAAMiV,EAAvB,EAAuBA,QACvB3B,EAAkB,CAAE7L,UAASzH,OAAMiV,cAqFrCjB,cAAeA,EACfyB,QAASxC,EACT3Q,GAAG,qBACHoT,YAAa,SAACC,GAAD,OACX,cAAC,IAAD,2BACMA,GADN,IAEEC,WAAS,EACT1I,QAASiG,EACT0C,WAAS,EACTnH,QAAQ,WACRwB,MAAOiD,GAAkCjD,EACzC4F,gBAAiB,CAAEC,QAAQ,EAAMlR,UAAU,EAAM1C,QAAS+S,GAC1Dc,WAAU,2BAAOL,EAAOK,YAAd,IAA0B7T,QAASgT,IAC7C1E,WAAU,2BAAOkF,EAAOlF,YAAd,IAA0B,cAAe,2BAGvDwF,eAAgB,qBAAGxO,SACnByO,aAAc,gBAAGzO,EAAH,EAAGA,QAASzH,EAAZ,EAAYA,KAAZ,OAAuB,cAAC4K,EAAA,EAAD,CAAqBC,KAAMpD,EAASzH,KAAMA,EAAM+K,YAAU,KAC/FT,KAAK,UACLzG,MAAO,CAAErC,QAAS,OAAQ2U,SAAU,MAK7BhL,EAAmB,SAAC4G,GAC/B,IAAMkB,EAAqBlM,YAAYK,KACvC,EAA4CC,mBAAiB,IAA7D,mBAAO8L,EAAP,KAAuBD,EAAvB,KAQA,OANAxF,qBAAU,WACJqE,EAAM1G,UACR6H,EAAkBnB,EAAM1G,YAEzB,CAAC0G,EAAM1G,WAGR,cAAC,EAAD,aACE4H,mBAAoBA,EACpBC,kBAAmBA,EACnBC,eAAgBA,GACZpB,KAKGqE,EAA4B,SAAC,GAIH,IAHrClO,EAGoC,EAHpCA,kBACAJ,EAEoC,EAFpCA,iBACGiK,EACiC,iBAC9BkB,EAAqBlM,YAAYK,KACvC,EAA8CC,mBAA6B,IAA3E,mBAAOwM,EAAP,KAAwBwC,EAAxB,KACA,EAA4ChP,mBAAiB,IAA7D,mBAAO8L,EAAP,KAAuBD,EAAvB,KAEAxF,qBAAU,WACR,IAAM4I,EAAuB,uCAAG,4BAAAnC,EAAA,sEACHoC,YAAiCtD,GAD9B,OACxBuD,EADwB,OAE9BH,EAAmBG,GAFW,2CAAH,qDAI7BF,MACC,CAACrD,IAEJ,IAAMwD,EAAkB,uCAAG,WAAO5O,GAAP,eAAAsM,EAAA,kEACrBtM,QADqB,IACrBA,OADqB,EACrBA,EAAeJ,SADM,gCAGmBiP,YAA8B7O,EAAcJ,SAH/D,OAGjBkP,EAHiB,OAIvBzO,GAAmByO,GACnBzD,EAAiB,OAACyD,QAAD,IAACA,IAA+B,IACjD7O,EAAiBD,GANM,2CAAH,sDAUxB,OACE,cAAC,EAAD,aACEoL,mBAAoBY,EACpB3L,kBAAmBA,EACnBJ,iBAAkB2O,EAClBvD,kBAAmBA,EACnBC,eAAgBA,GACZpB,M,kCChPV,+LAKajL,EAAY,SAACZ,GAAD,OAAqCA,EAAM0Q,MACvD3P,EAAY,SAACf,GAAD,OAA0CA,EAAM2Q,MAE5D7P,EAAoB8P,YAAehQ,GAAW,SAAC3B,GAAD,OAAYA,KAE1D+B,EAAoB4P,YAAe7P,GAAW,SAAC/E,GAAD,OAAYA,EAAO6U,SAEjEC,EAAoBF,YAAe7P,GAAW,SAAC/E,GAAD,OAAYA,EAAO+U,UAExEC,EAA0BJ,YAAehQ,GAAW,SAAC3B,GACzD,OAAOA,EAASS,OAAO+C,OAAOxD,GAAU,MAGpCgS,EAAwCL,YAAe5P,GAAmB,SAACkQ,GAC/E,IAAMC,EAAYD,EAActS,KAAI,SAACoE,GAAD,OAAcA,EAASlE,gBACrDsS,EAAkB,IAAIC,IAAIF,GAChC,OAAOG,MAAMC,KAAKH,MAGPI,EAAmBZ,YAC9B5P,GACA,SAACkQ,GAAD,OAA8BA,EAAcO,MAAK,SAACxD,EAAGyD,GAAJ,OAAUzD,EAAEnU,KAAK6X,cAAcD,EAAE5X,YAGvE8X,EAAiChB,YAC5CI,EACAC,GACA,SAACrQ,EAAWiR,GACV,OAAOjR,EACJ6Q,MAAK,SAACxD,EAAGyD,GAAJ,OAAUzD,EAAEnU,KAAK6X,cAAcD,EAAE5X,SACtCiJ,QAAO,gBAAGxB,EAAH,EAAGA,QAAH,OAAiBsQ,EAAuBC,SAASvQ","file":"static/js/39.370b5f4c.chunk.js","sourcesContent":["import { OnChange } from 'react-final-form-listeners'\n\nimport GnoField from 'src/components/forms/Field'\n\nconst WhenFieldChanges = ({ field, set, to }: { field: string; set: string; to: string }): React.ReactElement => (\n  <GnoField name={set} subscription={{}}>\n    {(\n      // No subscription. We only use Field to get to the change function\n      { input: { onChange } },\n    ) => (\n      <OnChange name={field}>\n        {() => {\n          onChange(to)\n        }}\n      </OnChange>\n    )}\n  </GnoField>\n)\nexport default WhenFieldChanges\n","import { lg, md, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n  formContainer: {\n    padding: `${md} ${lg}`,\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n})\n\nexport const selectedTokenStyles = createStyles({\n  container: {\n    background: 'none !important',\n    padding: '0',\n    width: '100%',\n  },\n  tokenData: {\n    padding: 0,\n    margin: 0,\n    lineHeight: '14px',\n  },\n  tokenImage: {\n    display: 'block',\n    marginRight: sm,\n    height: 28,\n    width: 'auto',\n  },\n})\n\nexport const selectStyles = createStyles({\n  selectMenu: {\n    paddingRight: 0,\n  },\n  tokenImage: {\n    marginRight: sm,\n  },\n})\n","import ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport { selectStyles, selectedTokenStyles } from '../style'\n\nimport Field from 'src/components/forms/Field'\nimport SelectField from 'src/components/forms/SelectField'\nimport { required } from 'src/components/forms/validator'\nimport Img from 'src/components/layout/Img'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport { textShortener } from 'src/utils/strings'\nimport { NFTToken } from 'src/logic/collectibles/sources/collectibles.d'\n\nconst useSelectedCollectibleStyles = makeStyles(selectedTokenStyles)\n\ntype SelectedCollectibleProps = {\n  tokenId?: number | string\n  tokens: NFTToken[]\n}\n\nconst SelectedCollectible = ({ tokenId, tokens }: SelectedCollectibleProps): React.ReactElement => {\n  const classes = useSelectedCollectibleStyles()\n  const token = tokenId && tokens ? tokens.find(({ tokenId: id }) => tokenId === id) : null\n  const shortener = textShortener({ charsStart: 40, charsEnd: 0 })\n\n  return (\n    <MenuItem className={classes.container} disableRipple>\n      {token ? (\n        <>\n          <ListItemIcon className={classes.tokenImage}>\n            <Img alt={token.description} height={28} onError={setImageToPlaceholder} src={token.image} />\n          </ListItemIcon>\n          <ListItemText\n            className={classes.tokenData}\n            primary={shortener(token.name)}\n            secondary={`token ID: ${shortener(token.tokenId.toString())}`}\n          />\n        </>\n      ) : (\n        <Paragraph color=\"disabled\" size=\"md\" style={{ opacity: 0.5 }} weight=\"light\" noMargin>\n          Select a token*\n        </Paragraph>\n      )}\n    </MenuItem>\n  )\n}\n\nconst useCollectibleSelectFieldStyles = makeStyles(selectStyles)\n\ntype CollectibleSelectFieldProps = {\n  initialValue?: number | string\n  tokens: NFTToken[]\n}\n\nexport const CollectibleSelectField = ({ initialValue, tokens }: CollectibleSelectFieldProps): React.ReactElement => {\n  const classes = useCollectibleSelectFieldStyles()\n\n  return (\n    <Field\n      className={classes.selectMenu}\n      component={SelectField}\n      disabled={!tokens.length}\n      initialValue={initialValue}\n      name=\"nftTokenId\"\n      displayEmpty\n      renderValue={(nftTokenId) => <SelectedCollectible tokenId={nftTokenId} tokens={tokens} />}\n      validate={required}\n    >\n      {tokens.map((token) => (\n        <MenuItem key={`${token.assetAddress}-${token.tokenId}`} value={token.tokenId}>\n          <ListItemIcon className={classes.tokenImage}>\n            <Img alt={token.name} height={28} onError={setImageToPlaceholder} src={token.image} />\n          </ListItemIcon>\n          <ListItemText primary={token.name} secondary={`token ID: ${token.tokenId}`} />\n        </MenuItem>\n      ))}\n    </Field>\n  )\n}\n","import ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport { selectStyles, selectedTokenStyles } from '../style'\n\nimport Field from 'src/components/forms/Field'\nimport SelectField from 'src/components/forms/SelectField'\nimport { required } from 'src/components/forms/validator'\nimport Img from 'src/components/layout/Img'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport { formatAmount } from 'src/logic/tokens/utils/formatAmount'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport { textShortener } from 'src/utils/strings'\nimport { NFTAssets } from 'src/logic/collectibles/sources/collectibles.d'\n\nconst useSelectedTokenStyles = makeStyles(selectedTokenStyles)\n\ntype SelectedTokenProps = {\n  assetAddress?: string\n  assets: NFTAssets\n}\n\nconst SelectedToken = ({ assetAddress, assets }: SelectedTokenProps): React.ReactElement => {\n  const classes = useSelectedTokenStyles()\n  const asset = assetAddress ? assets[assetAddress] : null\n  const shortener = textShortener({ charsStart: 40, charsEnd: 0 })\n\n  return (\n    <MenuItem className={classes.container} disableRipple>\n      {asset && asset.numberOfTokens ? (\n        <>\n          <ListItemIcon>\n            <Img className={classes.tokenImage} alt={asset.name} onError={setImageToPlaceholder} src={asset.image} />\n          </ListItemIcon>\n          <ListItemText\n            className={classes.tokenData}\n            primary={shortener(asset.name)}\n            secondary={`${formatAmount(asset.numberOfTokens.toString())} ${asset.symbol}`}\n          />\n        </>\n      ) : (\n        <Paragraph color=\"disabled\" size=\"md\" style={{ opacity: 0.5 }} weight=\"light\" noMargin>\n          Select an asset*\n        </Paragraph>\n      )}\n    </MenuItem>\n  )\n}\n\nconst useTokenSelectFieldStyles = makeStyles(selectStyles)\n\ntype TokenSelectFieldProps = {\n  assets: NFTAssets\n  initialValue?: string\n}\n\nconst TokenSelectField = ({ assets, initialValue }: TokenSelectFieldProps): React.ReactElement => {\n  const classes = useTokenSelectFieldStyles()\n  const tokenClasses = useSelectedTokenStyles()\n  const assetsAddresses = Object.keys(assets)\n\n  return (\n    <Field\n      className={classes.selectMenu}\n      component={SelectField}\n      disabled={!assetsAddresses.length}\n      initialValue={initialValue}\n      name=\"assetAddress\"\n      displayEmpty\n      renderValue={(assetAddress) => <SelectedToken assetAddress={assetAddress} assets={assets} />}\n      validate={required}\n    >\n      {assetsAddresses.map((assetAddress) => {\n        const asset = assets[assetAddress]\n\n        return (\n          <MenuItem key={asset.slug} value={assetAddress}>\n            <ListItemIcon>\n              <Img\n                className={tokenClasses.tokenImage}\n                alt={asset.name}\n                onError={setImageToPlaceholder}\n                src={asset.image}\n              />\n            </ListItemIcon>\n            <ListItemText\n              primary={asset.name}\n              secondary={`Count: ${formatAmount(asset.numberOfTokens.toString())} ${asset.symbol}`}\n            />\n          </MenuItem>\n        )\n      })}\n    </Field>\n  )\n}\n\nexport default TokenSelectField\n","import { makeStyles } from '@material-ui/core/styles'\nimport { useState, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport Divider from 'src/components/Divider'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { ScanQRWrapper } from 'src/components/ScanQRModal/ScanQRWrapper'\nimport { Modal } from 'src/components/Modal'\nimport WhenFieldChanges from 'src/components/WhenFieldChanges'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\nimport { nftAssetsSelector, nftTokensSelector } from 'src/logic/collectibles/store/selectors'\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\nimport { AddressBookInput } from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput'\nimport { NFTToken } from 'src/logic/collectibles/sources/collectibles.d'\nimport { getExplorerInfo } from 'src/config'\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\nimport { sameString } from 'src/utils/strings'\n\nimport { CollectibleSelectField } from './CollectibleSelectField'\nimport { styles } from './style'\nimport TokenSelectField from './TokenSelectField'\nimport { Erc721Transfer } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { ModalHeader } from '../ModalHeader'\nimport { mustBeEthereumAddress } from 'src/components/forms/validator'\nimport { getStepTitle } from 'src/routes/safe/components/Balances/SendModal/utils'\n\nconst formMutators = {\n  setMax: (args, state, utils) => {\n    utils.changeValue(state, 'amount', () => args[0])\n  },\n  onTokenChange: (args, state, utils) => {\n    utils.changeValue(state, 'amount', () => '')\n  },\n  setRecipient: (args, state, utils) => {\n    utils.changeValue(state, 'recipientAddress', () => args[0])\n  },\n}\n\nconst useStyles = makeStyles(styles)\n\ntype SendCollectibleProps = {\n  initialValues: any\n  onClose: () => void\n  onNext: (txInfo: SendCollectibleTxInfo) => void\n  recipientAddress?: string\n  selectedToken?: NFTToken | Erc721Transfer\n}\n\nexport type SendCollectibleTxInfo = {\n  assetAddress: string\n  assetName: string\n  nftTokenId: string\n  recipientAddress?: string\n  recipientName?: string\n}\n\nconst SendCollectible = ({\n  initialValues,\n  onClose,\n  onNext,\n  recipientAddress,\n  selectedToken,\n}: SendCollectibleProps): React.ReactElement => {\n  const classes = useStyles()\n  const nftAssets = useSelector(nftAssetsSelector)\n  const nftTokens = useSelector(nftTokensSelector)\n  const addressBook = useSelector(currentNetworkAddressBook)\n  const [addressErrorMsg, setAddressErrorMsg] = useState('')\n  const [selectedEntry, setSelectedEntry] = useState<{ address: string; name: string } | null>(() => {\n    const defaultEntry = { address: recipientAddress || '', name: '' }\n\n    // if there's nothing to lookup for, we return the default entry\n    if (!initialValues?.recipientAddress && !recipientAddress) {\n      return defaultEntry\n    }\n\n    // if there's something to lookup for, `initialValues` has precedence over `recipientAddress`\n    const predefinedAddress = initialValues?.recipientAddress ?? recipientAddress\n    const addressBookEntry = addressBook.find(({ address }) => {\n      return sameAddress(predefinedAddress, address)\n    })\n\n    // if found in the Address Book, then we return the entry\n    if (addressBookEntry) {\n      return addressBookEntry\n    }\n\n    // otherwise we return the default entry\n    return defaultEntry\n  })\n  const [pristine, setPristine] = useState(true)\n  const [isValidAddress, setIsValidAddress] = useState(false)\n\n  useMemo(() => {\n    if (selectedEntry === null && pristine) {\n      setPristine(false)\n    }\n  }, [selectedEntry, pristine])\n\n  const handleSubmit = (values: SendCollectibleTxInfo) => {\n    // If the input wasn't modified, there was no mutation of the recipientAddress\n    if (!values.recipientAddress) {\n      values.recipientAddress = selectedEntry?.address\n    }\n    values.recipientName = selectedEntry?.name\n    values.assetName = nftAssets[values.assetAddress].name\n\n    onNext(values)\n  }\n\n  return (\n    <>\n      <ModalHeader onClose={onClose} subTitle={getStepTitle(1, 2)} title=\"Send NFT\" />\n      <Hairline />\n      <GnoForm formMutators={formMutators} initialValues={initialValues} onSubmit={handleSubmit}>\n        {(...args) => {\n          const formState = args[2]\n          const mutators = args[3]\n          const { assetAddress } = formState.values\n          const selectedNFTTokens = nftTokens.filter((nftToken) => nftToken.assetAddress === assetAddress)\n\n          const handleScan = (value, closeQrModal) => {\n            let scannedAddress = value\n\n            if (scannedAddress.startsWith('ethereum:')) {\n              scannedAddress = scannedAddress.replace('ethereum:', '')\n            }\n            const scannedName = addressBook.find(({ address }) => {\n              return sameAddress(scannedAddress, address)\n            })?.name\n            const addressErrorMessage = mustBeEthereumAddress(scannedAddress)\n            if (!addressErrorMessage) {\n              mutators.setRecipient(scannedAddress)\n              setSelectedEntry({\n                name: scannedName || '',\n                address: scannedAddress,\n              })\n              setAddressErrorMsg('')\n            } else setAddressErrorMsg(addressErrorMessage)\n\n            closeQrModal()\n          }\n\n          let shouldDisableSubmitButton = !isValidAddress\n\n          if (selectedEntry) {\n            shouldDisableSubmitButton = !selectedEntry.address\n          }\n\n          return (\n            <>\n              <WhenFieldChanges field=\"assetAddress\" set=\"nftTokenId\" to={''} />\n              <Block className={classes.formContainer}>\n                <SafeInfo text=\"Sending from\" />\n                <Divider withArrow />\n                {selectedEntry && selectedEntry.address ? (\n                  <div\n                    onKeyDown={(e) => {\n                      if (sameString(e.key, 'Tab')) {\n                        return\n                      }\n                      setSelectedEntry({ address: '', name: '' })\n                    }}\n                    onClick={() => {\n                      setSelectedEntry({ address: '', name: '' })\n                    }}\n                    role=\"listbox\"\n                    tabIndex={0}\n                  >\n                    <Row margin=\"xs\">\n                      <Paragraph color=\"disabled\" noMargin size=\"lg\">\n                        Recipient\n                      </Paragraph>\n                    </Row>\n                    <Row align=\"center\" margin=\"md\">\n                      <Col xs={12}>\n                        <PrefixedEthHashInfo\n                          hash={selectedEntry.address}\n                          name={selectedEntry.name}\n                          strongName\n                          showAvatar\n                          showCopyBtn\n                          explorerUrl={getExplorerInfo(selectedEntry.address)}\n                        />\n                      </Col>\n                    </Row>\n                  </div>\n                ) : (\n                  <Row margin=\"md\">\n                    <Col xs={11}>\n                      <AddressBookInput\n                        fieldMutator={mutators.setRecipient}\n                        pristine={pristine}\n                        errorMsg={addressErrorMsg}\n                        setIsValidAddress={setIsValidAddress}\n                        setSelectedEntry={setSelectedEntry}\n                      />\n                    </Col>\n                    <Col center=\"xs\" className={classes} middle=\"xs\" xs={1}>\n                      <ScanQRWrapper handleScan={handleScan} />\n                    </Col>\n                  </Row>\n                )}\n                <Row margin=\"xs\">\n                  <Col between=\"lg\">\n                    <Paragraph color=\"disabled\" noMargin size=\"md\">\n                      NFT collection\n                    </Paragraph>\n                  </Col>\n                </Row>\n                <Row margin=\"md\">\n                  <Col>\n                    <TokenSelectField\n                      assets={nftAssets}\n                      initialValue={\n                        (selectedToken as NFTToken)?.assetAddress ?? (selectedToken as Erc721Transfer)?.tokenAddress\n                      }\n                    />\n                  </Col>\n                </Row>\n                <Row margin=\"xs\">\n                  <Col between=\"lg\">\n                    <Paragraph color=\"disabled\" noMargin size=\"md\">\n                      Token ID\n                    </Paragraph>\n                  </Col>\n                </Row>\n                <Row margin=\"md\">\n                  <Col>\n                    <CollectibleSelectField initialValue={selectedToken?.tokenId} tokens={selectedNFTTokens} />\n                  </Col>\n                </Row>\n              </Block>\n              <Modal.Footer>\n                <Modal.Footer.Buttons\n                  cancelButtonProps={{ onClick: onClose }}\n                  confirmButtonProps={{ disabled: shouldDisableSubmitButton, testId: 'review-tx-btn', text: 'Review' }}\n                />\n              </Modal.Footer>\n            </>\n          )\n        }}\n      </GnoForm>\n    </>\n  )\n}\n\nexport default SendCollectible\n","export const getStepTitle = (currentStep: number, totalSteps: number): string => `Step ${currentStep} of ${totalSteps}`\n","export default __webpack_public_path__ + \"static/media/qrcode.fec1b6d8.svg\";","import { background, lg, secondaryText, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: lg,\n    justifyContent: 'space-between',\n    maxHeight: '75px',\n    boxSizing: 'border-box',\n  },\n  loaderContainer: {\n    width: '100%',\n    height: '100%',\n  },\n  close: {\n    height: '25px',\n    width: '25px',\n    color: secondaryText,\n  },\n  detailsContainer: {\n    backgroundColor: background,\n    maxHeight: '450px',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n  },\n  button: {\n    '&:last-child': {\n      marginLeft: sm,\n    },\n  },\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Close from '@material-ui/icons/Close'\nimport * as React from 'react'\nimport QrReader from 'react-qr-reader'\n\nimport { styles } from './style'\n\nimport Modal from 'src/components/Modal'\nimport Block from 'src/components/layout/Block'\nimport Button from 'src/components/layout/Button'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { useEffect, useState } from 'react'\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  isOpen: boolean\n  onClose: () => void\n  onScan: (value: string) => void\n}\n\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\n  const classes = useStyles()\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n  const [cameraBlocked, setCameraBlocked] = useState<boolean>(false)\n  const scannerRef: any = React.createRef()\n  const openImageDialog = React.useCallback(() => {\n    scannerRef.current.openImageDialog()\n  }, [scannerRef])\n\n  useEffect(() => {\n    if (!fileUploadModalOpen && cameraBlocked && !error) {\n      setFileUploadModalOpen(true)\n      openImageDialog()\n    }\n  }, [cameraBlocked, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\n\n  const onFileScannedResolve = (error: Error | null, successData: string | null) => {\n    if (error) {\n      console.error('QR code error', error)\n\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDismissedError') {\n        setCameraBlocked(true)\n        setFileUploadModalOpen(false)\n      } else {\n        setError('The QR could not be read')\n      }\n      return\n    }\n\n    if (successData) {\n      onScan(successData)\n    } else if (cameraBlocked) {\n      setError('The QR could not be read')\n    }\n  }\n\n  return (\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\n      <Row align=\"center\" className={classes.heading} grow>\n        <Paragraph noMargin size=\"xl\">\n          Scan QR\n        </Paragraph>\n        <IconButton disableRipple onClick={onClose}>\n          <Close className={classes.close} />\n        </IconButton>\n      </Row>\n      <Hairline />\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\n        {error && (\n          <Block padding=\"md\" margin=\"md\">\n            {error}\n          </Block>\n        )}\n        <QrReader\n          legacyMode={cameraBlocked}\n          onError={(err: Error) => onFileScannedResolve(err, null)}\n          onScan={(data: string) => onFileScannedResolve(null, data)}\n          ref={scannerRef}\n          style={{ width: '400px', height: '400px' }}\n          facingMode=\"user\"\n        />\n      </Col>\n      <Hairline />\n      <Row align=\"center\" className={classes.buttonRow}>\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\n          Close\n        </Button>\n        <Button\n          className={classes.button}\n          color=\"primary\"\n          minWidth={154}\n          onClick={() => {\n            setCameraBlocked(true)\n            setError(null)\n            setFileUploadModalOpen(false)\n          }}\n          variant=\"contained\"\n        >\n          Upload an image\n        </Button>\n      </Row>\n    </Modal>\n  )\n}\n","import { makeStyles } from '@material-ui/core/styles'\nimport { ReactElement, useState } from 'react'\n\nimport QRIcon from 'src/assets/icons/qrcode.svg'\nimport { ScanQRModal } from 'src/components/ScanQRModal'\nimport Img from 'src/components/layout/Img'\n\nconst useStyles = makeStyles({\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n})\n\ntype Props = {\n  handleScan: (dataResult: string, closeQrModal: () => void) => void\n  testId?: string\n}\n\nexport const ScanQRWrapper = ({ handleScan, testId }: Props): ReactElement => {\n  const classes = useStyles()\n  const [qrModalOpen, setQrModalOpen] = useState(false)\n\n  const openQrModal = () => {\n    setQrModalOpen(true)\n  }\n\n  const closeQrModal = () => {\n    setQrModalOpen(false)\n  }\n\n  const onScanFinished = (value: string) => {\n    handleScan(value, closeQrModal)\n  }\n\n  return (\n    <>\n      <Img\n        alt=\"Scan QR\"\n        className={classes.qrCodeBtn}\n        height={20}\n        onClick={() => openQrModal()}\n        role=\"button\"\n        src={QRIcon}\n        testId={testId || 'qr-icon'}\n      />\n      {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={onScanFinished} />}\n    </>\n  )\n}\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  margin: 8px 0;\n\n  svg {\n    margin: 0 12px 0 4px;\n  }\n`\nconst StyledDivider = styled(DividerSRC)`\n  width: 100%;\n`\n\nconst StyledIcon = styled(Icon)`\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%);\n  padding: 0 20px;\n  background: white;\n\n  & svg {\n    margin: 0;\n  }\n`\n\ntype Props = {\n  withArrow?: boolean\n}\n\nconst Divider = ({ withArrow }: Props): ReactElement => (\n  <Wrapper>\n    {withArrow && <StyledIcon type=\"arrowDown\" size=\"md\" />}\n    <StyledDivider />\n  </Wrapper>\n)\n\nexport default Divider\n","import { useSelector } from 'react-redux'\nimport styled from 'styled-components'\n\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Bold from 'src/components/layout/Bold'\nimport { border, xs } from 'src/theme/variables'\nimport Block from 'src/components/layout/Block'\nimport Row from 'src/components/layout/Row'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\n\nconst StyledBlock = styled(Block)`\n  font-size: 12px;\n  line-height: 1.08;\n  letter-spacing: -0.5px;\n  background-color: ${border};\n  width: fit-content;\n  padding: 5px 10px;\n  margin-top: ${xs};\n  margin-left: 40px;\n  border-radius: 3px;\n`\n\ntype SafeInfoProps = {\n  text?: string\n}\n\nconst SafeInfo = ({ text }: SafeInfoProps): React.ReactElement => {\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\n  const nativeCurrency = getNativeCurrency()\n\n  return (\n    <>\n      {text && (\n        <Row margin=\"sm\">\n          <Paragraph color=\"black400\" noMargin size=\"lg\">\n            {text}\n          </Paragraph>\n        </Row>\n      )}\n      <PrefixedEthHashInfo\n        hash={safeAddress}\n        name={safeName}\n        strongName\n        explorerUrl={getExplorerInfo(safeAddress)}\n        showAvatar\n        showCopyBtn\n      />\n      {ethBalance && (\n        <StyledBlock>\n          <Paragraph noMargin>\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCurrency.symbol}`}</Bold>\n          </Paragraph>\n        </StyledBlock>\n      )}\n    </>\n  )\n}\n\nexport default SafeInfo\n","import FormControl from '@material-ui/core/FormControl'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select, { SelectProps } from '@material-ui/core/Select'\nimport { FieldMetaState } from 'react-final-form'\nimport { FormControlProps } from '@material-ui/core/FormControl/FormControl'\n\nconst style = {\n  minWidth: '100%',\n}\n\ntype Props = {\n  classes: SelectProps['classes']\n  label: SelectProps['label']\n  renderValue: SelectProps['renderValue']\n  disableError: boolean\n  formControlProps: FormControlProps\n  input: {\n    name: string\n    onChange?: () => void\n    value: string\n    placeholder: string\n    type: string\n  }\n  meta: FieldMetaState<any>\n}\n\nconst SelectInput = ({\n  classes,\n  disableError,\n  formControlProps,\n  input: { name, onChange, value, ...restInput },\n  label,\n  meta,\n  renderValue,\n  ...rest\n}: Props): React.ReactElement => {\n  const showError = ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) && meta.touched && !disableError\n  const inputProps = {\n    ...restInput,\n    name,\n  }\n\n  return (\n    <FormControl {...formControlProps} error={showError} style={style}>\n      <InputLabel htmlFor={name}>{label}</InputLabel>\n      <Select\n        classes={classes}\n        inputProps={inputProps}\n        onChange={onChange}\n        renderValue={renderValue}\n        value={value}\n        variant=\"outlined\"\n        {...rest}\n      />\n      {showError && <FormHelperText>{meta.error || meta.submitError}</FormHelperText>}\n    </FormControl>\n  )\n}\n\nexport default SelectInput\n","import { createElement, Component } from 'react';\nimport { Field } from 'react-final-form';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar ExternallyChangedState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(ExternallyChangedState, _React$Component);\n\n  function ExternallyChangedState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: props.input.value,\n      externallyChanged: false\n    };\n    return _this;\n  }\n\n  var _proto = ExternallyChangedState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        value = _this$props.input.value,\n        active = _this$props.meta.active;\n    var previous = this.state.previous;\n\n    if (value !== previous) {\n      this.setState({\n        previous: value,\n        externallyChanged: !active\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    return this.props.children(this.state.externallyChanged);\n  };\n\n  return ExternallyChangedState;\n}(Component);\n\nvar ExternallyChanged = function ExternallyChanged(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      active: true,\n      value: true\n    },\n    allowNull: true,\n    render: function render(props) {\n      return createElement(ExternallyChangedState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nvar OnBlurState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(OnBlurState, _React$Component);\n\n  function OnBlurState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: !!props.meta.active\n    };\n    return _this;\n  }\n\n  var _proto = OnBlurState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        active = _this$props.meta.active;\n    var previous = this.state.previous;\n\n    if (previous && !active) {\n      children();\n    }\n\n    if (previous !== active) {\n      this.setState({\n        previous: active\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return OnBlurState;\n}(Component);\n\nvar OnBlur = function OnBlur(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      active: true\n    },\n    render: function render(props) {\n      return createElement(OnBlurState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nvar OnChangeState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(OnChangeState, _React$Component);\n\n  function OnChangeState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: props.input.value\n    };\n    return _this;\n  }\n\n  var _proto = OnChangeState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        value = _this$props.input.value;\n    var previous = this.state.previous;\n\n    if (value !== previous) {\n      this.setState({\n        previous: value\n      });\n      children(value, previous);\n    }\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return OnChangeState;\n}(Component);\n\nvar OnChange = function OnChange(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      value: true\n    },\n    allowNull: true,\n    render: function render(props) {\n      return createElement(OnChangeState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nvar OnFocusState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(OnFocusState, _React$Component);\n\n  function OnFocusState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: !!props.meta.active\n    };\n    return _this;\n  }\n\n  var _proto = OnFocusState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        active = _this$props.meta.active;\n    var previous = this.state.previous;\n\n    if (active && !previous) {\n      this.setState({\n        previous: active\n      });\n      children();\n    } else if (!active && previous) {\n      this.setState({\n        previous: active\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return OnFocusState;\n}(Component);\n\nvar OnFocus = function OnFocus(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      active: true\n    },\n    render: function render(props) {\n      return createElement(OnFocusState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nexport { ExternallyChanged, OnBlur, OnChange, OnFocus };\n","import { createStyles, makeStyles } from '@material-ui/core'\n\nexport const useTextFieldLabelStyle = makeStyles(\n  createStyles({\n    root: {\n      overflow: 'hidden',\n    },\n  }),\n)\n\nexport const useTextFieldInputStyle = makeStyles(\n  createStyles({\n    input: {\n      padding: '16px !important',\n    },\n  }),\n)\n","import MuiTextField from '@material-ui/core/TextField'\nimport Autocomplete, { AutocompleteProps } from '@material-ui/lab/Autocomplete'\nimport { Dispatch, ReactElement, SetStateAction, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { mustBeEthereumAddress, mustBeEthereumContractAddress } from 'src/components/forms/validator'\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\nimport { filterContractAddressBookEntries, filterAddressEntries } from 'src/logic/addressBook/utils'\nimport { isValidEnsName, isValidCryptoDomainName } from 'src/logic/wallets/ethAddresses'\nimport { getAddressFromDomain } from 'src/logic/wallets/getWeb3'\nimport {\n  useTextFieldInputStyle,\n  useTextFieldLabelStyle,\n} from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput/style'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\nimport { trimSpaces } from 'src/utils/strings'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { checksumAddress } from 'src/utils/checksumAddress'\nimport { currentChainId } from 'src/logic/config/store/selectors'\nimport { FEATURES } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { parsePrefixedAddress } from 'src/utils/prefixedAddress'\nimport { hasFeature } from 'src/logic/safe/utils/safeVersion'\n\nexport interface AddressBookProps {\n  fieldMutator: (address: string) => void\n  label?: string\n  pristine?: boolean\n  recipientAddress?: string\n  errorMsg?: string\n  setIsValidAddress: (valid: boolean) => void\n  setSelectedEntry: Dispatch<SetStateAction<{ address: string; name: string }> | null>\n}\n\nexport interface BaseAddressBookInputProps extends AddressBookProps {\n  addressBookEntries: AddressBookEntry[]\n  setSelectedEntry: (args: { address: string; name: string } | null) => void\n  setValidationText: Dispatch<SetStateAction<string | undefined>>\n  validationText: string | undefined\n}\n\nconst BaseAddressBookInput = ({\n  addressBookEntries,\n  fieldMutator,\n  label = 'Recipient',\n  setIsValidAddress,\n  setSelectedEntry,\n  setValidationText,\n  validationText,\n}: BaseAddressBookInputProps): ReactElement => {\n  const networkId = useSelector(currentChainId)\n\n  const updateAddressInfo = (addressEntry: AddressBookEntry): void => {\n    setSelectedEntry(addressEntry)\n    fieldMutator(addressEntry.address)\n  }\n\n  const validateAddress = (fullAddress: string): AddressBookEntry | string | undefined => {\n    const addressErrorMessage = mustBeEthereumAddress(fullAddress)\n    setIsValidAddress(!addressErrorMessage)\n\n    if (addressErrorMessage) {\n      setValidationText(addressErrorMessage)\n      return\n    }\n\n    // Automatically checksum valid addresses\n    const { address } = parsePrefixedAddress(fullAddress)\n    const checkedAddr = checksumAddress(address) || address\n    const filteredEntries = filterAddressEntries(addressBookEntries, { inputValue: checkedAddr })\n    return filteredEntries.length === 1 ? filteredEntries[0] : checkedAddr\n  }\n\n  const onChange: AutocompleteProps<AddressBookEntry, false, false, true>['onChange'] = (_, value, reason) => {\n    switch (reason) {\n      case 'select-option': {\n        const { address, name, chainId } = value as AddressBookEntry\n        updateAddressInfo({ address, name, chainId })\n        break\n      }\n    }\n  }\n\n  const onInputChange: AutocompleteProps<AddressBookEntry, false, false, true>['onInputChange'] = async (\n    _,\n    value,\n    reason,\n  ) => {\n    switch (reason) {\n      case 'input': {\n        const normalizedValue = trimSpaces(value)\n\n        if (!normalizedValue) {\n          break\n        }\n\n        // ENS-enabled resolve/validation\n        if (\n          hasFeature(FEATURES.DOMAIN_LOOKUP) &&\n          (isValidEnsName(normalizedValue) || isValidCryptoDomainName(normalizedValue))\n        ) {\n          let address = ''\n          try {\n            address = await getAddressFromDomain(normalizedValue)\n          } catch (err) {\n            logError(Errors._101, err.message)\n          }\n\n          const validatedAddress = validateAddress(address)\n\n          if (!validatedAddress) {\n            fieldMutator('')\n            break\n          }\n\n          const newEntry =\n            typeof validatedAddress === 'string'\n              ? {\n                  address,\n                  name: normalizedValue,\n                  chainId: networkId,\n                }\n              : validatedAddress\n\n          updateAddressInfo(newEntry)\n          break\n        }\n\n        // ETH address validation\n        const validatedAddress = validateAddress(normalizedValue)\n\n        if (!validatedAddress) {\n          fieldMutator('')\n          break\n        }\n\n        const newEntry =\n          typeof validatedAddress === 'string'\n            ? {\n                address: validatedAddress,\n                name: '',\n                chainId: networkId,\n              }\n            : validatedAddress\n\n        updateAddressInfo(newEntry)\n\n        break\n      }\n    }\n  }\n\n  const labelStyles = useTextFieldLabelStyle()\n  const inputStyles = useTextFieldInputStyle()\n\n  return (\n    <Autocomplete<AddressBookEntry, false, false, true>\n      closeIcon={null}\n      openOnFocus={false}\n      filterOptions={filterAddressEntries}\n      freeSolo\n      onChange={onChange}\n      onInputChange={onInputChange}\n      options={addressBookEntries}\n      id=\"address-book-input\"\n      renderInput={(params) => (\n        <MuiTextField\n          {...params}\n          autoFocus\n          error={!!validationText}\n          fullWidth\n          variant=\"outlined\"\n          label={validationText ? validationText : label}\n          InputLabelProps={{ shrink: true, required: true, classes: labelStyles }}\n          InputProps={{ ...params.InputProps, classes: inputStyles }}\n          inputProps={{ ...params.inputProps, 'data-testid': 'address-book-input' }}\n        />\n      )}\n      getOptionLabel={({ address }) => address}\n      renderOption={({ address, name }) => <PrefixedEthHashInfo hash={address} name={name} showAvatar />}\n      role=\"listbox\"\n      style={{ display: 'flex', flexGrow: 1 }}\n    />\n  )\n}\n\nexport const AddressBookInput = (props: AddressBookProps): ReactElement => {\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\n  const [validationText, setValidationText] = useState<string>('')\n\n  useEffect(() => {\n    if (props.errorMsg) {\n      setValidationText(props.errorMsg)\n    }\n  }, [props.errorMsg])\n\n  return (\n    <BaseAddressBookInput\n      addressBookEntries={addressBookEntries}\n      setValidationText={setValidationText}\n      validationText={validationText}\n      {...props}\n    />\n  )\n}\n\nexport const ContractsAddressBookInput = ({\n  setIsValidAddress,\n  setSelectedEntry,\n  ...props\n}: AddressBookProps): ReactElement => {\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\n  const [filteredEntries, setFilteredEntries] = useState<AddressBookEntry[]>([])\n  const [validationText, setValidationText] = useState<string>('')\n\n  useEffect(() => {\n    const filterContractAddresses = async (): Promise<void> => {\n      const filteredADBK = await filterContractAddressBookEntries(addressBookEntries)\n      setFilteredEntries(filteredADBK)\n    }\n    filterContractAddresses()\n  }, [addressBookEntries])\n\n  const onSetSelectedEntry = async (selectedEntry) => {\n    if (selectedEntry?.address) {\n      // verify if `address` is a contract\n      const contractAddressErrorMessage = await mustBeEthereumContractAddress(selectedEntry.address)\n      setIsValidAddress(!contractAddressErrorMessage)\n      setValidationText(contractAddressErrorMessage ?? '')\n      setSelectedEntry(selectedEntry)\n    }\n  }\n\n  return (\n    <BaseAddressBookInput\n      addressBookEntries={filteredEntries}\n      setIsValidAddress={setIsValidAddress}\n      setSelectedEntry={onSetSelectedEntry}\n      setValidationText={setValidationText}\n      validationText={validationText}\n      {...props}\n    />\n  )\n}\n","import { createSelector } from 'reselect'\nimport { NFTAsset, NFTAssets, NFTTokens, NFTTokensStore } from 'src/logic/collectibles/sources/collectibles.d'\n\nimport { AppReduxState } from 'src/store'\nimport { NFT_ASSETS_REDUCER_ID, NFT_TOKENS_REDUCER_ID } from 'src/logic/collectibles/store/reducer/collectibles'\nexport const nftAssets = (state: AppReduxState): NFTAssets => state[NFT_ASSETS_REDUCER_ID]\nexport const nftTokens = (state: AppReduxState): NFTTokensStore => state[NFT_TOKENS_REDUCER_ID]\n\nexport const nftAssetsSelector = createSelector(nftAssets, (assets) => assets)\n\nexport const nftTokensSelector = createSelector(nftTokens, (tokens) => tokens.items)\n\nexport const nftLoadedSelector = createSelector(nftTokens, (tokens) => tokens.loaded)\n\nconst nftAssetsToListSelector = createSelector(nftAssets, (assets): NFTAsset[] => {\n  return assets ? Object.values(assets) : []\n})\n\nconst nftAssetsAddressFromNftTokensSelector = createSelector(nftTokensSelector, (userNftTokens): string[] => {\n  const addresses = userNftTokens.map((nftToken) => nftToken.assetAddress)\n  const uniqueAddresses = new Set(addresses)\n  return Array.from(uniqueAddresses)\n})\n\nexport const orderedNFTAssets = createSelector(\n  nftTokensSelector,\n  (userNftTokens): NFTTokens => userNftTokens.sort((a, b) => a.name.localeCompare(b.name)),\n)\n\nexport const nftAssetsFromNftTokensSelector = createSelector(\n  nftAssetsToListSelector,\n  nftAssetsAddressFromNftTokensSelector,\n  (nftAssets, nftAssetsFromNftTokens): NFTAsset[] => {\n    return nftAssets\n      .sort((a, b) => a.name.localeCompare(b.name))\n      .filter(({ address }) => nftAssetsFromNftTokens.includes(address))\n  },\n)\n"],"sourceRoot":""}