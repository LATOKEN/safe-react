{"version":3,"sources":["../node_modules/@material-ui/lab/esm/internal/svg-icons/ArrowDropDown.js","../node_modules/@material-ui/lab/esm/Autocomplete/Autocomplete.js"],"names":["createSvgIcon","React","d","DisablePortal","props","anchorEl","open","other","_objectWithoutProperties","_ref","CloseIcon","fontSize","_ref2","ArrowDropDownIcon","Autocomplete","ref","autoComplete","autoHighlight","autoSelect","blurOnSelect","startAdornment","ChipProps","classes","className","_props$clearOnBlur","clearOnBlur","_props$clearText","freeSolo","clearOnEscape","clearText","_props$closeIcon","closeIcon","_props$closeText","closeText","_props$defaultValue","debug","defaultValue","_props$disableClearab","multiple","disableClearable","_props$disabled","disableCloseOnSelect","disabled","_props$disablePortal","disabledItemsFocusable","disableListWrap","disablePortal","_props$forcePopupIcon","filterOptions","filterSelectedOptions","forcePopupIcon","_props$freeSolo","_props$fullWidth","fullWidth","_props$getLimitTagsTe","getLimitTagsText","more","concat","_props$getOptionLabel","getOptionDisabled","getOptionLabel","x","groupBy","getOptionSelected","_props$handleHomeEndK","handleHomeEndKeys","_props$limitTags","id","includeInputInList","inputValue","limitTags","_props$ListboxCompone","ListboxComponent","ListboxProps","_props$loading","loading","_props$loadingText","loadingText","_props$multiple","_props$noOptionsText","noOptionsText","_props$openText","onChange","onClose","onHighlightChange","onInputChange","onOpen","openOnFocus","openText","_props$PaperComponent","options","PaperComponent","Paper","_props$PopperComponen","PopperComponent","PopperComponentProp","Popper","_props$popupIcon","popupIcon","renderGroupProp","renderGroup","renderInput","renderOptionProp","renderOption","renderTags","_props$selectOnFocus","selectOnFocus","_props$size","size","value","_useAutocomplete","useAutocomplete","_extends","componentName","getRootProps","getInputProps","getInputLabelProps","getPopupIndicatorProps","getClearProps","getTagProps","getListboxProps","getOptionProps","dirty","popupOpen","focused","focusedTag","setAnchorEl","groupedOptions","length","getCustomizedTagProps","params","clsx","tag","tagSizeSmall","map","option","index","Chip","label","Array","isArray","splice","push","key","ListSubheader","groupLabel","component","group","groupUl","children","renderListOption","optionProps","selected","hasClearIcon","hasPopupIcon","root","undefined","InputLabelProps","InputProps","inputRoot","endAdornment","IconButton","title","clearIndicator","clearIndicatorDirty","popupIndicator","popupIndicatorOpen","inputProps","input","inputFocused","popper","popperDisablePortal","style","width","clientWidth","role","paper","noOptions","listbox","option2","index2","withStyles","theme","_option","visibility","margin","maxWidth","flexWrap","paddingRight","minWidth","paddingBottom","padding","paddingLeft","right","paddingTop","flexGrow","textOverflow","opacity","position","top","marginRight","transform","zIndex","modal","typography","body1","overflow","listStyle","maxHeight","color","palette","text","secondary","minHeight","display","justifyContent","alignItems","cursor","boxSizing","outline","WebkitTapHighlightColor","_defineProperty","breakpoints","up","backgroundColor","action","hover","disabledOpacity","pointerEvents","background","name"],"mappings":"6OAMeA,cAA4BC,gBAAoB,OAAQ,CACrEC,EAAG,mBACD,iB,SC4PJ,SAASC,EAAcC,GAENA,EAAMC,SACVD,EAAME,KADjB,IAEIC,EAAQC,YAAyBJ,EAAO,CAAC,WAAY,SAEzD,OAAoBH,gBAAoB,MAAOM,GAGjD,IAAIE,EAAoBR,gBAAoBS,IAAW,CACrDC,SAAU,UAGRC,EAAqBX,gBAAoBY,EAAmB,MAE5DC,EAA4Bb,cAAiB,SAAsBG,EAAOW,GAElDX,EAAMY,aAELZ,EAAMa,cAETb,EAAMc,WAEJd,EAAMe,aANhC,IAkIIC,EA1HAC,EAAYjB,EAAMiB,UAClBC,EAAUlB,EAAMkB,QAChBC,EAAYnB,EAAMmB,UAClBC,EAAqBpB,EAAMqB,YAI3BC,QAHqC,IAAvBF,GAAiCpB,EAAMuB,SAC9BvB,EAAMwB,cAEVxB,EAAMyB,WACzBA,OAAiC,IAArBH,EAA8B,QAAUA,EACpDI,EAAmB1B,EAAM2B,UACzBA,OAAiC,IAArBD,EAA8BrB,EAAOqB,EACjDE,EAAmB5B,EAAM6B,UACzBA,OAAiC,IAArBD,EAA8B,QAAUA,EAGpDE,GAFe9B,EAAM+B,MAEC/B,EAAMgC,cAE5BC,QADuC,IAAxBH,GAAiC9B,EAAMkC,SAC9BlC,EAAMmC,kBAC9BA,OAA6C,IAA1BF,GAA2CA,EAG9DG,GAFwBpC,EAAMqC,qBAEZrC,EAAMsC,UACxBA,OAA+B,IAApBF,GAAqCA,EAKhDG,GAJwBvC,EAAMwC,uBAENxC,EAAMyC,gBAEPzC,EAAM0C,eAC7BA,OAAyC,IAAzBH,GAA0CA,EAI1DI,GAHgB3C,EAAM4C,cACE5C,EAAM6C,sBAEN7C,EAAM8C,gBAC9BA,OAA2C,IAA1BH,EAAmC,OAASA,EAC7DI,EAAkB/C,EAAMuB,SACxBA,OAA+B,IAApBwB,GAAqCA,EAChDC,EAAmBhD,EAAMiD,UACzBA,OAAiC,IAArBD,GAAsCA,EAClDE,EAAwBlD,EAAMmD,iBAC9BA,OAA6C,IAA1BD,EAAmC,SAAUE,GAClE,MAAO,IAAIC,OAAOD,IAChBF,EAEAI,GADoBtD,EAAMuD,kBACFvD,EAAMwD,gBAC9BA,OAA2C,IAA1BF,EAAmC,SAAUG,GAChE,OAAOA,GACLH,EAEAI,GADoB1D,EAAM2D,kBAChB3D,EAAM0D,SAChBE,EAAwB5D,EAAM6D,kBAM9BC,QAL8C,IAA1BF,GAAoC5D,EAAMuB,SACrDvB,EAAM+D,GACS/D,EAAMgE,mBAEbhE,EAAMiE,WACJjE,EAAMkE,WACzBA,OAAiC,IAArBJ,GAA+B,EAAIA,EAC/CK,EAAwBnE,EAAMoE,iBAC9BA,OAA6C,IAA1BD,EAAmC,KAAOA,EAC7DE,EAAerE,EAAMqE,aACrBC,EAAiBtE,EAAMuE,QACvBA,OAA6B,IAAnBD,GAAoCA,EAC9CE,EAAqBxE,EAAMyE,YAC3BA,OAAqC,IAAvBD,EAAgC,gBAAaA,EAC3DE,GAAkB1E,EAAMkC,SACxBA,QAA+B,IAApBwC,IAAqCA,GAChDC,GAAuB3E,EAAM4E,cAC7BA,QAAyC,IAAzBD,GAAkC,aAAeA,GASjEE,IARW7E,EAAM8E,SACP9E,EAAM+E,QACI/E,EAAMgF,kBACVhF,EAAMiF,cACbjF,EAAMkF,OACRlF,EAAME,KACQF,EAAMmF,YAETnF,EAAMoF,UACxBA,QAA+B,IAApBP,GAA6B,OAASA,GAEjDQ,IADUrF,EAAMsF,QACQtF,EAAMuF,gBAC9BA,QAA2C,IAA1BF,GAAmCG,IAAQH,GAC5DI,GAAwBzF,EAAM0F,gBAC9BC,QAAgD,IAA1BF,GAAmCG,IAASH,GAClEI,GAAmB7F,EAAM8F,UACzBA,QAAiC,IAArBD,GAA8BrF,EAAQqF,GAClDE,GAAkB/F,EAAMgG,YACxBC,GAAcjG,EAAMiG,YACpBC,GAAmBlG,EAAMmG,aACzBC,GAAapG,EAAMoG,WACnBC,GAAuBrG,EAAMsG,cAE7BC,SADyC,IAAzBF,IAAmCrG,EAAMuB,SAC3CvB,EAAMwG,MACpBA,QAAuB,IAAhBD,GAAyB,SAAWA,GAE3CpG,IADYH,EAAMyG,MACVrG,YAAyBJ,EAAO,CAAC,eAAgB,gBAAiB,aAAc,eAAgB,YAAa,UAAW,YAAa,cAAe,gBAAiB,YAAa,YAAa,YAAa,QAAS,eAAgB,mBAAoB,uBAAwB,WAAY,yBAA0B,kBAAmB,gBAAiB,gBAAiB,wBAAyB,iBAAkB,WAAY,YAAa,mBAAoB,oBAAqB,iBAAkB,oBAAqB,UAAW,oBAAqB,KAAM,qBAAsB,aAAc,YAAa,mBAAoB,eAAgB,UAAW,cAAe,WAAY,gBAAiB,WAAY,UAAW,oBAAqB,gBAAiB,SAAU,OAAQ,cAAe,WAAY,UAAW,iBAAkB,kBAAmB,YAAa,cAAe,cAAe,eAAgB,aAAc,gBAAiB,OAAQ,WAIt7B0F,GAAkBhD,EAAgB3C,EAAgB4F,GAElDe,GAAmBC,YAAgBC,YAAS,GAAI5G,EAAO,CACzD6G,cAAe,kBAEbC,GAAeJ,GAAiBI,aAChCC,GAAgBL,GAAiBK,cACjCC,GAAqBN,GAAiBM,mBACtCC,GAAyBP,GAAiBO,uBAC1CC,GAAgBR,GAAiBQ,cACjCC,GAAcT,GAAiBS,YAC/BC,GAAkBV,GAAiBU,gBACnCC,GAAiBX,GAAiBW,eAClCZ,GAAQC,GAAiBD,MACzBa,GAAQZ,GAAiBY,MACzBvD,GAAK2C,GAAiB3C,GACtBwD,GAAYb,GAAiBa,UAC7BC,GAAUd,GAAiBc,QAC3BC,GAAaf,GAAiBe,WAC9BxH,GAAWyG,GAAiBzG,SAC5ByH,GAAchB,GAAiBgB,YAC/BzD,GAAayC,GAAiBzC,WAC9B0D,GAAiBjB,GAAiBiB,eAItC,GAAIzF,IAAYuE,GAAMmB,OAAS,EAAG,CAChC,IAAIC,GAAwB,SAA+BC,GACzD,OAAOlB,YAAS,CACdzF,UAAW4G,kBAAK7G,EAAQ8G,IAAc,UAATxB,IAAoBtF,EAAQ+G,cACzD3F,SAAUA,GACT6E,GAAYW,KAIf9G,EADEoF,GACeA,GAAWK,GAAOoB,IAElBpB,GAAMyB,KAAI,SAAUC,EAAQC,GAC3C,OAAoBvI,gBAAoBwI,IAAMzB,YAAS,CACrD0B,MAAO9E,EAAe2E,GACtB3B,KAAMA,IACLqB,GAAsB,CACvBO,MAAOA,IACLnH,OAKV,GAAIiD,GAAa,GAAKqE,MAAMC,QAAQxH,GAAiB,CACnD,IAAIoC,GAAOpC,EAAe4G,OAAS1D,GAE9BsD,IAAWpE,GAAO,IACrBpC,EAAiBA,EAAeyH,OAAO,EAAGvE,IAC3BwE,KAAmB7I,gBAAoB,OAAQ,CAC5DsB,UAAWD,EAAQ8G,IACnBW,IAAK3H,EAAe4G,QACnBzE,EAAiBC,MAIxB,IAWI4C,GAAcD,IAXO,SAA4B+B,GACnD,OAAoBjI,gBAAoB,KAAM,CAC5C8I,IAAKb,EAAOa,KACE9I,gBAAoB+I,IAAe,CACjDzH,UAAWD,EAAQ2H,WACnBC,UAAW,OACVhB,EAAOiB,OAAqBlJ,gBAAoB,KAAM,CACvDsB,UAAWD,EAAQ8H,SAClBlB,EAAOmB,YAIR9C,GAAeD,IAAoB1C,EAEnC0F,GAAmB,SAA0Bf,EAAQC,GACvD,IAAIe,EAAc9B,GAAe,CAC/Bc,OAAQA,EACRC,MAAOA,IAET,OAAoBvI,gBAAoB,KAAM+G,YAAS,GAAIuC,EAAa,CACtEhI,UAAWD,EAAQiH,SACjBhC,GAAagC,EAAQ,CACvBiB,SAAUD,EAAY,iBACtBlF,WAAYA,OAIZoF,IAAgBlH,IAAqBG,EACrCgH,KAAiB/H,IAA+B,IAAnBuB,KAA+C,IAAnBA,EAC7D,OAAoBjD,gBAAoBA,WAAgB,KAAmBA,gBAAoB,MAAO+G,YAAS,CAC7GjG,IAAKA,EACLQ,UAAW4G,kBAAK7G,EAAQqI,KAAMpI,EAAWqG,IAAWtG,EAAQsG,QAASvE,GAAa/B,EAAQ+B,UAAWoG,IAAgBnI,EAAQmI,aAAcC,IAAgBpI,EAAQoI,eAClKxC,GAAa3G,KAAS8F,GAAY,CACnClC,GAAIA,GACJzB,SAAUA,EACVW,WAAW,EACXuD,KAAe,UAATA,GAAmB,aAAUgD,EACnCC,gBAAiBzC,KACjB0C,WAAY,CACV/I,IAAK+G,GACLvG,UAAWD,EAAQyI,UACnB3I,eAAgBA,EAChB4I,aAA2B/J,gBAAoB,MAAO,CACpDsB,UAAWD,EAAQ0I,cAClBP,GAA4BxJ,gBAAoBgK,IAAYjD,YAAS,GAAIM,KAAiB,CAC3F,aAAczF,EACdqI,MAAOrI,EACPN,UAAW4G,kBAAK7G,EAAQ6I,eAAgBzC,IAASpG,EAAQ8I,uBACvDrI,GAAa,KAAM2H,GAA4BzJ,gBAAoBgK,IAAYjD,YAAS,GAAIK,KAA0B,CACxH3E,SAAUA,EACV,aAAciF,GAAY1F,EAAYuD,GACtC0E,MAAOvC,GAAY1F,EAAYuD,GAC/BjE,UAAW4G,kBAAK7G,EAAQ+I,eAAgB1C,IAAarG,EAAQgJ,sBAC3DpE,IAAa,OAEnBqE,WAAYvD,YAAS,CACnBzF,UAAW4G,kBAAK7G,EAAQkJ,OAAuB,IAAhB3C,IAAqBvG,EAAQmJ,cAC5D/H,SAAUA,GACTyE,SACAQ,IAAatH,GAAwBJ,gBAAoB6F,GAAiB,CAC7EvE,UAAW4G,kBAAK7G,EAAQoJ,OAAQ5H,GAAiBxB,EAAQqJ,qBACzDC,MAAO,CACLC,MAAOxK,GAAWA,GAASyK,YAAc,MAE3CC,KAAM,eACN1K,SAAUA,GACVC,MAAM,GACQL,gBAAoB0F,GAAgB,CAClDpE,UAAWD,EAAQ0J,OAClBrG,GAAqC,IAA1BoD,GAAeC,OAA4B/H,gBAAoB,MAAO,CAClFsB,UAAWD,EAAQqD,SAClBE,GAAe,KAAgC,IAA1BkD,GAAeC,QAAiBrG,GAAagD,EAEjD,KAFwE1E,gBAAoB,MAAO,CACrHsB,UAAWD,EAAQ2J,WAClBjG,IAAuB+C,GAAeC,OAAS,EAAiB/H,gBAAoBuE,EAAkBwC,YAAS,CAChHzF,UAAWD,EAAQ4J,SAClB1D,KAAmB/C,GAAesD,GAAeO,KAAI,SAAUC,EAAQC,GACxE,OAAI1E,EACKsC,GAAY,CACjB2C,IAAKR,EAAOQ,IACZI,MAAOZ,EAAOY,MACdE,SAAUd,EAAO7C,QAAQ4C,KAAI,SAAU6C,EAASC,GAC9C,OAAO9B,GAAiB6B,EAAS5C,EAAOC,MAAQ4C,QAK/C9B,GAAiBf,EAAQC,OAC5B,OAAS,SAmZF6C,iBAr5BK,SAAgBC,GAClC,IAAIC,EAEJ,MAAO,CAEL5B,KAAM,CACJ,iCAAkC,CAChC6B,WAAY,WAId,yBAA0B,CACxB,+BAAgC,CAC9BA,WAAY,aAMlBnI,UAAW,CACTwH,MAAO,QAITjD,QAAS,GAGTQ,IAAK,CACHqD,OAAQ,EACRC,SAAU,oBAIZrD,aAAc,CACZoD,OAAQ,EACRC,SAAU,oBAIZhC,aAAc,GAGdD,aAAc,GAGdM,UAAW,CACT4B,SAAU,OACV,mCAAoC,CAClCC,aAAc,IAEhB,+BAAgC,CAC9BA,aAAc,IAEhB,WAAY,CACVf,MAAO,EACPgB,SAAU,IAEZ,4BAA6B,CAC3BC,cAAe,EACf,WAAY,CACVC,QAAS,GAEX,uBAAwB,CACtBA,QAAS,UAGb,2DAA4D,CAC1D,WAAY,CACVA,QAAS,eAEX,uBAAwB,CACtBA,QAAS,cAGb,oCAAqC,CACnCA,QAAS,EACT,mCAAoC,CAClCH,aAAc,IAEhB,+BAAgC,CAC9BA,aAAc,IAEhB,WAAY,CACVG,QAAS,aAEX,uBAAwB,CACtBC,YAAa,GAEf,kBAAmB,CACjBC,MAAO,IAGX,2EAA4E,CAC1EF,QAAS,EACT,WAAY,CACVA,QAAS,cAGb,kCAAmC,CACjCG,WAAY,GACZF,YAAa,EACb,mCAAoC,CAClCJ,aAAc,IAEhB,+BAAgC,CAC9BA,aAAc,IAEhB,WAAY,CACVG,QAAS,WAEX,kBAAmB,CACjBE,MAAO,IAGX,uEAAwE,CACtEH,cAAe,EACf,WAAY,CACVC,QAAS,eAMfvB,MAAO,CACL2B,SAAU,EACVC,aAAc,WACdC,QAAS,GAIX5B,aAAc,CACZ4B,QAAS,GAIXrC,aAAc,CAEZsC,SAAU,WACVL,MAAO,EACPM,IAAK,oBAKPpC,eAAgB,CACdqC,aAAc,EACdT,QAAS,EACTP,WAAY,UAIdpB,oBAAqB,GAGrBC,eAAgB,CACd0B,QAAS,EACTS,aAAc,GAIhBlC,mBAAoB,CAClBmC,UAAW,kBAIb/B,OAAQ,CACNgC,OAAQpB,EAAMoB,OAAOC,OAIvBhC,oBAAqB,CACnB2B,SAAU,YAIZtB,MAAOhE,YAAS,GAAIsE,EAAMsB,WAAWC,MAAO,CAC1CC,SAAU,SACVrB,OAAQ,UAIVP,QAAS,CACP6B,UAAW,OACXtB,OAAQ,EACRM,QAAS,QACTiB,UAAW,OACXF,SAAU,QAIZnI,QAAS,CACPsI,MAAO3B,EAAM4B,QAAQC,KAAKC,UAC1BrB,QAAS,aAIXd,UAAW,CACTgC,MAAO3B,EAAM4B,QAAQC,KAAKC,UAC1BrB,QAAS,aAIXxD,QAASgD,EAAU,CACjB8B,UAAW,GACXC,QAAS,OACTC,eAAgB,aAChBC,WAAY,SACZC,OAAQ,UACRvB,WAAY,EACZwB,UAAW,aACXC,QAAS,IACTC,wBAAyB,cACzB9B,cAAe,EACfE,YAAa,GACbJ,aAAc,IACbiC,YAAgBtC,EAASD,EAAMwC,YAAYC,GAAG,MAAO,CACtDV,UAAW,SACTQ,YAAgBtC,EAAS,0BAA2B,CACtDyC,gBAAiB1C,EAAM4B,QAAQe,OAAOzE,WACpCqE,YAAgBtC,EAAS,uBAAwB,CACnDyC,gBAAiB1C,EAAM4B,QAAQe,OAAOC,QACpCL,YAAgBtC,EAAS,WAAY,CACvCyC,gBAAiB1C,EAAM4B,QAAQe,OAAOzE,WACpCqE,YAAgBtC,EAAS,0BAA2B,CACtDc,QAASf,EAAM4B,QAAQe,OAAOE,gBAC9BC,cAAe,SACb7C,GAGJtC,WAAY,CACV+E,gBAAiB1C,EAAM4B,QAAQmB,WAAWrD,MAC1CuB,KAAM,GAIRnD,QAAS,CACP2C,QAAS,EACT,YAAa,CACXC,YAAa,QAuqBa,CAChCsC,KAAM,mBADOjD,CAEZvK","file":"static/js/6.8fb52b60.chunk.js","sourcesContent":["import * as React from 'react';\nimport { createSvgIcon } from '@material-ui/core/utils';\n/**\r\n * @ignore - internal component.\r\n */\n\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M7 10l5 5 5-5z\"\n}), 'ArrowDropDown');","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport Popper from '@material-ui/core/Popper';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport Chip from '@material-ui/core/Chip';\nimport CloseIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport useAutocomplete, { createFilterOptions } from '../useAutocomplete';\nexport { createFilterOptions };\nexport var styles = function styles(theme) {\n  var _option;\n\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      '&$focused $clearIndicatorDirty': {\n        visibility: 'visible'\n      },\n\n      /* Avoid double tap issue on iOS */\n      '@media (pointer: fine)': {\n        '&:hover $clearIndicatorDirty': {\n          visibility: 'visible'\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: {\n      width: '100%'\n    },\n\n    /* Pseudo-class applied to the root element if focused. */\n    focused: {},\n\n    /* Styles applied to the tag elements, e.g. the chips. */\n    tag: {\n      margin: 3,\n      maxWidth: 'calc(100% - 6px)'\n    },\n\n    /* Styles applied to the tag elements, e.g. the chips if `size=\"small\"`. */\n    tagSizeSmall: {\n      margin: 2,\n      maxWidth: 'calc(100% - 4px)'\n    },\n\n    /* Styles applied when the popup icon is rendered. */\n    hasPopupIcon: {},\n\n    /* Styles applied when the clear icon is rendered. */\n    hasClearIcon: {},\n\n    /* Styles applied to the Input element. */\n    inputRoot: {\n      flexWrap: 'wrap',\n      '$hasPopupIcon &, $hasClearIcon &': {\n        paddingRight: 26 + 4\n      },\n      '$hasPopupIcon$hasClearIcon &': {\n        paddingRight: 52 + 4\n      },\n      '& $input': {\n        width: 0,\n        minWidth: 30\n      },\n      '&[class*=\"MuiInput-root\"]': {\n        paddingBottom: 1,\n        '& $input': {\n          padding: 4\n        },\n        '& $input:first-child': {\n          padding: '6px 0'\n        }\n      },\n      '&[class*=\"MuiInput-root\"][class*=\"MuiInput-marginDense\"]': {\n        '& $input': {\n          padding: '4px 4px 5px'\n        },\n        '& $input:first-child': {\n          padding: '3px 0 6px'\n        }\n      },\n      '&[class*=\"MuiOutlinedInput-root\"]': {\n        padding: 9,\n        '$hasPopupIcon &, $hasClearIcon &': {\n          paddingRight: 26 + 4 + 9\n        },\n        '$hasPopupIcon$hasClearIcon &': {\n          paddingRight: 52 + 4 + 9\n        },\n        '& $input': {\n          padding: '9.5px 4px'\n        },\n        '& $input:first-child': {\n          paddingLeft: 6\n        },\n        '& $endAdornment': {\n          right: 9\n        }\n      },\n      '&[class*=\"MuiOutlinedInput-root\"][class*=\"MuiOutlinedInput-marginDense\"]': {\n        padding: 6,\n        '& $input': {\n          padding: '4.5px 4px'\n        }\n      },\n      '&[class*=\"MuiFilledInput-root\"]': {\n        paddingTop: 19,\n        paddingLeft: 8,\n        '$hasPopupIcon &, $hasClearIcon &': {\n          paddingRight: 26 + 4 + 9\n        },\n        '$hasPopupIcon$hasClearIcon &': {\n          paddingRight: 52 + 4 + 9\n        },\n        '& $input': {\n          padding: '9px 4px'\n        },\n        '& $endAdornment': {\n          right: 9\n        }\n      },\n      '&[class*=\"MuiFilledInput-root\"][class*=\"MuiFilledInput-marginDense\"]': {\n        paddingBottom: 1,\n        '& $input': {\n          padding: '4.5px 4px'\n        }\n      }\n    },\n\n    /* Styles applied to the input element. */\n    input: {\n      flexGrow: 1,\n      textOverflow: 'ellipsis',\n      opacity: 0\n    },\n\n    /* Styles applied to the input element if tag focused. */\n    inputFocused: {\n      opacity: 1\n    },\n\n    /* Styles applied to the endAdornment element. */\n    endAdornment: {\n      // We use a position absolute to support wrapping tags.\n      position: 'absolute',\n      right: 0,\n      top: 'calc(50% - 14px)' // Center vertically\n\n    },\n\n    /* Styles applied to the clear indicator. */\n    clearIndicator: {\n      marginRight: -2,\n      padding: 4,\n      visibility: 'hidden'\n    },\n\n    /* Styles applied to the clear indicator if the input is dirty. */\n    clearIndicatorDirty: {},\n\n    /* Styles applied to the popup indicator. */\n    popupIndicator: {\n      padding: 2,\n      marginRight: -2\n    },\n\n    /* Styles applied to the popup indicator if the popup is open. */\n    popupIndicatorOpen: {\n      transform: 'rotate(180deg)'\n    },\n\n    /* Styles applied to the popper element. */\n    popper: {\n      zIndex: theme.zIndex.modal\n    },\n\n    /* Styles applied to the popper element if `disablePortal={true}`. */\n    popperDisablePortal: {\n      position: 'absolute'\n    },\n\n    /* Styles applied to the `Paper` component. */\n    paper: _extends({}, theme.typography.body1, {\n      overflow: 'hidden',\n      margin: '4px 0'\n    }),\n\n    /* Styles applied to the `listbox` component. */\n    listbox: {\n      listStyle: 'none',\n      margin: 0,\n      padding: '8px 0',\n      maxHeight: '40vh',\n      overflow: 'auto'\n    },\n\n    /* Styles applied to the loading wrapper. */\n    loading: {\n      color: theme.palette.text.secondary,\n      padding: '14px 16px'\n    },\n\n    /* Styles applied to the no option wrapper. */\n    noOptions: {\n      color: theme.palette.text.secondary,\n      padding: '14px 16px'\n    },\n\n    /* Styles applied to the option elements. */\n    option: (_option = {\n      minHeight: 48,\n      display: 'flex',\n      justifyContent: 'flex-start',\n      alignItems: 'center',\n      cursor: 'pointer',\n      paddingTop: 6,\n      boxSizing: 'border-box',\n      outline: '0',\n      WebkitTapHighlightColor: 'transparent',\n      paddingBottom: 6,\n      paddingLeft: 16,\n      paddingRight: 16\n    }, _defineProperty(_option, theme.breakpoints.up('sm'), {\n      minHeight: 'auto'\n    }), _defineProperty(_option, '&[aria-selected=\"true\"]', {\n      backgroundColor: theme.palette.action.selected\n    }), _defineProperty(_option, '&[data-focus=\"true\"]', {\n      backgroundColor: theme.palette.action.hover\n    }), _defineProperty(_option, '&:active', {\n      backgroundColor: theme.palette.action.selected\n    }), _defineProperty(_option, '&[aria-disabled=\"true\"]', {\n      opacity: theme.palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    }), _option),\n\n    /* Styles applied to the group's label elements. */\n    groupLabel: {\n      backgroundColor: theme.palette.background.paper,\n      top: -8\n    },\n\n    /* Styles applied to the group's ul elements. */\n    groupUl: {\n      padding: 0,\n      '& $option': {\n        paddingLeft: 24\n      }\n    }\n  };\n};\n\nfunction DisablePortal(props) {\n  // eslint-disable-next-line react/prop-types\n  var anchorEl = props.anchorEl,\n      open = props.open,\n      other = _objectWithoutProperties(props, [\"anchorEl\", \"open\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", other);\n}\n\nvar _ref = /*#__PURE__*/React.createElement(CloseIcon, {\n  fontSize: \"small\"\n});\n\nvar _ref2 = /*#__PURE__*/React.createElement(ArrowDropDownIcon, null);\n\nvar Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(props, ref) {\n  /* eslint-disable no-unused-vars */\n  var _props$autoComplete = props.autoComplete,\n      autoComplete = _props$autoComplete === void 0 ? false : _props$autoComplete,\n      _props$autoHighlight = props.autoHighlight,\n      autoHighlight = _props$autoHighlight === void 0 ? false : _props$autoHighlight,\n      _props$autoSelect = props.autoSelect,\n      autoSelect = _props$autoSelect === void 0 ? false : _props$autoSelect,\n      _props$blurOnSelect = props.blurOnSelect,\n      blurOnSelect = _props$blurOnSelect === void 0 ? false : _props$blurOnSelect,\n      ChipProps = props.ChipProps,\n      classes = props.classes,\n      className = props.className,\n      _props$clearOnBlur = props.clearOnBlur,\n      clearOnBlur = _props$clearOnBlur === void 0 ? !props.freeSolo : _props$clearOnBlur,\n      _props$clearOnEscape = props.clearOnEscape,\n      clearOnEscape = _props$clearOnEscape === void 0 ? false : _props$clearOnEscape,\n      _props$clearText = props.clearText,\n      clearText = _props$clearText === void 0 ? 'Clear' : _props$clearText,\n      _props$closeIcon = props.closeIcon,\n      closeIcon = _props$closeIcon === void 0 ? _ref : _props$closeIcon,\n      _props$closeText = props.closeText,\n      closeText = _props$closeText === void 0 ? 'Close' : _props$closeText,\n      _props$debug = props.debug,\n      debug = _props$debug === void 0 ? false : _props$debug,\n      _props$defaultValue = props.defaultValue,\n      defaultValue = _props$defaultValue === void 0 ? props.multiple ? [] : null : _props$defaultValue,\n      _props$disableClearab = props.disableClearable,\n      disableClearable = _props$disableClearab === void 0 ? false : _props$disableClearab,\n      _props$disableCloseOn = props.disableCloseOnSelect,\n      disableCloseOnSelect = _props$disableCloseOn === void 0 ? false : _props$disableCloseOn,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disabledItemsF = props.disabledItemsFocusable,\n      disabledItemsFocusable = _props$disabledItemsF === void 0 ? false : _props$disabledItemsF,\n      _props$disableListWra = props.disableListWrap,\n      disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra,\n      _props$disablePortal = props.disablePortal,\n      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,\n      filterOptions = props.filterOptions,\n      _props$filterSelected = props.filterSelectedOptions,\n      filterSelectedOptions = _props$filterSelected === void 0 ? false : _props$filterSelected,\n      _props$forcePopupIcon = props.forcePopupIcon,\n      forcePopupIcon = _props$forcePopupIcon === void 0 ? 'auto' : _props$forcePopupIcon,\n      _props$freeSolo = props.freeSolo,\n      freeSolo = _props$freeSolo === void 0 ? false : _props$freeSolo,\n      _props$fullWidth = props.fullWidth,\n      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,\n      _props$getLimitTagsTe = props.getLimitTagsText,\n      getLimitTagsText = _props$getLimitTagsTe === void 0 ? function (more) {\n    return \"+\".concat(more);\n  } : _props$getLimitTagsTe,\n      getOptionDisabled = props.getOptionDisabled,\n      _props$getOptionLabel = props.getOptionLabel,\n      getOptionLabel = _props$getOptionLabel === void 0 ? function (x) {\n    return x;\n  } : _props$getOptionLabel,\n      getOptionSelected = props.getOptionSelected,\n      groupBy = props.groupBy,\n      _props$handleHomeEndK = props.handleHomeEndKeys,\n      handleHomeEndKeys = _props$handleHomeEndK === void 0 ? !props.freeSolo : _props$handleHomeEndK,\n      idProp = props.id,\n      _props$includeInputIn = props.includeInputInList,\n      includeInputInList = _props$includeInputIn === void 0 ? false : _props$includeInputIn,\n      inputValueProp = props.inputValue,\n      _props$limitTags = props.limitTags,\n      limitTags = _props$limitTags === void 0 ? -1 : _props$limitTags,\n      _props$ListboxCompone = props.ListboxComponent,\n      ListboxComponent = _props$ListboxCompone === void 0 ? 'ul' : _props$ListboxCompone,\n      ListboxProps = props.ListboxProps,\n      _props$loading = props.loading,\n      loading = _props$loading === void 0 ? false : _props$loading,\n      _props$loadingText = props.loadingText,\n      loadingText = _props$loadingText === void 0 ? 'Loading…' : _props$loadingText,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      _props$noOptionsText = props.noOptionsText,\n      noOptionsText = _props$noOptionsText === void 0 ? 'No options' : _props$noOptionsText,\n      onChange = props.onChange,\n      onClose = props.onClose,\n      onHighlightChange = props.onHighlightChange,\n      onInputChange = props.onInputChange,\n      onOpen = props.onOpen,\n      open = props.open,\n      _props$openOnFocus = props.openOnFocus,\n      openOnFocus = _props$openOnFocus === void 0 ? false : _props$openOnFocus,\n      _props$openText = props.openText,\n      openText = _props$openText === void 0 ? 'Open' : _props$openText,\n      options = props.options,\n      _props$PaperComponent = props.PaperComponent,\n      PaperComponent = _props$PaperComponent === void 0 ? Paper : _props$PaperComponent,\n      _props$PopperComponen = props.PopperComponent,\n      PopperComponentProp = _props$PopperComponen === void 0 ? Popper : _props$PopperComponen,\n      _props$popupIcon = props.popupIcon,\n      popupIcon = _props$popupIcon === void 0 ? _ref2 : _props$popupIcon,\n      renderGroupProp = props.renderGroup,\n      renderInput = props.renderInput,\n      renderOptionProp = props.renderOption,\n      renderTags = props.renderTags,\n      _props$selectOnFocus = props.selectOnFocus,\n      selectOnFocus = _props$selectOnFocus === void 0 ? !props.freeSolo : _props$selectOnFocus,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      valueProp = props.value,\n      other = _objectWithoutProperties(props, [\"autoComplete\", \"autoHighlight\", \"autoSelect\", \"blurOnSelect\", \"ChipProps\", \"classes\", \"className\", \"clearOnBlur\", \"clearOnEscape\", \"clearText\", \"closeIcon\", \"closeText\", \"debug\", \"defaultValue\", \"disableClearable\", \"disableCloseOnSelect\", \"disabled\", \"disabledItemsFocusable\", \"disableListWrap\", \"disablePortal\", \"filterOptions\", \"filterSelectedOptions\", \"forcePopupIcon\", \"freeSolo\", \"fullWidth\", \"getLimitTagsText\", \"getOptionDisabled\", \"getOptionLabel\", \"getOptionSelected\", \"groupBy\", \"handleHomeEndKeys\", \"id\", \"includeInputInList\", \"inputValue\", \"limitTags\", \"ListboxComponent\", \"ListboxProps\", \"loading\", \"loadingText\", \"multiple\", \"noOptionsText\", \"onChange\", \"onClose\", \"onHighlightChange\", \"onInputChange\", \"onOpen\", \"open\", \"openOnFocus\", \"openText\", \"options\", \"PaperComponent\", \"PopperComponent\", \"popupIcon\", \"renderGroup\", \"renderInput\", \"renderOption\", \"renderTags\", \"selectOnFocus\", \"size\", \"value\"]);\n  /* eslint-enable no-unused-vars */\n\n\n  var PopperComponent = disablePortal ? DisablePortal : PopperComponentProp;\n\n  var _useAutocomplete = useAutocomplete(_extends({}, props, {\n    componentName: 'Autocomplete'\n  })),\n      getRootProps = _useAutocomplete.getRootProps,\n      getInputProps = _useAutocomplete.getInputProps,\n      getInputLabelProps = _useAutocomplete.getInputLabelProps,\n      getPopupIndicatorProps = _useAutocomplete.getPopupIndicatorProps,\n      getClearProps = _useAutocomplete.getClearProps,\n      getTagProps = _useAutocomplete.getTagProps,\n      getListboxProps = _useAutocomplete.getListboxProps,\n      getOptionProps = _useAutocomplete.getOptionProps,\n      value = _useAutocomplete.value,\n      dirty = _useAutocomplete.dirty,\n      id = _useAutocomplete.id,\n      popupOpen = _useAutocomplete.popupOpen,\n      focused = _useAutocomplete.focused,\n      focusedTag = _useAutocomplete.focusedTag,\n      anchorEl = _useAutocomplete.anchorEl,\n      setAnchorEl = _useAutocomplete.setAnchorEl,\n      inputValue = _useAutocomplete.inputValue,\n      groupedOptions = _useAutocomplete.groupedOptions;\n\n  var startAdornment;\n\n  if (multiple && value.length > 0) {\n    var getCustomizedTagProps = function getCustomizedTagProps(params) {\n      return _extends({\n        className: clsx(classes.tag, size === 'small' && classes.tagSizeSmall),\n        disabled: disabled\n      }, getTagProps(params));\n    };\n\n    if (renderTags) {\n      startAdornment = renderTags(value, getCustomizedTagProps);\n    } else {\n      startAdornment = value.map(function (option, index) {\n        return /*#__PURE__*/React.createElement(Chip, _extends({\n          label: getOptionLabel(option),\n          size: size\n        }, getCustomizedTagProps({\n          index: index\n        }), ChipProps));\n      });\n    }\n  }\n\n  if (limitTags > -1 && Array.isArray(startAdornment)) {\n    var more = startAdornment.length - limitTags;\n\n    if (!focused && more > 0) {\n      startAdornment = startAdornment.splice(0, limitTags);\n      startAdornment.push( /*#__PURE__*/React.createElement(\"span\", {\n        className: classes.tag,\n        key: startAdornment.length\n      }, getLimitTagsText(more)));\n    }\n  }\n\n  var defaultRenderGroup = function defaultRenderGroup(params) {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: params.key\n    }, /*#__PURE__*/React.createElement(ListSubheader, {\n      className: classes.groupLabel,\n      component: \"div\"\n    }, params.group), /*#__PURE__*/React.createElement(\"ul\", {\n      className: classes.groupUl\n    }, params.children));\n  };\n\n  var renderGroup = renderGroupProp || defaultRenderGroup;\n  var renderOption = renderOptionProp || getOptionLabel;\n\n  var renderListOption = function renderListOption(option, index) {\n    var optionProps = getOptionProps({\n      option: option,\n      index: index\n    });\n    return /*#__PURE__*/React.createElement(\"li\", _extends({}, optionProps, {\n      className: classes.option\n    }), renderOption(option, {\n      selected: optionProps['aria-selected'],\n      inputValue: inputValue\n    }));\n  };\n\n  var hasClearIcon = !disableClearable && !disabled;\n  var hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref,\n    className: clsx(classes.root, className, focused && classes.focused, fullWidth && classes.fullWidth, hasClearIcon && classes.hasClearIcon, hasPopupIcon && classes.hasPopupIcon)\n  }, getRootProps(other)), renderInput({\n    id: id,\n    disabled: disabled,\n    fullWidth: true,\n    size: size === 'small' ? 'small' : undefined,\n    InputLabelProps: getInputLabelProps(),\n    InputProps: {\n      ref: setAnchorEl,\n      className: classes.inputRoot,\n      startAdornment: startAdornment,\n      endAdornment: /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.endAdornment\n      }, hasClearIcon ? /*#__PURE__*/React.createElement(IconButton, _extends({}, getClearProps(), {\n        \"aria-label\": clearText,\n        title: clearText,\n        className: clsx(classes.clearIndicator, dirty && classes.clearIndicatorDirty)\n      }), closeIcon) : null, hasPopupIcon ? /*#__PURE__*/React.createElement(IconButton, _extends({}, getPopupIndicatorProps(), {\n        disabled: disabled,\n        \"aria-label\": popupOpen ? closeText : openText,\n        title: popupOpen ? closeText : openText,\n        className: clsx(classes.popupIndicator, popupOpen && classes.popupIndicatorOpen)\n      }), popupIcon) : null)\n    },\n    inputProps: _extends({\n      className: clsx(classes.input, focusedTag === -1 && classes.inputFocused),\n      disabled: disabled\n    }, getInputProps())\n  })), popupOpen && anchorEl ? /*#__PURE__*/React.createElement(PopperComponent, {\n    className: clsx(classes.popper, disablePortal && classes.popperDisablePortal),\n    style: {\n      width: anchorEl ? anchorEl.clientWidth : null\n    },\n    role: \"presentation\",\n    anchorEl: anchorEl,\n    open: true\n  }, /*#__PURE__*/React.createElement(PaperComponent, {\n    className: classes.paper\n  }, loading && groupedOptions.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.loading\n  }, loadingText) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.noOptions\n  }, noOptionsText) : null, groupedOptions.length > 0 ? /*#__PURE__*/React.createElement(ListboxComponent, _extends({\n    className: classes.listbox\n  }, getListboxProps(), ListboxProps), groupedOptions.map(function (option, index) {\n    if (groupBy) {\n      return renderGroup({\n        key: option.key,\n        group: option.group,\n        children: option.options.map(function (option2, index2) {\n          return renderListOption(option2, option.index + index2);\n        })\n      });\n    }\n\n    return renderListOption(option, index);\n  })) : null)) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * If `true`, the portion of the selected suggestion that has not been typed by the user,\r\n   * known as the completion string, appears inline after the input cursor in the textbox.\r\n   * The inline completion string is visually highlighted and has a selected state.\r\n   */\n  autoComplete: PropTypes.bool,\n\n  /**\r\n   * If `true`, the first option is automatically highlighted.\r\n   */\n  autoHighlight: PropTypes.bool,\n\n  /**\r\n   * If `true`, the selected option becomes the value of the input\r\n   * when the Autocomplete loses focus unless the user chooses\r\n   * a different option or changes the character string in the input.\r\n   */\n  autoSelect: PropTypes.bool,\n\n  /**\r\n   * Control if the input should be blurred when an option is selected:\r\n   *\r\n   * - `false` the input is not blurred.\r\n   * - `true` the input is always blurred.\r\n   * - `touch` the input is blurred after a touch event.\r\n   * - `mouse` the input is blurred after a mouse event.\r\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n\n  /**\r\n   * Props applied to the [`Chip`](/api/chip/) element.\r\n   */\n  ChipProps: PropTypes.object,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object,\n\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * If `true`, the input's text will be cleared on blur if no value is selected.\r\n   *\r\n   * Set to `true` if you want to help the user enter a new value.\r\n   * Set to `false` if you want to help the user resume his search.\r\n   */\n  clearOnBlur: PropTypes.bool,\n\n  /**\r\n   * If `true`, clear all values when the user presses escape and the popup is closed.\r\n   */\n  clearOnEscape: PropTypes.bool,\n\n  /**\r\n   * Override the default text for the *clear* icon button.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\r\n   */\n  clearText: PropTypes.string,\n\n  /**\r\n   * The icon to display in place of the default close icon.\r\n   */\n  closeIcon: PropTypes.node,\n\n  /**\r\n   * Override the default text for the *close popup* icon button.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\r\n   */\n  closeText: PropTypes.string,\n\n  /**\r\n   * If `true`, the popup will ignore the blur event if the input is filled.\r\n   * You can inspect the popup markup with your browser tools.\r\n   * Consider this option when you need to customize the component.\r\n   */\n  debug: PropTypes.bool,\n\n  /**\r\n   * The default input value. Use when the component is not controlled.\r\n   */\n  defaultValue: PropTypes.any,\n\n  /**\r\n   * If `true`, the input can't be cleared.\r\n   */\n  disableClearable: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .bool,\n\n  /**\r\n   * If `true`, the popup won't close when a value is selected.\r\n   */\n  disableCloseOnSelect: PropTypes.bool,\n\n  /**\r\n   * If `true`, the input will be disabled.\r\n   */\n  disabled: PropTypes.bool,\n\n  /**\r\n   * If `true`, will allow focus on disabled items.\r\n   */\n  disabledItemsFocusable: PropTypes.bool,\n\n  /**\r\n   * If `true`, the list box in the popup will not wrap focus.\r\n   */\n  disableListWrap: PropTypes.bool,\n\n  /**\r\n   * Disable the portal behavior.\r\n   * The children stay within it's parent DOM hierarchy.\r\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\r\n   * A filter function that determines the options that are eligible.\r\n   *\r\n   * @param {T[]} options The options to render.\r\n   * @param {object} state The state of the component.\r\n   * @returns {T[]}\r\n   */\n  filterOptions: PropTypes.func,\n\n  /**\r\n   * If `true`, hide the selected options from the list box.\r\n   */\n  filterSelectedOptions: PropTypes.bool,\n\n  /**\r\n   * Force the visibility display of the popup icon.\r\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n\n  /**\r\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\r\n   */\n  freeSolo: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .bool,\n\n  /**\r\n   * If `true`, the input will take up the full width of its container.\r\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\r\n   * The label to display when the tags are truncated (`limitTags`).\r\n   *\r\n   * @param {number} more The number of truncated tags.\r\n   * @returns {ReactNode}\r\n   */\n  getLimitTagsText: PropTypes.func,\n\n  /**\r\n   * Used to determine the disabled state for a given option.\r\n   *\r\n   * @param {T} option The option to test.\r\n   * @returns {boolean}\r\n   */\n  getOptionDisabled: PropTypes.func,\n\n  /**\r\n   * Used to determine the string value for a given option.\r\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\r\n   *\r\n   * @param {T} option\r\n   * @returns {string}\r\n   */\n  getOptionLabel: PropTypes.func,\n\n  /**\r\n   * Used to determine if an option is selected, considering the current value.\r\n   * Uses strict equality by default.\r\n   *\r\n   * @param {T} option The option to test.\r\n   * @param {T} value The value to test against.\r\n   * @returns {boolean}\r\n   */\n  getOptionSelected: PropTypes.func,\n\n  /**\r\n   * If provided, the options will be grouped under the returned string.\r\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\r\n   *\r\n   * @param {T} options The options to group.\r\n   * @returns {string}\r\n   */\n  groupBy: PropTypes.func,\n\n  /**\r\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\r\n   * It should move focus to the first option and last option, respectively.\r\n   */\n  handleHomeEndKeys: PropTypes.bool,\n\n  /**\r\n   * This prop is used to help implement the accessibility logic.\r\n   * If you don't provide this prop. It falls back to a randomly generated id.\r\n   */\n  id: PropTypes.string,\n\n  /**\r\n   * If `true`, the highlight can move to the input.\r\n   */\n  includeInputInList: PropTypes.bool,\n\n  /**\r\n   * The input value.\r\n   */\n  inputValue: PropTypes.string,\n\n  /**\r\n   * The maximum number of tags that will be visible when not focused.\r\n   * Set `-1` to disable the limit.\r\n   */\n  limitTags: PropTypes.number,\n\n  /**\r\n   * The component used to render the listbox.\r\n   */\n  ListboxComponent: PropTypes.elementType,\n\n  /**\r\n   * Props applied to the Listbox element.\r\n   */\n  ListboxProps: PropTypes.object,\n\n  /**\r\n   * If `true`, the component is in a loading state.\r\n   */\n  loading: PropTypes.bool,\n\n  /**\r\n   * Text to display when in a loading state.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\r\n   */\n  loadingText: PropTypes.node,\n\n  /**\r\n   * If `true`, `value` must be an array and the menu will support multiple selections.\r\n   */\n  multiple: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .bool,\n\n  /**\r\n   * Text to display when there are no options.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\r\n   */\n  noOptionsText: PropTypes.node,\n\n  /**\r\n   * Callback fired when the value changes.\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   * @param {T|T[]} value The new value of the component.\r\n   * @param {string} reason One of \"create-option\", \"select-option\", \"remove-option\", \"blur\" or \"clear\".\r\n   */\n  onChange: PropTypes.func,\n\n  /**\r\n   * Callback fired when the popup requests to be closed.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"select-option\"`, `\"blur\"`.\r\n   */\n  onClose: PropTypes.func,\n\n  /**\r\n   * Callback fired when the highlight option changes.\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   * @param {T} option The highlighted option.\r\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`.\r\n   */\n  onHighlightChange: PropTypes.func,\n\n  /**\r\n   * Callback fired when the input value changes.\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   * @param {string} value The new value of the text input.\r\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\r\n   */\n  onInputChange: PropTypes.func,\n\n  /**\r\n   * Callback fired when the popup requests to be opened.\r\n   * Use in controlled mode (see open).\r\n   *\r\n   * @param {object} event The event source of the callback.\r\n   */\n  onOpen: PropTypes.func,\n\n  /**\r\n   * Control the popup` open state.\r\n   */\n  open: PropTypes.bool,\n\n  /**\r\n   * If `true`, the popup will open on input focus.\r\n   */\n  openOnFocus: PropTypes.bool,\n\n  /**\r\n   * Override the default text for the *open popup* icon button.\r\n   *\r\n   * For localization purposes, you can use the provided [translations](/guides/localization/).\r\n   */\n  openText: PropTypes.string,\n\n  /**\r\n   * Array of options.\r\n   */\n  options: PropTypes.array.isRequired,\n\n  /**\r\n   * The component used to render the body of the popup.\r\n   */\n  PaperComponent: PropTypes.elementType,\n\n  /**\r\n   * The component used to position the popup.\r\n   */\n  PopperComponent: PropTypes.elementType,\n\n  /**\r\n   * The icon to display in place of the default popup icon.\r\n   */\n  popupIcon: PropTypes.node,\n\n  /**\r\n   * Render the group.\r\n   *\r\n   * @param {any} option The group to render.\r\n   * @returns {ReactNode}\r\n   */\n  renderGroup: PropTypes.func,\n\n  /**\r\n   * Render the input.\r\n   *\r\n   * @param {object} params\r\n   * @returns {ReactNode}\r\n   */\n  renderInput: PropTypes.func.isRequired,\n\n  /**\r\n   * Render the option, use `getOptionLabel` by default.\r\n   *\r\n   * @param {T} option The option to render.\r\n   * @param {object} state The state of the component.\r\n   * @returns {ReactNode}\r\n   */\n  renderOption: PropTypes.func,\n\n  /**\r\n   * Render the selected value.\r\n   *\r\n   * @param {T[]} value The `value` provided to the component.\r\n   * @param {function} getTagProps A tag props getter.\r\n   * @returns {ReactNode}\r\n   */\n  renderTags: PropTypes.func,\n\n  /**\r\n   * If `true`, the input's text will be selected on focus.\r\n   * It helps the user clear the selected value.\r\n   */\n  selectOnFocus: PropTypes.bool,\n\n  /**\r\n   * The size of the autocomplete.\r\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\r\n   * The value of the autocomplete.\r\n   *\r\n   * The value must have reference equality with the option in order to be selected.\r\n   * You can customize the equality behavior with the `getOptionSelected` prop.\r\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAutocomplete'\n})(Autocomplete);"],"sourceRoot":""}