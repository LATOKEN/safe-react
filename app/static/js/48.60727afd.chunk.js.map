{"version":3,"sources":["logic/collectibles/utils/index.ts","routes/safe/components/Balances/SendModal/screens/ReviewCollectible/style.ts","routes/safe/components/Balances/SendModal/screens/ReviewCollectible/index.tsx","routes/safe/components/Balances/SendModal/utils.tsx","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","logic/collectibles/store/selectors/index.ts","logic/tokens/store/actions/fetchTokens.ts"],"names":["CK_ADDRESS","CHAIN_ID","ETHEREUM","RINKEBY","SAFE_TRANSFER_FROM_WITHOUT_DATA_HASH","generateERC721TransferTxData","tx","safeAddress","a","Error","contractAddress","assetAddress","methodToCall","sameAddress","_getChainId","transferParams","recipientAddress","nftTokenId","includes","NFTTokenInstance","getERC721TokenContract","getERC20TokenContract","methods","encodeABI","styles","createStyles","container","padding","md","lg","amount","marginLeft","sm","buttonRow","height","justifyContent","gap","useStyles","makeStyles","ReviewCollectible","onClose","onPrev","classes","shortener","textShortener","dispatch","useDispatch","useSafeAddress","txToken","useSelector","nftTokensSelector","find","tokenId","useState","txData","setTxData","useEffect","isCurrent","calculateERC721TransferData","encodedAbiTxData","console","error","message","TxModalWrapper","txTo","onSubmit","txParameters","delayExecution","createTransaction","to","valueInWei","txNonce","safeNonce","safeTxGas","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","STANDARD_TX","onBack","ModalHeader","subTitle","getStepTitle","title","Hairline","Block","className","SafeInfo","text","Divider","withArrow","Row","margin","Paragraph","color","noMargin","size","align","Col","xs","PrefixedEthHashInfo","hash","name","recipientName","strongName","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","charsStart","charsEnd","assetName","Img","alt","onError","setImageToPlaceholder","src","image","toString","currentStep","totalSteps","Wrapper","styled","div","StyledDivider","DividerSRC","StyledIcon","Icon","type","StyledBlock","border","currentSafeWithNames","address","ethBalance","safeName","nativeCurrency","getNativeCurrency","symbol","nftAssets","state","NFT_ASSETS_REDUCER_ID","nftTokens","NFT_TOKENS_REDUCER_ID","nftAssetsSelector","createSelector","assets","tokens","items","nftLoadedSelector","loaded","nftAssetsToListSelector","Object","values","nftAssetsAddressFromNftTokensSelector","userNftTokens","addresses","map","nftToken","uniqueAddresses","Set","Array","from","orderedNFTAssets","sort","b","localeCompare","nftAssetsFromNftTokensSelector","nftAssetsFromNftTokens","filter","tokenAddress","getWeb3","eth","Contract","ERC20Contract","abi","ERC721Contract"],"mappings":"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","file":"static/js/48.60727afd.chunk.js","sourcesContent":["import { _getChainId } from 'src/config'\nimport { CHAIN_ID } from 'src/config/chain.d'\nimport { getERC721TokenContract, getERC20TokenContract } from 'src/logic/tokens/store/actions/fetchTokens'\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\nimport { CollectibleTx } from 'src/routes/safe/components/Balances/SendModal/screens/ReviewCollectible'\n\n// CryptoKitties Contract Addresses by network\n// This is an exception made for a popular NFT that's not ERC721 standard-compatible,\n//  so we can allow the user to transfer the assets by using `transferFrom` instead of\n//  the standard `safeTransferFrom` method.\nexport const CK_ADDRESS = {\n  [CHAIN_ID.ETHEREUM]: '0x06012c8cf97bead5deae237070f9587f8e7a266d',\n  [CHAIN_ID.RINKEBY]: '0x16baf0de678e52367adc69fd067e5edd1d33e3bf',\n}\n\n// safeTransferFrom(address,address,uint256)\nexport const SAFE_TRANSFER_FROM_WITHOUT_DATA_HASH = '42842e0e'\n\n/**\n * Returns a method identifier based on the asset specified and the current network\n * @param {string} contractAddress\n * @returns string\n */\nexport const getTransferMethodByContractAddress = (contractAddress: string): string => {\n  if (sameAddress(contractAddress, CK_ADDRESS[_getChainId()])) {\n    // on mainnet `transferFrom` seems to work fine but we can assure that `transfer` will work on both networks\n    // so that's the reason why we're falling back to `transfer` for CryptoKitties\n    return 'transfer'\n  }\n\n  return `0x${SAFE_TRANSFER_FROM_WITHOUT_DATA_HASH}`\n}\n\n/**\n * Builds the encodedABI data for the transfer of an NFT token\n * @param {CollectibleTx} tx\n * @param {string} safeAddress\n * @returns Promise<string>\n */\nexport const generateERC721TransferTxData = async (\n  tx: CollectibleTx,\n  safeAddress: string | undefined,\n): Promise<string> => {\n  if (!safeAddress) {\n    throw new Error('Failed to build NFT transfer tx data. SafeAddress is not defined.')\n  }\n\n  const methodToCall = getTransferMethodByContractAddress(tx.assetAddress)\n  let transferParams = [tx.recipientAddress, tx.nftTokenId]\n  let NFTTokenInstance\n\n  if (methodToCall.includes(SAFE_TRANSFER_FROM_WITHOUT_DATA_HASH)) {\n    // we add the `from` param for the `safeTransferFrom` method call\n    transferParams = [safeAddress, ...transferParams]\n    NFTTokenInstance = getERC721TokenContract(tx.assetAddress)\n  } else {\n    // we fallback to an ERC20 Token contract whose ABI implements the `transfer` method\n    NFTTokenInstance = getERC20TokenContract(tx.assetAddress)\n  }\n\n  return NFTTokenInstance.methods[methodToCall](...transferParams).encodeABI()\n}\n","import { lg, md, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  container: {\n    padding: `${md} ${lg}`,\n  },\n  amount: {\n    marginLeft: sm,\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n})\n","import { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport { getExplorerInfo } from 'src/config'\nimport Divider from 'src/components/Divider'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Img from 'src/components/layout/Img'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { nftTokensSelector } from 'src/logic/collectibles/store/selectors'\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport { textShortener } from 'src/utils/strings'\nimport { generateERC721TransferTxData } from 'src/logic/collectibles/utils'\n\nimport { styles } from './style'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { TxModalWrapper } from 'src/routes/safe/components/Transactions/helpers/TxModalWrapper'\nimport { ModalHeader } from 'src/routes/safe/components/Balances/SendModal/screens/ModalHeader'\nimport { getStepTitle } from 'src/routes/safe/components/Balances/SendModal/utils'\nimport useSafeAddress from 'src/logic/currentSession/hooks/useSafeAddress'\n\nconst useStyles = makeStyles(styles)\n\nexport type CollectibleTx = {\n  recipientAddress: string\n  recipientName?: string\n  assetAddress: string\n  assetName: string\n  nftTokenId: string\n}\n\ntype Props = {\n  onClose: () => void\n  onPrev: () => void\n  tx: CollectibleTx\n}\n\nconst ReviewCollectible = ({ onClose, onPrev, tx }: Props): React.ReactElement => {\n  const classes = useStyles()\n  const shortener = textShortener()\n  const dispatch = useDispatch()\n  const { safeAddress } = useSafeAddress()\n  const nftTokens = useSelector(nftTokensSelector)\n\n  const txToken = nftTokens.find(\n    ({ assetAddress, tokenId }) => assetAddress === tx.assetAddress && tokenId === tx.nftTokenId,\n  )\n  const [txData, setTxData] = useState('')\n\n  useEffect(() => {\n    let isCurrent = true\n\n    const calculateERC721TransferData = async () => {\n      try {\n        const encodedAbiTxData = await generateERC721TransferTxData(tx, safeAddress)\n        if (isCurrent) {\n          setTxData(encodedAbiTxData)\n        }\n      } catch (error) {\n        console.error('Error calculating ERC721 transfer data:', error.message)\n      }\n    }\n    calculateERC721TransferData()\n\n    return () => {\n      isCurrent = false\n    }\n  }, [safeAddress, tx])\n\n  const submitTx = (txParameters: TxParameters, delayExecution: boolean) => {\n    try {\n      if (safeAddress) {\n        dispatch(\n          createTransaction({\n            safeAddress,\n            to: tx.assetAddress,\n            valueInWei: '0',\n            txData,\n            txNonce: txParameters.safeNonce,\n            safeTxGas: txParameters.safeTxGas,\n            ethParameters: txParameters,\n            notifiedTransaction: TX_NOTIFICATION_TYPES.STANDARD_TX,\n            delayExecution,\n          }),\n        )\n      } else {\n        console.error('There was an error trying to submit the transaction, the safeAddress was not found')\n      }\n    } catch (error) {\n      console.error('Error creating sendCollectible Tx:', error)\n    } finally {\n      onClose()\n    }\n  }\n\n  return (\n    <TxModalWrapper txData={txData} txTo={tx.assetAddress} onSubmit={submitTx} onBack={onPrev}>\n      <ModalHeader onClose={onClose} subTitle={getStepTitle(2, 2)} title=\"Send NFT\" />\n      <Hairline />\n      <Block className={classes.container}>\n        <SafeInfo text=\"Sending from\" />\n        <Divider withArrow />\n        <Row margin=\"xs\">\n          <Paragraph color=\"disabled\" noMargin size=\"lg\">\n            Recipient\n          </Paragraph>\n        </Row>\n        <Row align=\"center\" margin=\"md\">\n          <Col xs={12}>\n            <PrefixedEthHashInfo\n              hash={tx.recipientAddress}\n              name={tx.recipientName}\n              strongName\n              showAvatar\n              showCopyBtn\n              explorerUrl={getExplorerInfo(tx.recipientAddress)}\n            />\n          </Col>\n        </Row>\n        <Row margin=\"xs\">\n          <Paragraph color=\"disabled\" noMargin size=\"lg\">\n            {textShortener({ charsStart: 40, charsEnd: 0 })(tx.assetName)}\n          </Paragraph>\n        </Row>\n        {txToken && (\n          <Row align=\"center\" margin=\"md\">\n            <Img alt={txToken.name} height={28} onError={setImageToPlaceholder} src={txToken.image} />\n            <Paragraph className={classes.amount} noMargin size=\"md\">\n              {shortener(txToken.name)} (Token ID: {shortener(txToken.tokenId.toString())})\n            </Paragraph>\n          </Row>\n        )}\n      </Block>\n    </TxModalWrapper>\n  )\n}\n\nexport default ReviewCollectible\n","export const getStepTitle = (currentStep: number, totalSteps: number): string => `Step ${currentStep} of ${totalSteps}`\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  margin: 8px 0;\n\n  svg {\n    margin: 0 12px 0 4px;\n  }\n`\nconst StyledDivider = styled(DividerSRC)`\n  width: 100%;\n`\n\nconst StyledIcon = styled(Icon)`\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%);\n  padding: 0 20px;\n  background: white;\n\n  & svg {\n    margin: 0;\n  }\n`\n\ntype Props = {\n  withArrow?: boolean\n}\n\nconst Divider = ({ withArrow }: Props): ReactElement => (\n  <Wrapper>\n    {withArrow && <StyledIcon type=\"arrowDown\" size=\"md\" />}\n    <StyledDivider />\n  </Wrapper>\n)\n\nexport default Divider\n","import { useSelector } from 'react-redux'\nimport styled from 'styled-components'\n\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Bold from 'src/components/layout/Bold'\nimport { border, xs } from 'src/theme/variables'\nimport Block from 'src/components/layout/Block'\nimport Row from 'src/components/layout/Row'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\n\nconst StyledBlock = styled(Block)`\n  font-size: 12px;\n  line-height: 1.08;\n  letter-spacing: -0.5px;\n  background-color: ${border};\n  width: fit-content;\n  padding: 5px 10px;\n  margin-top: ${xs};\n  margin-left: 40px;\n  border-radius: 3px;\n`\n\ntype SafeInfoProps = {\n  text?: string\n}\n\nconst SafeInfo = ({ text }: SafeInfoProps): React.ReactElement => {\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\n  const nativeCurrency = getNativeCurrency()\n\n  return (\n    <>\n      {text && (\n        <Row margin=\"sm\">\n          <Paragraph color=\"black400\" noMargin size=\"lg\">\n            {text}\n          </Paragraph>\n        </Row>\n      )}\n      <PrefixedEthHashInfo\n        hash={safeAddress}\n        name={safeName}\n        strongName\n        explorerUrl={getExplorerInfo(safeAddress)}\n        showAvatar\n        showCopyBtn\n      />\n      {ethBalance && (\n        <StyledBlock>\n          <Paragraph noMargin>\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCurrency.symbol}`}</Bold>\n          </Paragraph>\n        </StyledBlock>\n      )}\n    </>\n  )\n}\n\nexport default SafeInfo\n","import { createSelector } from 'reselect'\nimport { NFTAsset, NFTAssets, NFTTokens, NFTTokensStore } from 'src/logic/collectibles/sources/collectibles.d'\n\nimport { AppReduxState } from 'src/store'\nimport { NFT_ASSETS_REDUCER_ID, NFT_TOKENS_REDUCER_ID } from 'src/logic/collectibles/store/reducer/collectibles'\nexport const nftAssets = (state: AppReduxState): NFTAssets => state[NFT_ASSETS_REDUCER_ID]\nexport const nftTokens = (state: AppReduxState): NFTTokensStore => state[NFT_TOKENS_REDUCER_ID]\n\nexport const nftAssetsSelector = createSelector(nftAssets, (assets) => assets)\n\nexport const nftTokensSelector = createSelector(nftTokens, (tokens) => tokens.items)\n\nexport const nftLoadedSelector = createSelector(nftTokens, (tokens) => tokens.loaded)\n\nconst nftAssetsToListSelector = createSelector(nftAssets, (assets): NFTAsset[] => {\n  return assets ? Object.values(assets) : []\n})\n\nconst nftAssetsAddressFromNftTokensSelector = createSelector(nftTokensSelector, (userNftTokens): string[] => {\n  const addresses = userNftTokens.map((nftToken) => nftToken.assetAddress)\n  const uniqueAddresses = new Set(addresses)\n  return Array.from(uniqueAddresses)\n})\n\nexport const orderedNFTAssets = createSelector(\n  nftTokensSelector,\n  (userNftTokens): NFTTokens => userNftTokens.sort((a, b) => a.name.localeCompare(b.name)),\n)\n\nexport const nftAssetsFromNftTokensSelector = createSelector(\n  nftAssetsToListSelector,\n  nftAssetsAddressFromNftTokensSelector,\n  (nftAssets, nftAssetsFromNftTokens): NFTAsset[] => {\n    return nftAssets\n      .sort((a, b) => a.name.localeCompare(b.name))\n      .filter(({ address }) => nftAssetsFromNftTokens.includes(address))\n  },\n)\n","import ERC20Contract from '@openzeppelin/contracts/build/contracts/ERC20.json'\nimport ERC721Contract from '@openzeppelin/contracts/build/contracts/ERC721.json'\nimport { AbiItem } from 'web3-utils'\n\nimport { ERC20 } from 'src/types/contracts/ERC20.d'\nimport { ERC721 } from 'src/types/contracts/ERC721.d'\nimport { getWeb3 } from 'src/logic/wallets/getWeb3'\n\nconst createERC20TokenContract = (tokenAddress: string): ERC20 => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract(ERC20Contract.abi as AbiItem[], tokenAddress) as unknown as ERC20\n}\n\nconst createERC721TokenContract = (tokenAddress: string): ERC721 => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract(ERC721Contract.abi as AbiItem[], tokenAddress) as unknown as ERC721\n}\n\nexport const getERC20TokenContract = createERC20TokenContract\n\nexport const getERC721TokenContract = createERC721TokenContract\n"],"sourceRoot":""}