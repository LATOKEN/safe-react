{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ReviewSendFundsTx/style.ts","logic/safe/transactions/allowance.ts","routes/safe/components/Transactions/helpers/SpendingLimitModalWrapper/index.tsx","routes/safe/components/Balances/SendModal/screens/ReviewSendFundsTx/index.tsx","routes/safe/components/Balances/SendModal/utils.tsx","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","routes/safe/components/Balances/SendModal/TransferAmount/index.tsx","logic/tokens/store/actions/fetchTokens.ts"],"names":["styles","createStyles","container","padding","md","lg","amount","marginLeft","sm","buttonRow","height","justifyContent","gap","estimateGasForAllowanceTransfer","a","safe","token","to","paymentToken","payment","delegate","signature","spendingLimitModuleAddress","getSpendingLimitModuleAddress","_getChainId","spendingLimit","getSpendingLimitContract","methods","executeAllowanceTransfer","estimateGas","from","checkAllowanceTransferExecution","call","then","catch","e","console","warn","Container","styled","div","SpendingLimitModalWrapper","children","txNonce","txTo","txType","onSubmit","onBack","onClose","submitText","isSubmitDisabled","txToken","txDelegate","txAmount","useState","manualGasPrice","setManualGasPrice","manualMaxPrioFee","setManualMaxPrioFee","manualGasLimit","setManualGasLimit","isSendingNativeToken","useMemo","sameAddress","address","getNativeCurrencyAddress","safeAddress","useSafeAddress","nativeCurrency","getNativeCurrency","allowanceTransferParams","ZERO_ADDRESS","toTokenUnit","decimals","EMPTY_DATA","estimateGasLimit","useCallback","gasLimit","useEstimateGasLimit","checkAllowanceTransferTx","useEstimateTransactionGas","isExecution","txData","gasPriceFormatted","gasPrice","gasMaxPrioFee","gasMaxPrioFeeFormatted","txEstimationExecutionStatus","useExecutionStatus","checkTxExecution","getGasCostFormatted","DEFAULT_GAS_LIMIT","calculateTotalGasCost","gasCostFormatted","useEstimationStatus","submitStatus","setSubmitStatus","parametersStatus","gasCost","symbol","EditableTxParameters","ethGasLimit","ethGasPrice","ethMaxPrioFee","safeNonce","closeEditModalCallback","txParameters","oldGasPrice","newGasPrice","oldGasLimit","newGasLimit","oldMaxPrioFee","newMaxPrioFee","toggleEditMode","TxEstimatedFeesDetail","onEdit","ReviewInfoText","isCreation","isRejection","Modal","Footer","withoutBorder","Buttons","cancelButtonProps","onClick","text","confirmButtonProps","ButtonStatus","LOADING","READY","logError","Errors","_802","onSubmitClick","status","disabled","color","undefined","EstimationStatus","testId","useStyles","makeStyles","ReviewSendFundsTx","onPrev","tx","classes","dispatch","useDispatch","tokens","useSelector","extendedSafeTokensSelector","find","txRecipient","recipientAddress","txValue","data","setData","useEffect","updateTxDataAsync","ERC20TokenInstance","getERC20TokenContract","erc20TransferAmount","transfer","encodeABI","useTxData","isSpendingLimitTx","isSpendingLimit","chainId","currentChainId","submitSpendingLimitTx","tokenSpendingLimit","spendingLimitTokenAddress","notification","getNotificationsFromTxType","TX_NOTIFICATION_TYPES","SPENDING_LIMIT_TX","trackEvent","MODALS_EVENTS","USE_SPENDING_LIMIT","beforeExecutionKey","showNotification","beforeExecution","allowanceTransferTx","closeNotification","key","read","sendParams","createSendParams","send","on","afterExecution","noMoreConfirmationsNeeded","_801","message","afterRejection","submitTx","delayExecution","createTransaction","valueInWei","safeTxGas","ethParameters","notifiedTransaction","STANDARD_TX","ModalWrapperBody","ModalHeader","subTitle","getStepTitle","title","Hairline","Block","className","Row","align","margin","TransferAmount","SafeInfo","Divider","withArrow","Paragraph","noMargin","size","Col","xs","PrefixedEthHashInfo","hash","name","recipientName","strongName","showCopyBtn","showAvatar","explorerUrl","getExplorerInfo","TxModalWrapper","currentStep","totalSteps","Wrapper","StyledDivider","DividerSRC","StyledIcon","Icon","type","StyledBlock","border","currentSafeWithNames","ethBalance","safeName","AmountWrapper","alt","onError","setImageToPlaceholder","src","logoUri","style","marginTop","tokenAddress","getWeb3","eth","Contract","ERC20Contract","abi","getERC721TokenContract","ERC721Contract"],"mappings":"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","file":"static/js/49.89371a79.chunk.js","sourcesContent":["import { lg, md, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  container: {\n    padding: `${md} ${lg}`,\n  },\n  amount: {\n    marginLeft: sm,\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n})\n","import BN from 'bn.js'\nimport { getSpendingLimitContract, getSpendingLimitModuleAddress } from 'src/logic/contracts/spendingLimitContracts'\nimport { _getChainId } from 'src/config'\n\nexport type AllowanceTransferProps = {\n  safe: string\n  token: string\n  to: string\n  amount: number | string | BN\n  paymentToken: string\n  payment: number | string | BN\n  delegate: string\n  signature: string | number[]\n}\n\nexport const estimateGasForAllowanceTransfer = async ({\n  safe,\n  token,\n  to,\n  amount,\n  paymentToken,\n  payment,\n  delegate,\n  signature,\n}: AllowanceTransferProps): Promise<number> => {\n  const spendingLimitModuleAddress = getSpendingLimitModuleAddress(_getChainId())\n  if (!spendingLimitModuleAddress) return 0\n\n  const spendingLimit = getSpendingLimitContract(spendingLimitModuleAddress)\n\n  return spendingLimit.methods\n    .executeAllowanceTransfer(safe, token, to, amount, paymentToken, payment, delegate, signature)\n    .estimateGas({ from: delegate })\n}\n\nexport const checkAllowanceTransferExecution = async ({\n  safe,\n  token,\n  to,\n  amount,\n  paymentToken,\n  payment,\n  delegate,\n  signature,\n}: AllowanceTransferProps): Promise<boolean> => {\n  const spendingLimitModuleAddress = getSpendingLimitModuleAddress(_getChainId())\n  if (!spendingLimitModuleAddress) return false\n\n  const spendingLimit = getSpendingLimitContract(spendingLimitModuleAddress)\n\n  return spendingLimit.methods\n    .executeAllowanceTransfer(safe, token, to, amount, paymentToken, payment, delegate, signature)\n    .call({ from: delegate })\n    .then(() => true)\n    .catch((e) => {\n      console.warn('Transaction will fail\\n\\n', e)\n      return false\n    })\n}\n","import { ReactNode, useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\n\nimport {\n  calculateTotalGasCost,\n  EstimationStatus,\n  useEstimateTransactionGas,\n} from 'src/logic/hooks/useEstimateTransactionGas'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\nimport { ReviewInfoText } from 'src/components/ReviewInfoText'\nimport { TxEstimatedFeesDetail } from 'src/routes/safe/components/Transactions/helpers/TxEstimatedFeesDetail'\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { ButtonStatus, Modal } from 'src/components/Modal'\nimport { lg, md } from 'src/theme/variables'\nimport { Operation } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { getNativeCurrency } from 'src/config'\nimport useSafeAddress from 'src/logic/currentSession/hooks/useSafeAddress'\nimport { sameAddress, ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\nimport { DEFAULT_GAS_LIMIT, useEstimateGasLimit } from 'src/logic/hooks/useEstimateGasLimit'\nimport { useExecutionStatus } from 'src/logic/hooks/useExecutionStatus'\nimport {\n  AllowanceTransferProps,\n  checkAllowanceTransferExecution,\n  estimateGasForAllowanceTransfer,\n} from 'src/logic/safe/transactions/allowance'\nimport { toTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\nimport { Token } from 'src/logic/tokens/store/model/token'\nimport { getNativeCurrencyAddress } from 'src/config/utils'\n\ntype Props = {\n  children: ReactNode\n  operation?: Operation\n  txNonce?: string\n  txData: string\n  txValue?: string\n  txTo?: string\n  txType?: string\n  onSubmit: (txParams: TxParameters) => void\n  onClose?: () => void\n  onBack?: (...rest: any) => void\n  submitText?: string\n  isSubmitDisabled?: boolean\n  txToken?: Token\n  txDelegate?: string\n  txAmount?: string\n}\n\nconst Container = styled.div`\n  padding: 0 ${lg} ${md};\n`\n\nexport const SpendingLimitModalWrapper = ({\n  children,\n  txNonce,\n  txTo,\n  txType,\n  onSubmit,\n  onBack,\n  onClose,\n  submitText,\n  isSubmitDisabled,\n  txToken,\n  txDelegate,\n  txAmount,\n}: Props): React.ReactElement => {\n  const [manualGasPrice, setManualGasPrice] = useState<string>()\n  const [manualMaxPrioFee, setManualMaxPrioFee] = useState<string>()\n  const [manualGasLimit, setManualGasLimit] = useState<string>()\n  const isSendingNativeToken = useMemo(() => sameAddress(txToken?.address, getNativeCurrencyAddress()), [txToken])\n  const { safeAddress } = useSafeAddress()\n  const nativeCurrency = getNativeCurrency()\n\n  const allowanceTransferParams = useMemo((): AllowanceTransferProps => {\n    return {\n      safe: safeAddress,\n      token: isSendingNativeToken ? ZERO_ADDRESS : txToken?.address || ZERO_ADDRESS,\n      to: txTo || ZERO_ADDRESS,\n      amount: toTokenUnit(txAmount || '0', txToken?.decimals || 0),\n      paymentToken: ZERO_ADDRESS,\n      payment: 0,\n      delegate: txDelegate || ZERO_ADDRESS,\n      signature: EMPTY_DATA,\n    }\n  }, [isSendingNativeToken, safeAddress, txAmount, txDelegate, txTo, txToken?.address, txToken?.decimals])\n\n  const estimateGasLimit = useCallback(() => {\n    return estimateGasForAllowanceTransfer(allowanceTransferParams)\n  }, [allowanceTransferParams])\n\n  const gasLimit = useEstimateGasLimit(estimateGasLimit, true, EMPTY_DATA, manualGasLimit)\n\n  const checkAllowanceTransferTx = useCallback(() => {\n    return checkAllowanceTransferExecution(allowanceTransferParams)\n  }, [allowanceTransferParams])\n\n  const { gasPriceFormatted, gasPrice, gasMaxPrioFee, gasMaxPrioFeeFormatted } = useEstimateTransactionGas({\n    manualGasPrice,\n    manualMaxPrioFee,\n    isExecution: true,\n    txData: EMPTY_DATA,\n  })\n\n  const txEstimationExecutionStatus = useExecutionStatus({\n    checkTxExecution: checkAllowanceTransferTx,\n    isExecution: true,\n    txData: '',\n    gasLimit,\n    gasPrice,\n    gasMaxPrioFee,\n  })\n\n  const getGasCostFormatted = useCallback(() => {\n    if (!gasLimit || gasLimit === DEFAULT_GAS_LIMIT || !gasPrice || !gasMaxPrioFee) return '> 0.001'\n    return calculateTotalGasCost(gasLimit, gasPrice, gasMaxPrioFee, nativeCurrency.decimals).gasCostFormatted\n  }, [gasLimit, gasMaxPrioFee, gasPrice, nativeCurrency.decimals])\n\n  const [submitStatus, setSubmitStatus] = useEstimationStatus(txEstimationExecutionStatus)\n\n  const onEditClose = (txParameters: TxParameters) => {\n    const oldGasPrice = gasPriceFormatted\n    const newGasPrice = txParameters.ethGasPrice\n    const oldGasLimit = gasLimit\n    const newGasLimit = txParameters.ethGasLimit\n    const oldMaxPrioFee = gasMaxPrioFeeFormatted\n    const newMaxPrioFee = txParameters.ethMaxPrioFee\n\n    if (oldGasPrice !== newGasPrice) {\n      setManualGasPrice(newGasPrice)\n    }\n\n    if (oldMaxPrioFee !== newMaxPrioFee) {\n      setManualMaxPrioFee(newMaxPrioFee)\n    }\n\n    if (oldGasLimit !== newGasLimit) {\n      setManualGasLimit(newGasLimit)\n    }\n  }\n\n  const onSubmitClick = (txParameters: TxParameters) => {\n    setSubmitStatus(ButtonStatus.LOADING)\n\n    if (!safeAddress) {\n      setSubmitStatus(ButtonStatus.READY)\n      logError(Errors._802)\n      return\n    }\n\n    onSubmit(txParameters)\n  }\n\n  const parametersStatus = 'ENABLED'\n\n  const gasCost = `${getGasCostFormatted()} ${nativeCurrency.symbol}`\n\n  return (\n    <EditableTxParameters\n      isExecution\n      ethGasLimit={gasLimit}\n      ethGasPrice={gasPriceFormatted}\n      ethMaxPrioFee={gasMaxPrioFeeFormatted}\n      safeNonce={txNonce}\n      parametersStatus={parametersStatus}\n      closeEditModalCallback={onEditClose}\n      txType={txType}\n    >\n      {(txParameters: TxParameters, toggleEditMode: () => void) => (\n        <>\n          {children}\n\n          <Container>\n            <TxEstimatedFeesDetail\n              txParameters={txParameters}\n              gasCost={gasCost}\n              onEdit={toggleEditMode}\n              parametersStatus={parametersStatus}\n            />\n          </Container>\n\n          <ReviewInfoText\n            isCreation\n            isExecution\n            isRejection={false}\n            safeNonce={txParameters.safeNonce}\n            txEstimationExecutionStatus={txEstimationExecutionStatus}\n          />\n\n          <Modal.Footer withoutBorder>\n            <Modal.Footer.Buttons\n              cancelButtonProps={{ onClick: onBack || onClose, text: onBack ? 'Back' : 'Cancel' }}\n              confirmButtonProps={{\n                onClick: () => onSubmitClick(txParameters),\n                status: submitStatus,\n                disabled: isSubmitDisabled,\n                color: undefined,\n                text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : submitText,\n                testId: 'submit-tx-btn',\n              }}\n            />\n          </Modal.Footer>\n        </>\n      )}\n    </EditableTxParameters>\n  )\n}\n","import { RecordOf } from 'immutable'\nimport { makeStyles } from '@material-ui/core/styles'\nimport React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { toTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\nimport Divider from 'src/components/Divider'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\nimport { currentChainId } from 'src/logic/config/store/selectors'\nimport { getSpendingLimitContract, getSpendingLimitModuleAddress } from 'src/logic/contracts/spendingLimitContracts'\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\nimport { getERC20TokenContract } from 'src/logic/tokens/store/actions/fetchTokens'\nimport { sameAddress, ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\nimport { extendedSafeTokensSelector } from 'src/routes/safe/container/selector'\nimport { SpendingLimit } from 'src/logic/safe/store/models/safe'\nimport { TokenProps } from 'src/logic/tokens/store/model/token'\n\nimport { styles } from './style'\nimport { TxModalWrapper } from 'src/routes/safe/components/Transactions/helpers/TxModalWrapper'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { getNativeCurrencyAddress } from 'src/config/utils'\nimport { ModalHeader } from 'src/routes/safe/components/Balances/SendModal/screens/ModalHeader'\nimport { isSpendingLimit } from 'src/routes/safe/components/Transactions/helpers/utils'\nimport { TransferAmount } from 'src/routes/safe/components/Balances/SendModal/TransferAmount'\nimport { getStepTitle } from 'src/routes/safe/components/Balances/SendModal/utils'\nimport { trackEvent } from 'src/utils/googleTagManager'\nimport { MODALS_EVENTS } from 'src/utils/events/modals'\nimport useSafeAddress from 'src/logic/currentSession/hooks/useSafeAddress'\nimport { createSendParams } from 'src/logic/safe/transactions/gas'\nimport { SpendingLimitModalWrapper } from 'src/routes/safe/components/Transactions/helpers/SpendingLimitModalWrapper'\nimport { getNotificationsFromTxType } from 'src/logic/notifications'\nimport { closeNotification, showNotification } from 'src/logic/notifications/store/notifications'\n\nconst useStyles = makeStyles(styles)\n\nexport type ReviewTxProp = {\n  recipientAddress: string\n  recipientName?: string\n  amount: string\n  txRecipient: string\n  token: string\n  txType?: string\n  tokenSpendingLimit?: SpendingLimit\n}\n\ntype ReviewTxProps = {\n  onClose: () => void\n  onPrev: () => void\n  tx: ReviewTxProp\n}\n\nconst useTxData = (\n  isSendingNativeToken: boolean,\n  txAmount: string,\n  recipientAddress: string,\n  txToken?: RecordOf<TokenProps>,\n): string => {\n  const [data, setData] = useState('')\n\n  useEffect(() => {\n    const updateTxDataAsync = async () => {\n      if (!txToken) {\n        return\n      }\n\n      let txData = EMPTY_DATA\n      if (!isSendingNativeToken) {\n        const ERC20TokenInstance = getERC20TokenContract(txToken.address)\n        const erc20TransferAmount = toTokenUnit(txAmount, txToken.decimals)\n        txData = ERC20TokenInstance.methods.transfer(recipientAddress, erc20TransferAmount).encodeABI()\n      }\n      setData(txData)\n    }\n\n    updateTxDataAsync()\n  }, [isSendingNativeToken, recipientAddress, txAmount, txToken])\n\n  return data\n}\n\nconst ReviewSendFundsTx = ({ onClose, onPrev, tx }: ReviewTxProps): React.ReactElement => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const { safeAddress } = useSafeAddress()\n  const nativeCurrency = getNativeCurrency()\n  const tokens = useSelector(extendedSafeTokensSelector)\n  const txToken = useMemo(() => tokens.find((token) => sameAddress(token.address, tx.token)), [tokens, tx.token])\n  const isSendingNativeToken = useMemo(() => sameAddress(txToken?.address, getNativeCurrencyAddress()), [txToken])\n  const txRecipient = isSendingNativeToken ? tx.recipientAddress : txToken?.address || ''\n  const txValue = isSendingNativeToken ? toTokenUnit(tx.amount, nativeCurrency.decimals) : '0'\n  const txData = useTxData(isSendingNativeToken, tx.amount, tx.recipientAddress, txToken)\n  const isSpendingLimitTx = isSpendingLimit(tx.txType)\n  const chainId = useSelector(currentChainId)\n\n  const submitSpendingLimitTx = useCallback(\n    async (txParameters: TxParameters) => {\n      if (isSpendingLimitTx && txToken && tx.tokenSpendingLimit) {\n        const spendingLimitTokenAddress = isSendingNativeToken ? ZERO_ADDRESS : txToken.address\n        const spendingLimitModuleAddress = getSpendingLimitModuleAddress(chainId)\n        if (!spendingLimitModuleAddress) return\n        const spendingLimit = getSpendingLimitContract(spendingLimitModuleAddress)\n        const notification = getNotificationsFromTxType(TX_NOTIFICATION_TYPES.SPENDING_LIMIT_TX)\n\n        trackEvent(MODALS_EVENTS.USE_SPENDING_LIMIT)\n\n        let beforeExecutionKey = ''\n        try {\n          beforeExecutionKey = dispatch(showNotification(notification.beforeExecution)) as unknown as string\n\n          const allowanceTransferTx = await spendingLimit.methods.executeAllowanceTransfer(\n            safeAddress,\n            spendingLimitTokenAddress,\n            tx.recipientAddress,\n            toTokenUnit(tx.amount, txToken.decimals),\n            ZERO_ADDRESS,\n            0,\n            tx.tokenSpendingLimit.delegate,\n            EMPTY_DATA,\n          )\n\n          dispatch(closeNotification({ key: beforeExecutionKey, read: false }))\n\n          const sendParams = createSendParams(tx.tokenSpendingLimit.delegate, txParameters)\n\n          await allowanceTransferTx.send(sendParams).on('transactionHash', () => {\n            onClose()\n            dispatch(showNotification(notification.afterExecution.noMoreConfirmationsNeeded))\n          })\n        } catch (err) {\n          logError(Errors._801, err.message)\n          dispatch(closeNotification({ key: beforeExecutionKey, read: false }))\n          dispatch(showNotification(notification.afterRejection))\n        }\n        onClose()\n      }\n    },\n    [\n      chainId,\n      dispatch,\n      isSendingNativeToken,\n      isSpendingLimitTx,\n      onClose,\n      safeAddress,\n      tx.amount,\n      tx.recipientAddress,\n      tx.tokenSpendingLimit,\n      txToken,\n    ],\n  )\n\n  const submitTx = useCallback(\n    async (txParameters: TxParameters, delayExecution: boolean) => {\n      dispatch(\n        createTransaction({\n          safeAddress: safeAddress,\n          to: txRecipient as string,\n          valueInWei: txValue,\n          txData,\n          txNonce: txParameters.safeNonce,\n          safeTxGas: txParameters.safeTxGas,\n          ethParameters: txParameters,\n          notifiedTransaction: TX_NOTIFICATION_TYPES.STANDARD_TX,\n          delayExecution,\n        }),\n      )\n      onClose()\n    },\n    [dispatch, onClose, safeAddress, txData, txRecipient, txValue],\n  )\n\n  const ModalWrapperBody = (\n    <>\n      <ModalHeader onClose={onClose} subTitle={getStepTitle(2, 2)} title=\"Send funds\" />\n\n      <Hairline />\n\n      {isSpendingLimitTx ? (\n        <Block className={classes.container}>\n          Spending limit transactions only appear in the interface once they are successfully mined and indexed. Pending\n          transactions can only be viewed in your signer wallet application or under your owner wallet address through a\n          Blockchain Explorer.\n        </Block>\n      ) : null}\n\n      <Block className={classes.container}>\n        {/* Amount */}\n        {txToken && (\n          <Row align=\"center\" margin=\"md\">\n            <TransferAmount token={txToken} text={`${tx.amount} ${txToken.symbol}`} />\n          </Row>\n        )}\n\n        {/* SafeInfo */}\n        <SafeInfo text=\"Sending from\" />\n        <Divider withArrow />\n\n        {/* Recipient */}\n        <Row margin=\"xs\">\n          <Paragraph color=\"disabled\" noMargin size=\"lg\">\n            Recipient\n          </Paragraph>\n        </Row>\n        <Row align=\"center\" margin=\"md\" data-testid=\"recipient-review-step\">\n          <Col xs={12}>\n            <PrefixedEthHashInfo\n              hash={tx.recipientAddress}\n              name={tx.recipientName}\n              strongName\n              showCopyBtn\n              showAvatar\n              explorerUrl={getExplorerInfo(tx.recipientAddress)}\n            />\n          </Col>\n        </Row>\n      </Block>\n    </>\n  )\n\n  if (isSpendingLimitTx) {\n    return (\n      <SpendingLimitModalWrapper\n        txData=\"\"\n        txToken={txToken}\n        txAmount={tx.amount}\n        txDelegate={tx.tokenSpendingLimit?.delegate}\n        txTo={tx.recipientAddress}\n        onSubmit={submitSpendingLimitTx}\n        onBack={onPrev}\n        txType={tx.txType || ''}\n      >\n        {ModalWrapperBody}\n      </SpendingLimitModalWrapper>\n    )\n  }\n\n  return (\n    <TxModalWrapper\n      txData={txData}\n      txValue={txValue}\n      txTo={txRecipient}\n      txType={tx.txType || ''}\n      onSubmit={submitTx}\n      onBack={onPrev}\n    >\n      {ModalWrapperBody}\n    </TxModalWrapper>\n  )\n}\n\nexport default ReviewSendFundsTx\n","export const getStepTitle = (currentStep: number, totalSteps: number): string => `Step ${currentStep} of ${totalSteps}`\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  margin: 8px 0;\n\n  svg {\n    margin: 0 12px 0 4px;\n  }\n`\nconst StyledDivider = styled(DividerSRC)`\n  width: 100%;\n`\n\nconst StyledIcon = styled(Icon)`\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%);\n  padding: 0 20px;\n  background: white;\n\n  & svg {\n    margin: 0;\n  }\n`\n\ntype Props = {\n  withArrow?: boolean\n}\n\nconst Divider = ({ withArrow }: Props): ReactElement => (\n  <Wrapper>\n    {withArrow && <StyledIcon type=\"arrowDown\" size=\"md\" />}\n    <StyledDivider />\n  </Wrapper>\n)\n\nexport default Divider\n","import { useSelector } from 'react-redux'\nimport styled from 'styled-components'\n\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Bold from 'src/components/layout/Bold'\nimport { border, xs } from 'src/theme/variables'\nimport Block from 'src/components/layout/Block'\nimport Row from 'src/components/layout/Row'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\n\nconst StyledBlock = styled(Block)`\n  font-size: 12px;\n  line-height: 1.08;\n  letter-spacing: -0.5px;\n  background-color: ${border};\n  width: fit-content;\n  padding: 5px 10px;\n  margin-top: ${xs};\n  margin-left: 40px;\n  border-radius: 3px;\n`\n\ntype SafeInfoProps = {\n  text?: string\n}\n\nconst SafeInfo = ({ text }: SafeInfoProps): React.ReactElement => {\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\n  const nativeCurrency = getNativeCurrency()\n\n  return (\n    <>\n      {text && (\n        <Row margin=\"sm\">\n          <Paragraph color=\"black400\" noMargin size=\"lg\">\n            {text}\n          </Paragraph>\n        </Row>\n      )}\n      <PrefixedEthHashInfo\n        hash={safeAddress}\n        name={safeName}\n        strongName\n        explorerUrl={getExplorerInfo(safeAddress)}\n        showAvatar\n        showCopyBtn\n      />\n      {ethBalance && (\n        <StyledBlock>\n          <Paragraph noMargin>\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCurrency.symbol}`}</Bold>\n          </Paragraph>\n        </StyledBlock>\n      )}\n    </>\n  )\n}\n\nexport default SafeInfo\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\n\nimport { Token } from 'src/logic/tokens/store/model/token'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Block from 'src/components/layout/Block'\n\nconst AmountWrapper = styled.div`\n  width: 100%;\n  text-align: center;\n`\n\nconst StyledBlock = styled(Block)`\n  width: 40px;\n  margin: auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  & img {\n    width: 26px;\n    height: auto;\n  }\n`\n\nexport type TransferAmountProps = {\n  token: Token\n  text: string\n}\n\nexport const TransferAmount = ({ token, text }: TransferAmountProps): ReactElement => {\n  return (\n    <AmountWrapper>\n      <StyledBlock>\n        <img alt={token.name} onError={setImageToPlaceholder} src={token.logoUri || ''} />\n      </StyledBlock>\n      <Paragraph size=\"xl\" color=\"black600\" noMargin style={{ marginTop: '8px' }}>\n        {text}\n      </Paragraph>\n    </AmountWrapper>\n  )\n}\n","import ERC20Contract from '@openzeppelin/contracts/build/contracts/ERC20.json'\nimport ERC721Contract from '@openzeppelin/contracts/build/contracts/ERC721.json'\nimport { AbiItem } from 'web3-utils'\n\nimport { ERC20 } from 'src/types/contracts/ERC20.d'\nimport { ERC721 } from 'src/types/contracts/ERC721.d'\nimport { getWeb3 } from 'src/logic/wallets/getWeb3'\n\nconst createERC20TokenContract = (tokenAddress: string): ERC20 => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract(ERC20Contract.abi as AbiItem[], tokenAddress) as unknown as ERC20\n}\n\nconst createERC721TokenContract = (tokenAddress: string): ERC721 => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract(ERC721Contract.abi as AbiItem[], tokenAddress) as unknown as ERC721\n}\n\nexport const getERC20TokenContract = createERC20TokenContract\n\nexport const getERC721TokenContract = createERC721TokenContract\n"],"sourceRoot":""}