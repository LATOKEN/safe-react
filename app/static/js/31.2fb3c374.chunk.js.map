{"version":3,"sources":["logic/contractInteraction/sources/ABIService/index.ts","routes/safe/components/Balances/SendModal/screens/ContractInteraction/ContractABI/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/FormErrorMessage/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/MethodsDropdown/style.ts","routes/safe/components/Balances/SendModal/screens/ContractInteraction/MethodsDropdown/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/RenderInputParams/InputComponent/ArrayTypeInput.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/RenderInputParams/InputComponent/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/RenderInputParams/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/RenderOutputParams/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/NativeCoinValue/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/index.tsx","routes/safe/components/Balances/SendModal/utils.tsx","assets/icons/qrcode.svg","components/ScanQRModal/style.ts","components/ScanQRModal/index.tsx","components/ScanQRModal/ScanQRWrapper/index.tsx","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","routes/safe/components/Balances/SendModal/screens/AddressBookInput/style.ts","routes/safe/components/Balances/SendModal/screens/AddressBookInput/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/style.ts","../node_modules/@material-ui/icons/Search.js","components/forms/TextAreaField/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/Buttons/index.tsx","routes/safe/components/Balances/SendModal/screens/ContractInteraction/EthAddressInput/index.tsx","routes/safe/components/CurrencyDropdown/img/check.svg","routes/safe/components/CurrencyDropdown/style.ts"],"names":["getMethodSignature","inputs","name","params","map","x","type","join","getSignatureHash","signature","keccak256","toString","isAllowedMethod","getMethodAction","stateMutability","includes","extractUsefulMethods","abi","filter","method","action","methodSignature","signatureHash","getMethodSignatureAndSignatureHash","sort","a","b","toLowerCase","NO_DATA","hasUsefulMethods","JSON","parse","length","e","ContractABI","contractAddress","useField","subscription","value","input","mutators","useForm","setAbiValue","useRef","useEffect","validateAndSetAbi","isEthereumAddress","undefined","mustBeEthereumAddress","mustBeEthereumContractAddress","isEthereumContractAddress","parsePrefixedAddress","address","getContractABI","current","Row","margin","Col","TextAreaField","placeholder","label","validate","useStyles","makeStyles","styles","FormErrorMessage","classes","useFormState","modifiedSinceLastSubmit","submitError","align","className","fullWidth","Paragraph","color","noMargin","size","style","letterSpacing","overflowWrap","useButtonStyles","button","borderRadius","boxSizing","cursor","fontSize","fontWeight","lineHeight","marginRight","minWidth","props","buttonWidth","outline","padding","textAlign","opacity","buttonInner","display","height","position","width","borderLeft","borderRight","borderTop","content","right","top","openMenuButton","borderBottom","MENU_WIDTH","StyledText","styled","Text","MethodsDropdown","onChange","useDropdownStyles","buttonClasses","valid","meta","selectedMethodByDefault","initialValues","selectedMethod","useState","setSelectedMethod","methodsList","setMethodsList","methodsListFiltered","setMethodsListFiltered","anchorEl","setAnchorEl","searchParams","setSearchParams","handleClose","NO_CONTRACT","theme","DropdownListTheme","Button","onClick","event","currentTarget","variant","classNames","Menu","anchorOrigin","horizontal","vertical","elevation","getContentAnchorEl","id","keepMounted","onClose","open","PaperProps","transformOrigin","MenuItem","listItemSearch","search","searchIcon","InputBase","root","inputRoot","inputInput","inputProps","target","dropdownItemsScrollWrapper","listItem","chosenMethod","ListItemText","primary","ListItemIcon","iconRight","alt","src","CheckIcon","validator","values","Array","isArray","typePlaceholder","text","isAddress","isBoolean","isUint","isInt","isByte","ArrayTypeInput","InputComponent","keyValue","Field","component","Checkbox","TextField","testId","composeValidators","required","mustBeAddressHash","isArrayParameter","RenderInputParams","validABI","index","key","generateFormFieldKey","output","overflowY","RenderOutputParams","results","multipleResults","outputs","multiline","disabled","rowsMax","NativeCoinValue","onSetMax","nativeCurrency","getNativeCurrency","ethBalance","useSelector","currentSafeEthBalance","Boolean","payable","isPayable","ButtonLink","weight","inputAdornment","endAdornment","InputAdornment","symbol","mustBeFloat","maxValue","ContractInteraction","setCallResults","isABI","onNext","switchMethod","safeAddress","useSafeAddress","useMemo","saveForm","handleSubmit","submit","txObject","createTxObject","data","encodeABI","isReadMethod","call","from","result","handleSubmitError","ModalHeader","subTitle","getStepTitle","title","Hairline","GnoForm","decorators","ensResolver","formMutators","onSubmit","submitting","pristine","validating","rest","Block","formContainer","SafeInfo","Divider","withArrow","EthAddressInput","onScannedValue","setContractAddress","setMax","Switch","checked","Buttons","requiresMethod","currentStep","totalSteps","createStyles","heading","lg","justifyContent","maxHeight","loaderContainer","close","secondaryText","detailsContainer","backgroundColor","background","buttonRow","marginLeft","sm","ScanQRModal","isOpen","onScan","fileUploadModalOpen","setFileUploadModalOpen","error","setError","cameraBlocked","setCameraBlocked","scannerRef","React","openImageDialog","onFileScannedResolve","successData","console","Modal","description","grow","IconButton","disableRipple","layout","middle","legacyMode","onError","err","ref","facingMode","qrCodeBtn","ScanQRWrapper","handleScan","qrModalOpen","setQrModalOpen","closeQrModal","Img","role","QRIcon","Wrapper","div","StyledDivider","DividerSRC","StyledIcon","Icon","StyledBlock","border","xs","currentSafeWithNames","safeName","hash","strongName","explorerUrl","getExplorerInfo","showAvatar","showCopyBtn","useTextFieldLabelStyle","overflow","useTextFieldInputStyle","BaseAddressBookInput","addressBookEntries","fieldMutator","setIsValidAddress","setSelectedEntry","setValidationText","validationText","networkId","currentChainId","updateAddressInfo","addressEntry","validateAddress","fullAddress","addressErrorMessage","checkedAddr","checksumAddress","filteredEntries","filterAddressEntries","inputValue","onInputChange","_","reason","normalizedValue","trimSpaces","hasFeature","FEATURES","DOMAIN_LOOKUP","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","logError","Errors","_101","message","validatedAddress","chainId","labelStyles","inputStyles","Autocomplete","closeIcon","openOnFocus","filterOptions","freeSolo","options","renderInput","autoFocus","InputLabelProps","shrink","InputProps","getOptionLabel","renderOption","PrefixedEthHashInfo","flexGrow","AddressBookInput","currentNetworkAddressBook","errorMsg","ContractsAddressBookInput","setFilteredEntries","filterContractAddresses","filterContractAddressBookEntries","filteredADBK","onSetSelectedEntry","selectedEntry","contractAddressErrorMessage","md","wordBreak","outerData","minHeight","fontFamily","fontStretch","gap","dataInput","selectAddress","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","default","_default","createElement","d","textarea","paddingTop","paddingBottom","alignItems","rows","Footer","cancelButtonProps","confirmButtonProps","status","ButtonStatus","LOADING","READY","isContract","isRequired","validatorsList","center","scannedAddress","startsWith","replace","maxWidth","localFlag","backgroundPosition","backgroundRepeat","backgroundSize","etherFlag","iconLeft","left","pointerEvents","transform","fill"],"mappings":"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","file":"static/js/31.2fb3c374.chunk.js","sourcesContent":["import { AbiItem, keccak256 } from 'web3-utils'\n\nexport interface AllowedAbiItem extends AbiItem {\n  name: string\n  type: 'function'\n}\n\nexport interface AbiItemExtended extends AllowedAbiItem {\n  action: string\n  methodSignature: string\n  signatureHash: string\n}\n\nexport const getMethodSignature = ({ inputs, name }: AbiItem): string => {\n  const params = inputs?.map((x) => x.type).join(',')\n  return `${name}(${params})`\n}\n\nexport const getSignatureHash = (signature: string): string => {\n  return keccak256(signature).toString()\n}\n\nexport const getMethodHash = (method: AbiItem): string => {\n  const signature = getMethodSignature(method)\n  return getSignatureHash(signature)\n}\n\nexport const getMethodSignatureAndSignatureHash = (\n  method: AbiItem,\n): { methodSignature: string; signatureHash: string } => {\n  const methodSignature = getMethodSignature(method)\n  const signatureHash = getSignatureHash(methodSignature)\n  return { methodSignature, signatureHash }\n}\n\nexport const isAllowedMethod = ({ name, type }: AbiItem): boolean => {\n  return type === 'function' && !!name\n}\n\nexport const getMethodAction = ({ stateMutability }: AbiItem): 'read' | 'write' => {\n  if (!stateMutability) {\n    return 'write'\n  }\n\n  return ['view', 'pure'].includes(stateMutability) ? 'read' : 'write'\n}\n\nexport const extractUsefulMethods = (abi: AbiItem[]): AbiItemExtended[] => {\n  const allowedAbiItems = abi.filter(isAllowedMethod) as AllowedAbiItem[]\n\n  return allowedAbiItems\n    .map(\n      (method): AbiItemExtended => ({\n        action: getMethodAction(method),\n        ...getMethodSignatureAndSignatureHash(method),\n        ...method,\n      }),\n    )\n    .sort(({ name: a }, { name: b }) => {\n      return a.toLowerCase() > b.toLowerCase() ? 1 : -1\n    })\n}\n\nexport const isPayable = (method: AbiItem | AbiItemExtended): boolean => {\n  return Boolean(method?.payable) || method.stateMutability === 'payable'\n}\n","import { useField, useForm } from 'react-final-form'\nimport { useRef, useEffect } from 'react'\n\nimport { TextAreaField } from 'src/components/forms/TextAreaField'\nimport { mustBeEthereumAddress, mustBeEthereumContractAddress } from 'src/components/forms/validator'\nimport Col from 'src/components/layout/Col'\nimport Row from 'src/components/layout/Row'\nimport { getContractABI } from 'src/config'\nimport { extractUsefulMethods } from 'src/logic/contractInteraction/sources/ABIService'\nimport { parsePrefixedAddress } from 'src/utils/prefixedAddress'\n\nexport const NO_DATA = 'no data'\n\nconst hasUsefulMethods = (abi: string): undefined | string => {\n  try {\n    const parsedABI = extractUsefulMethods(JSON.parse(abi))\n\n    if (parsedABI.length === 0) {\n      return NO_DATA\n    }\n  } catch (e) {\n    return NO_DATA\n  }\n}\n\nconst ContractABI = (): React.ReactElement => {\n  const {\n    input: { value: contractAddress },\n  } = useField('contractAddress', { subscription: { value: true } })\n  const { mutators } = useForm()\n  const setAbiValue = useRef(mutators.setAbiValue)\n\n  useEffect(() => {\n    const validateAndSetAbi = async () => {\n      const isEthereumAddress = mustBeEthereumAddress(contractAddress) === undefined\n      const isEthereumContractAddress = (await mustBeEthereumContractAddress(contractAddress)) === undefined\n\n      if (isEthereumAddress && isEthereumContractAddress) {\n        const { address } = parsePrefixedAddress(contractAddress)\n        const abi = await getContractABI(address)\n        const isValidABI = hasUsefulMethods(abi) === undefined\n\n        // this check may help in scenarios where the user first pastes the ABI,\n        // and then sets a Proxy contract that has no useful methods\n        if (isValidABI) {\n          setAbiValue.current(abi)\n        }\n      }\n    }\n\n    if (contractAddress) {\n      validateAndSetAbi()\n    }\n  }, [contractAddress])\n\n  return (\n    <Row margin=\"sm\">\n      <Col>\n        <TextAreaField name=\"abi\" placeholder=\"ABI*\" label=\"ABI*\" type=\"text\" validate={hasUsefulMethods} />\n      </Col>\n    </Row>\n  )\n}\n\nexport default ContractABI\n","import { makeStyles } from '@material-ui/core/styles'\n\nimport { useFormState } from 'react-final-form'\n\nimport Row from 'src/components/layout/Row'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport { styles } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/style'\n\nconst useStyles = makeStyles(styles)\n\nconst FormErrorMessage = (): React.ReactElement | null => {\n  const classes = useStyles()\n  const { modifiedSinceLastSubmit, submitError } = useFormState({\n    subscription: { modifiedSinceLastSubmit: true, submitError: true },\n  })\n\n  const hasNewSubmitError = !!submitError && !modifiedSinceLastSubmit\n  return hasNewSubmitError ? (\n    <Row align=\"center\" className={classes.fullWidth} margin=\"xs\">\n      <Paragraph color=\"error\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px', overflowWrap: 'anywhere' }}>\n        {submitError}\n      </Paragraph>\n    </Row>\n  ) : null\n}\n\nexport default FormErrorMessage\n","import { makeStyles } from '@material-ui/core/styles'\n\nconst buttonWidth = '140px'\nexport const useButtonStyles = makeStyles({\n  button: {\n    borderRadius: '4px',\n    boxSizing: 'border-box',\n    color: '#5d6d74',\n    cursor: 'pointer',\n    fontSize: '16px',\n    fontWeight: 'normal',\n    lineHeight: '1.5',\n    marginRight: '20px',\n    minWidth: (props: any) => (props.buttonWidth ? props.buttonWidth : buttonWidth),\n    outline: 'none',\n    padding: '16px',\n    textAlign: 'left',\n    '&:active': {\n      opacity: '0.8',\n    },\n  },\n  buttonInner: {\n    boxSizing: 'border-box',\n    display: 'block',\n    height: '100%',\n    lineHeight: '24px',\n    position: 'relative',\n    padding: '0 !important',\n    width: '100%',\n    '&::after': {\n      borderLeft: '5px solid transparent',\n      borderRight: '5px solid transparent',\n      borderTop: '5px solid #5d6d74',\n      content: '\"\"',\n      height: '0',\n      position: 'absolute',\n      right: '8px',\n      top: '9px',\n      width: '0',\n    },\n  },\n  openMenuButton: {\n    '&::after': {\n      borderBottom: '5px solid #5d6d74',\n      borderLeft: '5px solid transparent',\n      borderRight: '5px solid transparent',\n      borderTop: 'none',\n    },\n  },\n})\n","import InputBase from '@material-ui/core/InputBase'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { MuiThemeProvider } from '@material-ui/core/styles'\nimport SearchIcon from '@material-ui/icons/Search'\nimport classNames from 'classnames'\nimport { ReactElement, useEffect, useState } from 'react'\nimport { useField, useFormState } from 'react-final-form'\nimport { AbiItem } from 'web3-utils'\n\nimport Col from 'src/components/layout/Col'\nimport Row from 'src/components/layout/Row'\nimport { NO_CONTRACT } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils'\nimport CheckIcon from 'src/routes/safe/components/CurrencyDropdown/img/check.svg'\nimport { useDropdownStyles } from 'src/routes/safe/components/CurrencyDropdown/style'\nimport { DropdownListTheme } from 'src/theme/mui'\nimport { extractUsefulMethods, AbiItemExtended } from 'src/logic/contractInteraction/sources/ABIService'\nimport { Text } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\nimport { Button } from '@material-ui/core'\nimport { useButtonStyles } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/MethodsDropdown/style'\n\nconst MENU_WIDTH = '452px'\n\nconst StyledText = styled(Text)`\n  padding: 4px 0 0 8px;\n`\n\ninterface MethodsDropdownProps {\n  onChange: (method: AbiItem) => void\n}\n\nexport const MethodsDropdown = ({ onChange }: MethodsDropdownProps): ReactElement | null => {\n  const classes = useDropdownStyles({ buttonWidth: MENU_WIDTH })\n  const buttonClasses = useButtonStyles({ buttonWidth: MENU_WIDTH })\n  const {\n    input: { value: abi },\n    meta: { valid },\n  } = useField('abi', { subscription: { value: true, valid: true } })\n  const {\n    initialValues: { selectedMethod: selectedMethodByDefault },\n  } = useFormState({ subscription: { initialValues: true } })\n  const [selectedMethod, setSelectedMethod] = useState(selectedMethodByDefault ? selectedMethodByDefault : {})\n  const [methodsList, setMethodsList] = useState<AbiItemExtended[]>([])\n  const [methodsListFiltered, setMethodsListFiltered] = useState<AbiItemExtended[]>([])\n\n  const [anchorEl, setAnchorEl] = useState(null)\n  const [searchParams, setSearchParams] = useState('')\n\n  useEffect(() => {\n    if (abi) {\n      try {\n        setMethodsList(extractUsefulMethods(JSON.parse(abi)))\n      } catch (e) {\n        setMethodsList([])\n      }\n    }\n  }, [abi])\n\n  useEffect(() => {\n    setMethodsListFiltered(methodsList.filter(({ name }) => name?.toLowerCase().includes(searchParams.toLowerCase())))\n  }, [methodsList, searchParams])\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget)\n  }\n\n  const handleClose = () => {\n    setAnchorEl(null)\n  }\n\n  const onMethodSelectedChanged = (chosenMethod: AbiItem) => {\n    setSelectedMethod(chosenMethod)\n    onChange(chosenMethod)\n    handleClose()\n  }\n\n  if (!valid || !abi || abi === NO_CONTRACT) {\n    return null\n  }\n\n  return (\n    <Row margin=\"md\">\n      <Col>\n        <MuiThemeProvider theme={DropdownListTheme}>\n          <>\n            <Button className={buttonClasses.button} onClick={handleClick} variant=\"outlined\">\n              <StyledText\n                size=\"xl\"\n                color=\"placeHolder\"\n                className={classNames(buttonClasses.buttonInner, anchorEl && buttonClasses.openMenuButton)}\n              >\n                {(selectedMethod as Record<string, string>).name || 'Method'}\n              </StyledText>\n            </Button>\n            <Menu\n              anchorEl={anchorEl}\n              anchorOrigin={{\n                horizontal: 'center',\n                vertical: 'bottom',\n              }}\n              elevation={0}\n              getContentAnchorEl={null}\n              id=\"customizedMenu\"\n              keepMounted\n              onClose={handleClose}\n              open={!!anchorEl}\n              PaperProps={{ style: { width: MENU_WIDTH } }}\n              transformOrigin={{\n                horizontal: 'center',\n                vertical: 'top',\n              }}\n            >\n              <MenuItem className={classes.listItemSearch} key=\"0\">\n                <div className={classes.search}>\n                  <div className={classes.searchIcon}>\n                    <SearchIcon />\n                  </div>\n                  <InputBase\n                    classes={{\n                      root: classes.inputRoot,\n                      input: classes.inputInput,\n                    }}\n                    inputProps={{ 'aria-label': 'search' }}\n                    onChange={(event) => setSearchParams(event.target.value)}\n                    placeholder=\"Search…\"\n                    value={searchParams}\n                  />\n                </div>\n              </MenuItem>\n              <div className={classes.dropdownItemsScrollWrapper}>\n                {methodsListFiltered.map((method) => {\n                  const { action, name, signatureHash } = method\n\n                  return (\n                    <MenuItem\n                      className={classes.listItem}\n                      key={signatureHash}\n                      onClick={() => onMethodSelectedChanged(method)}\n                      value={signatureHash}\n                    >\n                      <ListItemText primary={name} />\n                      <ListItemIcon className={classes.iconRight}>\n                        {signatureHash === (selectedMethod as Record<string, string>).signatureHash ? (\n                          <img alt=\"checked\" src={CheckIcon} />\n                        ) : (\n                          <span />\n                        )}\n                      </ListItemIcon>\n                      <ListItemIcon className={classes.iconRight}>\n                        <div>{action}</div>\n                      </ListItemIcon>\n                    </MenuItem>\n                  )\n                })}\n              </div>\n            </Menu>\n          </>\n        </MuiThemeProvider>\n      </Col>\n    </Row>\n  )\n}\n","import { TextAreaField } from 'src/components/forms/TextAreaField'\nimport {\n  isAddress,\n  isBoolean,\n  isByte,\n  isInt,\n  isUint,\n} from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils'\n\nconst validator = (value: string): string | undefined => {\n  try {\n    const values = JSON.parse(value)\n\n    if (!Array.isArray(values)) {\n      return 'be sure to surround value with []'\n    }\n  } catch (e) {\n    return 'invalid format'\n  }\n}\n\nconst typePlaceholder = (text: string, type: string): string => {\n  if (isAddress(type)) {\n    return `${text} E.g.: [\"0xACa94ef8bD5ffEE41947b4585a84BdA5a3d3DA6E\",\"0x1dF62f291b2E969fB0849d99D9Ce41e2F137006e\"]`\n  }\n\n  if (isBoolean(type)) {\n    return `${text} E.g.: [true, false, false, true]`\n  }\n\n  if (isUint(type)) {\n    return `${text} E.g.: [1000, 212, 320000022, 23]`\n  }\n\n  if (isInt(type)) {\n    return `${text} E.g.: [1000, -212, 1232, -1]`\n  }\n\n  if (isByte(type)) {\n    return `${text} E.g.: [\"0xc00000000000000000000000000000000000\", \"0xc00000000000000000000000000000000001\"]`\n  }\n\n  return `${text} E.g.: [\"first value\", \"second value\", \"third value\"]`\n}\n\nconst ArrayTypeInput = ({ name, text, type }: { name: string; text: string; type: string }): React.ReactElement => (\n  <TextAreaField name={name} placeholder={typePlaceholder(text, type)} label={text} type=\"text\" validate={validator} />\n)\n\nexport default ArrayTypeInput\n","import { Checkbox } from '@gnosis.pm/safe-react-components'\nimport { ReactElement } from 'react'\n\nimport Col from 'src/components/layout/Col'\nimport Field from 'src/components/forms/Field'\nimport TextField from 'src/components/forms/TextField'\n\nimport { composeValidators, mustBeAddressHash, required } from 'src/components/forms/validator'\nimport { isArrayParameter } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils'\nimport ArrayTypeInput from './ArrayTypeInput'\n\ntype Props = {\n  type: string\n  keyValue: string\n  placeholder: string\n}\n\nexport const InputComponent = ({ type, keyValue, placeholder }: Props): ReactElement | null => {\n  if (!type) {\n    return null\n  }\n\n  switch (type) {\n    case 'bool': {\n      const inputProps = {\n        'data-testid': keyValue,\n      }\n      return (\n        <Col>\n          <Field component={Checkbox} name={keyValue} label={placeholder} type=\"checkbox\" inputProps={inputProps} />\n        </Col>\n      )\n    }\n    case 'address': {\n      return (\n        <Col>\n          <Field\n            component={TextField}\n            name={keyValue}\n            placeholder={placeholder}\n            testId={keyValue}\n            label={placeholder}\n            type=\"text\"\n            validate={composeValidators(required, mustBeAddressHash)}\n          />\n        </Col>\n      )\n    }\n    default: {\n      return (\n        <Col>\n          {isArrayParameter(type) ? (\n            <ArrayTypeInput name={keyValue} text={placeholder} type={type} />\n          ) : (\n            <Field\n              component={TextField}\n              name={keyValue}\n              placeholder={placeholder}\n              testId={keyValue}\n              label={placeholder}\n              type=\"text\"\n              validate={required}\n            />\n          )}\n        </Col>\n      )\n    }\n  }\n}\n","import { ReactElement } from 'react'\nimport { useField } from 'react-final-form'\n\nimport Row from 'src/components/layout/Row'\n\nimport { InputComponent } from './InputComponent'\nimport { generateFormFieldKey } from '../utils'\nimport { AbiItemExtended } from 'src/logic/contractInteraction/sources/ABIService'\n\nexport const RenderInputParams = (): ReactElement | null => {\n  const {\n    meta: { valid: validABI },\n  } = useField('abi', { subscription: { valid: true, value: true } })\n  const {\n    input: { value: method },\n  }: { input: { value: AbiItemExtended } } = useField('selectedMethod', { subscription: { value: true } })\n  const renderInputs = validABI && !!method && method.inputs?.length\n\n  return !renderInputs ? null : (\n    <>\n      {method.inputs?.map(({ name, type }, index) => {\n        const placeholder = name ? `${name} (${type})` : type\n        const key = generateFormFieldKey(type, method.signatureHash, index)\n\n        return (\n          <Row key={key} margin=\"md\">\n            <InputComponent type={type} keyValue={key} placeholder={placeholder} />\n          </Row>\n        )\n      })}\n    </>\n  )\n}\n","import { ReactElement } from 'react'\nimport { useField } from 'react-final-form'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TextField from 'src/components/forms/TextField'\nimport Col from 'src/components/layout/Col'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\n\nconst useStyles = makeStyles({\n  output: {\n    '& > div > textarea': {\n      letterSpacing: '-0.5px',\n      lineHeight: '20px',\n      height: '40px',\n      overflowY: 'auto',\n    },\n  },\n})\n\nexport const RenderOutputParams = (): ReactElement | null => {\n  const classes = useStyles()\n  const {\n    input: { value: method },\n  }: any = useField('selectedMethod', { subscription: { value: true } })\n  const {\n    input: { value: results },\n  }: any = useField('callResults', { subscription: { value: true } })\n  const multipleResults = !!method && method.outputs.length > 1\n\n  if (results == null || results === '') {\n    return null\n  }\n\n  return (\n    <>\n      <Row align=\"left\" margin=\"xs\">\n        <Paragraph color=\"primary\" size=\"lg\">\n          Call result:\n        </Paragraph>\n      </Row>\n      {method.outputs?.map(({ name, type }, index) => {\n        const placeholder = name ? `${name} (${type})` : type\n        const key = `methodCallResult-${method.name}_${index}_${type}`\n        const value = multipleResults ? results[index] : results\n\n        return (\n          <Row key={key} margin=\"sm\">\n            <Col>\n              <TextField\n                className={classes.output}\n                multiline\n                disabled\n                rowsMax={3}\n                input={{ name: key, value: value.toString(), placeholder, type: 'text' }}\n                meta={{ valid: true }}\n                testId={key}\n                text={placeholder}\n              />\n            </Col>\n          </Row>\n        )\n      })}\n    </>\n  )\n}\n","import InputAdornment from '@material-ui/core/InputAdornment'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport { useField } from 'react-final-form'\nimport { useSelector } from 'react-redux'\n\nimport Field from 'src/components/forms/Field'\nimport TextField from 'src/components/forms/TextField'\nimport { composeValidators, maxValue, mustBeFloat } from 'src/components/forms/validator'\nimport ButtonLink from 'src/components/layout/ButtonLink'\nimport Col from 'src/components/layout/Col'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { isPayable } from 'src/logic/contractInteraction/sources/ABIService'\nimport { styles } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/style'\nimport { currentSafeEthBalance } from 'src/logic/safe/store/selectors'\nimport { getNativeCurrency } from 'src/config'\n\nconst useStyles = makeStyles(styles)\n\ninterface NativeCoinValueProps {\n  onSetMax: (nativeCoinBalance: string) => void\n}\n\nexport const NativeCoinValue = ({ onSetMax }: NativeCoinValueProps): React.ReactElement | null => {\n  const classes = useStyles()\n  const nativeCurrency = getNativeCurrency()\n  const ethBalance = useSelector(currentSafeEthBalance)\n\n  const {\n    input: { value: method },\n  } = useField('selectedMethod', { subscription: { value: true } })\n  const disabled = !isPayable(method)\n\n  if (!ethBalance) {\n    return null\n  }\n\n  return disabled ? null : (\n    <>\n      <Row className={classes.fullWidth} margin=\"xs\">\n        <Paragraph color=\"disabled\" noMargin size=\"md\">\n          Value\n        </Paragraph>\n        <ButtonLink\n          color={disabled ? 'disabled' : 'secondary'}\n          onClick={() => !disabled && onSetMax(ethBalance)}\n          weight=\"bold\"\n        >\n          Send max\n        </ButtonLink>\n      </Row>\n      <Row margin=\"md\">\n        <Col>\n          <Field\n            component={TextField}\n            disabled={disabled}\n            inputAdornment={{\n              endAdornment: <InputAdornment position=\"end\">{nativeCurrency.symbol}</InputAdornment>,\n              disabled,\n            }}\n            name=\"value\"\n            placeholder=\"Value\"\n            label=\"Value\"\n            type=\"text\"\n            validate={!disabled && composeValidators(mustBeFloat, maxValue(ethBalance))}\n          />\n        </Col>\n      </Row>\n    </>\n  )\n}\n","import { makeStyles } from '@material-ui/core/styles'\nimport { useMemo } from 'react'\nimport Switch from '@material-ui/core/Switch'\n\nimport { styles } from './style'\nimport Divider from 'src/components/Divider'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport Block from 'src/components/layout/Block'\nimport Hairline from 'src/components/layout/Hairline'\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Buttons from './Buttons'\nimport ContractABI from './ContractABI'\nimport { EthAddressInput } from './EthAddressInput'\nimport FormErrorMessage from './FormErrorMessage'\nimport { MethodsDropdown } from './MethodsDropdown'\nimport { RenderInputParams } from './RenderInputParams'\nimport { RenderOutputParams } from './RenderOutputParams'\nimport { createTxObject, formMutators, handleSubmitError, isReadMethod, ensResolver } from './utils'\nimport { TransactionReviewType } from './Review'\nimport { NativeCoinValue } from './NativeCoinValue'\nimport { ModalHeader } from '../ModalHeader'\nimport { getStepTitle } from 'src/routes/safe/components/Balances/SendModal/utils'\nimport useSafeAddress from 'src/logic/currentSession/hooks/useSafeAddress'\n\nconst useStyles = makeStyles(styles)\n\nexport interface CreatedTx {\n  contractAddress: string\n  data: string\n  selectedMethod: TransactionReviewType\n  value: string | number\n}\n\nexport type ContractInteractionTx = {\n  contractAddress?: string\n}\n\nexport interface ContractInteractionProps {\n  contractAddress?: string\n  initialValues: ContractInteractionTx\n  isABI: boolean\n  onClose: () => void\n  switchMethod: () => void\n  onNext: (tx: CreatedTx, submit: boolean) => void\n}\n\nconst ContractInteraction: React.FC<ContractInteractionProps> = ({\n  contractAddress,\n  initialValues,\n  isABI,\n  onClose,\n  onNext,\n  switchMethod,\n}) => {\n  const classes = useStyles()\n  const { safeAddress } = useSafeAddress()\n  let setCallResults\n\n  useMemo(() => {\n    if (contractAddress) {\n      initialValues.contractAddress = contractAddress\n    }\n  }, [contractAddress, initialValues])\n\n  const saveForm = async (values: CreatedTx): Promise<void> => {\n    await handleSubmit(values, false)\n    switchMethod()\n  }\n\n  const handleSubmit = async (\n    { contractAddress, selectedMethod, value, ...values },\n    submit = true,\n  ): Promise<void | Record<string, string>> => {\n    if (value || (contractAddress && selectedMethod)) {\n      try {\n        const txObject = createTxObject(selectedMethod, contractAddress, values)\n        const data = txObject.encodeABI()\n\n        if (isReadMethod(selectedMethod) && submit) {\n          const result = await txObject.call({ from: safeAddress })\n          setCallResults(result)\n\n          // this was a read method, so we won't go to the 'review' screen\n          return\n        }\n\n        onNext({ ...values, contractAddress, data, selectedMethod, value }, submit)\n      } catch (error) {\n        return handleSubmitError(error, values)\n      }\n    }\n  }\n\n  return (\n    <>\n      <ModalHeader onClose={onClose} subTitle={getStepTitle(1, 2)} title=\"Contract interaction\" />\n      <Hairline />\n      <GnoForm\n        decorators={[ensResolver]}\n        formMutators={formMutators}\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        subscription={{ submitting: true, pristine: true, values: true }}\n      >\n        {(submitting, validating, rest, mutators) => {\n          setCallResults = mutators.setCallResults\n          return (\n            <>\n              <Block className={classes.formContainer}>\n                <SafeInfo />\n                <Divider withArrow />\n                <EthAddressInput\n                  name=\"contractAddress\"\n                  onScannedValue={mutators.setContractAddress}\n                  text=\"Contract address*\"\n                />\n                <ContractABI />\n                <MethodsDropdown onChange={mutators.setSelectedMethod} />\n                <NativeCoinValue onSetMax={mutators.setMax} />\n                <RenderInputParams />\n                <RenderOutputParams />\n                <FormErrorMessage />\n                <Paragraph color=\"disabled\" noMargin size=\"lg\">\n                  <Switch checked={!isABI} onChange={() => saveForm(rest.values)} />\n                  Use custom data (hex encoded)\n                </Paragraph>\n              </Block>\n              <Buttons onClose={onClose} requiresMethod />\n            </>\n          )\n        }}\n      </GnoForm>\n    </>\n  )\n}\n\nexport default ContractInteraction\n","export const getStepTitle = (currentStep: number, totalSteps: number): string => `Step ${currentStep} of ${totalSteps}`\n","export default __webpack_public_path__ + \"static/media/qrcode.fec1b6d8.svg\";","import { background, lg, secondaryText, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: lg,\n    justifyContent: 'space-between',\n    maxHeight: '75px',\n    boxSizing: 'border-box',\n  },\n  loaderContainer: {\n    width: '100%',\n    height: '100%',\n  },\n  close: {\n    height: '25px',\n    width: '25px',\n    color: secondaryText,\n  },\n  detailsContainer: {\n    backgroundColor: background,\n    maxHeight: '450px',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n  },\n  button: {\n    '&:last-child': {\n      marginLeft: sm,\n    },\n  },\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Close from '@material-ui/icons/Close'\nimport * as React from 'react'\nimport QrReader from 'react-qr-reader'\n\nimport { styles } from './style'\n\nimport Modal from 'src/components/Modal'\nimport Block from 'src/components/layout/Block'\nimport Button from 'src/components/layout/Button'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { useEffect, useState } from 'react'\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  isOpen: boolean\n  onClose: () => void\n  onScan: (value: string) => void\n}\n\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\n  const classes = useStyles()\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n  const [cameraBlocked, setCameraBlocked] = useState<boolean>(false)\n  const scannerRef: any = React.createRef()\n  const openImageDialog = React.useCallback(() => {\n    scannerRef.current.openImageDialog()\n  }, [scannerRef])\n\n  useEffect(() => {\n    if (!fileUploadModalOpen && cameraBlocked && !error) {\n      setFileUploadModalOpen(true)\n      openImageDialog()\n    }\n  }, [cameraBlocked, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\n\n  const onFileScannedResolve = (error: Error | null, successData: string | null) => {\n    if (error) {\n      console.error('QR code error', error)\n\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDismissedError') {\n        setCameraBlocked(true)\n        setFileUploadModalOpen(false)\n      } else {\n        setError('The QR could not be read')\n      }\n      return\n    }\n\n    if (successData) {\n      onScan(successData)\n    } else if (cameraBlocked) {\n      setError('The QR could not be read')\n    }\n  }\n\n  return (\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\n      <Row align=\"center\" className={classes.heading} grow>\n        <Paragraph noMargin size=\"xl\">\n          Scan QR\n        </Paragraph>\n        <IconButton disableRipple onClick={onClose}>\n          <Close className={classes.close} />\n        </IconButton>\n      </Row>\n      <Hairline />\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\n        {error && (\n          <Block padding=\"md\" margin=\"md\">\n            {error}\n          </Block>\n        )}\n        <QrReader\n          legacyMode={cameraBlocked}\n          onError={(err: Error) => onFileScannedResolve(err, null)}\n          onScan={(data: string) => onFileScannedResolve(null, data)}\n          ref={scannerRef}\n          style={{ width: '400px', height: '400px' }}\n          facingMode=\"user\"\n        />\n      </Col>\n      <Hairline />\n      <Row align=\"center\" className={classes.buttonRow}>\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\n          Close\n        </Button>\n        <Button\n          className={classes.button}\n          color=\"primary\"\n          minWidth={154}\n          onClick={() => {\n            setCameraBlocked(true)\n            setError(null)\n            setFileUploadModalOpen(false)\n          }}\n          variant=\"contained\"\n        >\n          Upload an image\n        </Button>\n      </Row>\n    </Modal>\n  )\n}\n","import { makeStyles } from '@material-ui/core/styles'\nimport { ReactElement, useState } from 'react'\n\nimport QRIcon from 'src/assets/icons/qrcode.svg'\nimport { ScanQRModal } from 'src/components/ScanQRModal'\nimport Img from 'src/components/layout/Img'\n\nconst useStyles = makeStyles({\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n})\n\ntype Props = {\n  handleScan: (dataResult: string, closeQrModal: () => void) => void\n  testId?: string\n}\n\nexport const ScanQRWrapper = ({ handleScan, testId }: Props): ReactElement => {\n  const classes = useStyles()\n  const [qrModalOpen, setQrModalOpen] = useState(false)\n\n  const openQrModal = () => {\n    setQrModalOpen(true)\n  }\n\n  const closeQrModal = () => {\n    setQrModalOpen(false)\n  }\n\n  const onScanFinished = (value: string) => {\n    handleScan(value, closeQrModal)\n  }\n\n  return (\n    <>\n      <Img\n        alt=\"Scan QR\"\n        className={classes.qrCodeBtn}\n        height={20}\n        onClick={() => openQrModal()}\n        role=\"button\"\n        src={QRIcon}\n        testId={testId || 'qr-icon'}\n      />\n      {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={onScanFinished} />}\n    </>\n  )\n}\n","import { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  margin: 8px 0;\n\n  svg {\n    margin: 0 12px 0 4px;\n  }\n`\nconst StyledDivider = styled(DividerSRC)`\n  width: 100%;\n`\n\nconst StyledIcon = styled(Icon)`\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%);\n  padding: 0 20px;\n  background: white;\n\n  & svg {\n    margin: 0;\n  }\n`\n\ntype Props = {\n  withArrow?: boolean\n}\n\nconst Divider = ({ withArrow }: Props): ReactElement => (\n  <Wrapper>\n    {withArrow && <StyledIcon type=\"arrowDown\" size=\"md\" />}\n    <StyledDivider />\n  </Wrapper>\n)\n\nexport default Divider\n","import { useSelector } from 'react-redux'\nimport styled from 'styled-components'\n\nimport { getExplorerInfo, getNativeCurrency } from 'src/config'\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Bold from 'src/components/layout/Bold'\nimport { border, xs } from 'src/theme/variables'\nimport Block from 'src/components/layout/Block'\nimport Row from 'src/components/layout/Row'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\n\nconst StyledBlock = styled(Block)`\n  font-size: 12px;\n  line-height: 1.08;\n  letter-spacing: -0.5px;\n  background-color: ${border};\n  width: fit-content;\n  padding: 5px 10px;\n  margin-top: ${xs};\n  margin-left: 40px;\n  border-radius: 3px;\n`\n\ntype SafeInfoProps = {\n  text?: string\n}\n\nconst SafeInfo = ({ text }: SafeInfoProps): React.ReactElement => {\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\n  const nativeCurrency = getNativeCurrency()\n\n  return (\n    <>\n      {text && (\n        <Row margin=\"sm\">\n          <Paragraph color=\"black400\" noMargin size=\"lg\">\n            {text}\n          </Paragraph>\n        </Row>\n      )}\n      <PrefixedEthHashInfo\n        hash={safeAddress}\n        name={safeName}\n        strongName\n        explorerUrl={getExplorerInfo(safeAddress)}\n        showAvatar\n        showCopyBtn\n      />\n      {ethBalance && (\n        <StyledBlock>\n          <Paragraph noMargin>\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCurrency.symbol}`}</Bold>\n          </Paragraph>\n        </StyledBlock>\n      )}\n    </>\n  )\n}\n\nexport default SafeInfo\n","import { createStyles, makeStyles } from '@material-ui/core'\n\nexport const useTextFieldLabelStyle = makeStyles(\n  createStyles({\n    root: {\n      overflow: 'hidden',\n    },\n  }),\n)\n\nexport const useTextFieldInputStyle = makeStyles(\n  createStyles({\n    input: {\n      padding: '16px !important',\n    },\n  }),\n)\n","import MuiTextField from '@material-ui/core/TextField'\nimport Autocomplete, { AutocompleteProps } from '@material-ui/lab/Autocomplete'\nimport { Dispatch, ReactElement, SetStateAction, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { mustBeEthereumAddress, mustBeEthereumContractAddress } from 'src/components/forms/validator'\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\nimport { filterContractAddressBookEntries, filterAddressEntries } from 'src/logic/addressBook/utils'\nimport { isValidEnsName, isValidCryptoDomainName } from 'src/logic/wallets/ethAddresses'\nimport { getAddressFromDomain } from 'src/logic/wallets/getWeb3'\nimport {\n  useTextFieldInputStyle,\n  useTextFieldLabelStyle,\n} from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput/style'\nimport PrefixedEthHashInfo from 'src/components/PrefixedEthHashInfo'\nimport { trimSpaces } from 'src/utils/strings'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { checksumAddress } from 'src/utils/checksumAddress'\nimport { currentChainId } from 'src/logic/config/store/selectors'\nimport { FEATURES } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { parsePrefixedAddress } from 'src/utils/prefixedAddress'\nimport { hasFeature } from 'src/logic/safe/utils/safeVersion'\n\nexport interface AddressBookProps {\n  fieldMutator: (address: string) => void\n  label?: string\n  pristine?: boolean\n  recipientAddress?: string\n  errorMsg?: string\n  setIsValidAddress: (valid: boolean) => void\n  setSelectedEntry: Dispatch<SetStateAction<{ address: string; name: string }> | null>\n}\n\nexport interface BaseAddressBookInputProps extends AddressBookProps {\n  addressBookEntries: AddressBookEntry[]\n  setSelectedEntry: (args: { address: string; name: string } | null) => void\n  setValidationText: Dispatch<SetStateAction<string | undefined>>\n  validationText: string | undefined\n}\n\nconst BaseAddressBookInput = ({\n  addressBookEntries,\n  fieldMutator,\n  label = 'Recipient',\n  setIsValidAddress,\n  setSelectedEntry,\n  setValidationText,\n  validationText,\n}: BaseAddressBookInputProps): ReactElement => {\n  const networkId = useSelector(currentChainId)\n\n  const updateAddressInfo = (addressEntry: AddressBookEntry): void => {\n    setSelectedEntry(addressEntry)\n    fieldMutator(addressEntry.address)\n  }\n\n  const validateAddress = (fullAddress: string): AddressBookEntry | string | undefined => {\n    const addressErrorMessage = mustBeEthereumAddress(fullAddress)\n    setIsValidAddress(!addressErrorMessage)\n\n    if (addressErrorMessage) {\n      setValidationText(addressErrorMessage)\n      return\n    }\n\n    // Automatically checksum valid addresses\n    const { address } = parsePrefixedAddress(fullAddress)\n    const checkedAddr = checksumAddress(address) || address\n    const filteredEntries = filterAddressEntries(addressBookEntries, { inputValue: checkedAddr })\n    return filteredEntries.length === 1 ? filteredEntries[0] : checkedAddr\n  }\n\n  const onChange: AutocompleteProps<AddressBookEntry, false, false, true>['onChange'] = (_, value, reason) => {\n    switch (reason) {\n      case 'select-option': {\n        const { address, name, chainId } = value as AddressBookEntry\n        updateAddressInfo({ address, name, chainId })\n        break\n      }\n    }\n  }\n\n  const onInputChange: AutocompleteProps<AddressBookEntry, false, false, true>['onInputChange'] = async (\n    _,\n    value,\n    reason,\n  ) => {\n    switch (reason) {\n      case 'input': {\n        const normalizedValue = trimSpaces(value)\n\n        if (!normalizedValue) {\n          break\n        }\n\n        // ENS-enabled resolve/validation\n        if (\n          hasFeature(FEATURES.DOMAIN_LOOKUP) &&\n          (isValidEnsName(normalizedValue) || isValidCryptoDomainName(normalizedValue))\n        ) {\n          let address = ''\n          try {\n            address = await getAddressFromDomain(normalizedValue)\n          } catch (err) {\n            logError(Errors._101, err.message)\n          }\n\n          const validatedAddress = validateAddress(address)\n\n          if (!validatedAddress) {\n            fieldMutator('')\n            break\n          }\n\n          const newEntry =\n            typeof validatedAddress === 'string'\n              ? {\n                  address,\n                  name: normalizedValue,\n                  chainId: networkId,\n                }\n              : validatedAddress\n\n          updateAddressInfo(newEntry)\n          break\n        }\n\n        // ETH address validation\n        const validatedAddress = validateAddress(normalizedValue)\n\n        if (!validatedAddress) {\n          fieldMutator('')\n          break\n        }\n\n        const newEntry =\n          typeof validatedAddress === 'string'\n            ? {\n                address: validatedAddress,\n                name: '',\n                chainId: networkId,\n              }\n            : validatedAddress\n\n        updateAddressInfo(newEntry)\n\n        break\n      }\n    }\n  }\n\n  const labelStyles = useTextFieldLabelStyle()\n  const inputStyles = useTextFieldInputStyle()\n\n  return (\n    <Autocomplete<AddressBookEntry, false, false, true>\n      closeIcon={null}\n      openOnFocus={false}\n      filterOptions={filterAddressEntries}\n      freeSolo\n      onChange={onChange}\n      onInputChange={onInputChange}\n      options={addressBookEntries}\n      id=\"address-book-input\"\n      renderInput={(params) => (\n        <MuiTextField\n          {...params}\n          autoFocus\n          error={!!validationText}\n          fullWidth\n          variant=\"outlined\"\n          label={validationText ? validationText : label}\n          InputLabelProps={{ shrink: true, required: true, classes: labelStyles }}\n          InputProps={{ ...params.InputProps, classes: inputStyles }}\n          inputProps={{ ...params.inputProps, 'data-testid': 'address-book-input' }}\n        />\n      )}\n      getOptionLabel={({ address }) => address}\n      renderOption={({ address, name }) => <PrefixedEthHashInfo hash={address} name={name} showAvatar />}\n      role=\"listbox\"\n      style={{ display: 'flex', flexGrow: 1 }}\n    />\n  )\n}\n\nexport const AddressBookInput = (props: AddressBookProps): ReactElement => {\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\n  const [validationText, setValidationText] = useState<string>('')\n\n  useEffect(() => {\n    if (props.errorMsg) {\n      setValidationText(props.errorMsg)\n    }\n  }, [props.errorMsg])\n\n  return (\n    <BaseAddressBookInput\n      addressBookEntries={addressBookEntries}\n      setValidationText={setValidationText}\n      validationText={validationText}\n      {...props}\n    />\n  )\n}\n\nexport const ContractsAddressBookInput = ({\n  setIsValidAddress,\n  setSelectedEntry,\n  ...props\n}: AddressBookProps): ReactElement => {\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\n  const [filteredEntries, setFilteredEntries] = useState<AddressBookEntry[]>([])\n  const [validationText, setValidationText] = useState<string>('')\n\n  useEffect(() => {\n    const filterContractAddresses = async (): Promise<void> => {\n      const filteredADBK = await filterContractAddressBookEntries(addressBookEntries)\n      setFilteredEntries(filteredADBK)\n    }\n    filterContractAddresses()\n  }, [addressBookEntries])\n\n  const onSetSelectedEntry = async (selectedEntry) => {\n    if (selectedEntry?.address) {\n      // verify if `address` is a contract\n      const contractAddressErrorMessage = await mustBeEthereumContractAddress(selectedEntry.address)\n      setIsValidAddress(!contractAddressErrorMessage)\n      setValidationText(contractAddressErrorMessage ?? '')\n      setSelectedEntry(selectedEntry)\n    }\n  }\n\n  return (\n    <BaseAddressBookInput\n      addressBookEntries={filteredEntries}\n      setIsValidAddress={setIsValidAddress}\n      setSelectedEntry={onSetSelectedEntry}\n      setValidationText={setValidationText}\n      validationText={validationText}\n      {...props}\n    />\n  )\n}\n","import { lg, md, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n  formContainer: {\n    padding: `${md} ${lg}`,\n    wordBreak: 'break-word',\n  },\n  value: {\n    marginLeft: sm,\n  },\n  outerData: {\n    minHeight: '21px',\n  },\n  data: {\n    wordBreak: 'break-all',\n    overflow: 'auto',\n    fontSize: '16px',\n    fontFamily: 'Averta',\n    maxHeight: '100px',\n    letterSpacing: 'normal',\n    fontStretch: 'normal',\n    lineHeight: '1.43',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n  dataInput: {\n    '& TextField-root-294': {\n      lineHeight: 'auto',\n      border: 'green',\n    },\n  },\n  selectAddress: {\n    cursor: 'pointer',\n  },\n  fullWidth: {\n    justifyContent: 'space-between',\n  },\n})\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"\n}), 'Search');\n\nexports.default = _default;","import { createStyles, makeStyles } from '@material-ui/core/styles'\nimport { ReactElement } from 'react'\n\nimport Field from 'src/components/forms/Field'\nimport TextField from 'src/components/forms/TextField'\n\nconst styles = createStyles({\n  textarea: {\n    '& > div': {\n      height: '140px',\n      paddingTop: '0',\n      paddingBottom: '0',\n      alignItems: 'auto',\n      '& > textarea': {\n        fontSize: '15px',\n        letterSpacing: '-0.5px',\n        lineHeight: '20px',\n        height: '102px',\n      },\n    },\n  },\n})\n\nconst useStyles = makeStyles(styles)\n\nexport const TextAreaField = ({ ...props }): ReactElement => {\n  const classes = useStyles()\n  return <Field {...props} className={classes.textarea} component={TextField} multiline rows=\"5\" />\n}\n","import { useField, useFormState } from 'react-final-form'\n\nimport { ButtonStatus, Modal } from 'src/components/Modal'\nimport { isReadMethod } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils'\n\nexport interface ButtonProps {\n  onClose: () => void\n  requiresMethod?: boolean\n}\n\nconst Buttons = ({ onClose, requiresMethod }: ButtonProps): React.ReactElement => {\n  const {\n    input: { value: method },\n  } = useField('selectedMethod', { subscription: { value: true } })\n  const { modifiedSinceLastSubmit, submitError, submitting, valid, validating } = useFormState({\n    subscription: {\n      modifiedSinceLastSubmit: true,\n      submitError: true,\n      submitting: true,\n      valid: true,\n      validating: true,\n    },\n  })\n\n  return (\n    <Modal.Footer>\n      <Modal.Footer.Buttons\n        cancelButtonProps={{ onClick: onClose }}\n        confirmButtonProps={{\n          disabled:\n            submitting ||\n            validating ||\n            ((!valid || !!submitError) && !modifiedSinceLastSubmit) ||\n            (requiresMethod && !method),\n          status: submitting || validating ? ButtonStatus.LOADING : ButtonStatus.READY,\n          testId: `${isReadMethod(method) ? 'call' : 'review'}-tx-btn`,\n          text: isReadMethod(method) ? 'Call' : 'Review',\n        }}\n      />\n    </Modal.Footer>\n  )\n}\n\nexport default Buttons\n","import { makeStyles } from '@material-ui/core/styles'\nimport { useState } from 'react'\nimport { useFormState, useField } from 'react-final-form'\n\nimport { ScanQRWrapper } from 'src/components/ScanQRModal/ScanQRWrapper'\nimport { ContractsAddressBookInput } from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput'\nimport Field from 'src/components/forms/Field'\nimport TextField from 'src/components/forms/TextField'\nimport {\n  composeValidators,\n  mustBeEthereumAddress,\n  mustBeEthereumContractAddress,\n  required,\n  Validator,\n} from 'src/components/forms/validator'\nimport Col from 'src/components/layout/Col'\nimport Row from 'src/components/layout/Row'\nimport { styles } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/style'\n\nconst useStyles = makeStyles(styles)\n\nexport interface EthAddressInputProps {\n  isContract?: boolean\n  isRequired?: boolean\n  name: string\n  onScannedValue: (scannedValue: string) => void\n  text: string\n}\n\nexport const EthAddressInput = ({\n  isContract = true,\n  isRequired = true,\n  name,\n  onScannedValue,\n  text,\n}: EthAddressInputProps): React.ReactElement => {\n  const classes = useStyles()\n  const validatorsList = [\n    isRequired && required,\n    mustBeEthereumAddress,\n    isContract && mustBeEthereumContractAddress,\n  ] as Validator[]\n  const validate = composeValidators(...validatorsList.filter((validator) => validator))\n  const { pristine } = useFormState({ subscription: { pristine: true } })\n  const {\n    input: { value },\n  } = useField('contractAddress', { subscription: { value: true } })\n  const [selectedEntry, setSelectedEntry] = useState<{ address?: string; name?: string | null } | null>({\n    address: value,\n    name: '',\n  })\n\n  const handleScan = (value, closeQrModal) => {\n    let scannedAddress = value\n\n    if (scannedAddress.startsWith('ethereum:')) {\n      scannedAddress = scannedAddress.replace('ethereum:', '')\n    }\n\n    setSelectedEntry({ address: scannedAddress })\n    onScannedValue(scannedAddress)\n    closeQrModal()\n  }\n\n  const handleInputChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    const { value } = event.target\n    setSelectedEntry({ address: value })\n  }\n\n  return (\n    <Row margin=\"md\">\n      <Col xs={11}>\n        {selectedEntry?.address ? (\n          <Field\n            component={TextField}\n            name={name}\n            placeholder={text}\n            onChange={handleInputChange}\n            testId={name}\n            label={text}\n            type=\"text\"\n            validate={validate}\n          />\n        ) : (\n          <ContractsAddressBookInput\n            setSelectedEntry={setSelectedEntry}\n            setIsValidAddress={() => {}}\n            fieldMutator={onScannedValue}\n            pristine={pristine}\n            label=\"Contract address\"\n          />\n        )}\n      </Col>\n      <Col center=\"xs\" className={classes} middle=\"xs\" xs={1}>\n        <ScanQRWrapper handleScan={handleScan} />\n      </Col>\n    </Row>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/check.7da64643.svg\";","import { makeStyles } from '@material-ui/core/styles'\n\nconst buttonWidth = '140px'\nexport const useDropdownStyles = makeStyles({\n  listItem: {\n    maxWidth: (props: any) => (props.buttonWidth ? props.buttonWidth : buttonWidth),\n    boxSizing: 'border-box',\n  },\n  listItemSearch: {\n    maxWidth: (props: any) => (props.buttonWidth ? props.buttonWidth : buttonWidth),\n    padding: '0',\n    boxSizing: 'border-box',\n  },\n  localFlag: {\n    backgroundPosition: '50% 50%',\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: 'contain',\n    height: '20px !important',\n    width: '26px !important',\n  },\n  etherFlag: {\n    backgroundPosition: '50% 50%',\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: 'contain',\n    width: '26px',\n    height: '26px',\n  },\n  iconLeft: {\n    marginRight: '10px',\n  },\n  iconRight: {\n    marginLeft: '18px',\n  },\n  button: {\n    backgroundColor: '#e8e7e6',\n    border: 'none',\n    borderRadius: '3px',\n    boxSizing: 'border-box',\n    color: '#5d6d74',\n    cursor: 'pointer',\n    fontSize: '12px',\n    fontWeight: 'normal',\n    height: '24px',\n    lineHeight: '1.33',\n    marginRight: '20px',\n    minWidth: (props: any) => (props.buttonWidth ? props.buttonWidth : buttonWidth),\n    outline: 'none',\n    padding: '0',\n    textAlign: 'left',\n    '&:active': {\n      opacity: '0.8',\n    },\n  },\n  buttonInner: {\n    boxSizing: 'border-box',\n    display: 'block',\n    height: '100%',\n    fontSize: '12px',\n    lineHeight: '24px',\n    padding: '0 22px 0 8px',\n    position: 'relative',\n    width: '100%',\n    '&::after': {\n      borderLeft: '5px solid transparent',\n      borderRight: '5px solid transparent',\n      borderTop: '5px solid #5d6d74',\n      content: '\"\"',\n      height: '0',\n      position: 'absolute',\n      right: '8px',\n      top: '9px',\n      width: '0',\n    },\n  },\n  openMenuButton: {\n    '&::after': {\n      borderBottom: '5px solid #5d6d74',\n      borderLeft: '5px solid transparent',\n      borderRight: '5px solid transparent',\n      borderTop: 'none',\n    },\n  },\n  dropdownItemsScrollWrapper: {\n    maxHeight: '280px',\n    overflow: 'auto',\n  },\n  search: {\n    position: 'relative',\n    borderRadius: '0',\n    backgroundColor: '#fff',\n    '&:hover': {\n      backgroundColor: '#fff',\n    },\n    marginRight: 0,\n    width: '100%',\n  },\n  searchIcon: {\n    alignItems: 'center',\n    display: 'flex',\n    height: '100%',\n    justifyContent: 'center',\n    left: '12px',\n    margin: '0',\n    pointerEvents: 'none',\n    position: 'absolute',\n    top: '50%',\n    transform: 'translateY(-50%)',\n    width: '18px',\n    '& path': {\n      fill: '#b2b5b2',\n    },\n  },\n  inputRoot: {\n    color: '#5d6d74',\n    fontSize: '14px',\n    fontWeight: 'normal',\n    lineHeight: '1.43',\n    width: '100%',\n  },\n  inputInput: {\n    boxSizing: 'border-box',\n    height: '44px',\n    padding: '12px 12px 12px 40px',\n    width: '100%',\n  },\n})\n"],"sourceRoot":""}